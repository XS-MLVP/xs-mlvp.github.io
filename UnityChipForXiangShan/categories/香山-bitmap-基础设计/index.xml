<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>香山 Bitmap 基础设计 on 万众一芯之香山处理器</title>
    <link>https://open-verify.cc/UnityChipForXiangShan/categories/%E9%A6%99%E5%B1%B1-bitmap-%E5%9F%BA%E7%A1%80%E8%AE%BE%E8%AE%A1/</link>
    <description>Recent content in 香山 Bitmap 基础设计 on 万众一芯之香山处理器</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://open-verify.cc/UnityChipForXiangShan/categories/%E9%A6%99%E5%B1%B1-bitmap-%E5%9F%BA%E7%A1%80%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shield-XS Bitmap 基础知识</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/basic/</guid>
      <description>&lt;p&gt;本节将介绍 bitmap 的一些基础知识，有助于理解为什么我们需要 bitmap，本节包含：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;背景描述&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;威胁模型&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;防御原理&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;工作流程&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;术语描述&#34;&gt;术语描述&lt;/h4&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;缩写&lt;/th&gt;&#xA;          &lt;th&gt;全名&lt;/th&gt;&#xA;          &lt;th&gt;含义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;TCB&lt;/td&gt;&#xA;          &lt;td&gt;Trusted Computing Base&lt;/td&gt;&#xA;          &lt;td&gt;可信计算基，负责底层硬件的安全可信操作&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;TEE&lt;/td&gt;&#xA;          &lt;td&gt;Trusted Execution Environment&lt;/td&gt;&#xA;          &lt;td&gt;可信执行环境&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MMU&lt;/td&gt;&#xA;          &lt;td&gt;Memory Management Unit&lt;/td&gt;&#xA;          &lt;td&gt;内存管理单元&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;RDSM&lt;/td&gt;&#xA;          &lt;td&gt;Root Domain Security Mananger&lt;/td&gt;&#xA;          &lt;td&gt;根域权限管理器&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;C-SDSM&lt;/td&gt;&#xA;          &lt;td&gt;Confidencial Supervisor Domain Security Manager&lt;/td&gt;&#xA;          &lt;td&gt;可信监督域 权限管理器&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;APLIC&lt;/td&gt;&#xA;          &lt;td&gt;advanced platform level interrupt controller&lt;/td&gt;&#xA;          &lt;td&gt;平台级中断控制器&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;LLC&lt;/td&gt;&#xA;          &lt;td&gt;Last Lavel Cache&lt;/td&gt;&#xA;          &lt;td&gt;末级缓存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;DMA&lt;/td&gt;&#xA;          &lt;td&gt;Direct Memory Access&lt;/td&gt;&#xA;          &lt;td&gt;直接内存访问&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;CVM&lt;/td&gt;&#xA;          &lt;td&gt;Confidencial Virtual Machine&lt;/td&gt;&#xA;          &lt;td&gt;可信虚拟机&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;TLB&lt;/td&gt;&#xA;          &lt;td&gt;Translation Lookaside Buffer&lt;/td&gt;&#xA;          &lt;td&gt;页表缓存&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MBMC&lt;/td&gt;&#xA;          &lt;td&gt;machine level bitmap check&lt;/td&gt;&#xA;          &lt;td&gt;bitmap CSR 特殊状态寄存器&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;BMA&lt;/td&gt;&#xA;          &lt;td&gt;Bitmap Adress&lt;/td&gt;&#xA;          &lt;td&gt;Shield Bitmap 专属内存区域基地址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;CMODE&lt;/td&gt;&#xA;          &lt;td&gt;Confidencial Mode&lt;/td&gt;&#xA;          &lt;td&gt;开启bitmap后当前模式是否是可信&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;BME&lt;/td&gt;&#xA;          &lt;td&gt;Bitmap Enable&lt;/td&gt;&#xA;          &lt;td&gt;是否开启 Bitmap&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;PTW&lt;/td&gt;&#xA;          &lt;td&gt;Page Table Walker&lt;/td&gt;&#xA;          &lt;td&gt;页表遍历器&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;HPTW&lt;/td&gt;&#xA;          &lt;td&gt;Hypervisor PTW&lt;/td&gt;&#xA;          &lt;td&gt;监督域页表遍历器&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;LLPTW&lt;/td&gt;&#xA;          &lt;td&gt;Last Level PTW&lt;/td&gt;&#xA;          &lt;td&gt;末级页表遍历器&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>背景描述</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/basic/00_bm_background/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/basic/00_bm_background/</guid>
      <description>&lt;h2 id=&#34;背景描述&#34;&gt;背景描述&lt;/h2&gt;&#xA;&lt;p&gt;自计算机问世以来，数据安全始终是至关重要的议题。在个人计算机时代，数据安全主要集中在单机硬盘等存储设备的安全性上。随着互联网时代的到来，数据安全的范畴扩展到了计算机之间数据传输的安全性，促使了安全传输协议的设计与发展。如今，在云计算时代，用户的大量数据被存储和处理在云端。在云环境中存储、共享和计算的数据面临着多重安全威胁。在云计算环境下，不同类型的负载面临各自的威胁模型包括但不限于：&lt;/p&gt;&#xA;&lt;p&gt;计算型负载：恶意软件可能侵入操作系统或固件，攻击 CPU 和内存资源，导致数据泄露或系统性能下降。&lt;/p&gt;&#xA;&lt;p&gt;内存型负载：恶意软件或进程可能试图访问内存型负载使用的内存区域，导致数据泄露或篡改。&lt;/p&gt;&#xA;&lt;p&gt;存储型负载：存储设备及其 DMA 功能可能被攻击者利用，直接访问或篡改存储设备内存，绕过传统安全检查。&lt;/p&gt;&#xA;&lt;p&gt;网络型负载：网络攻击可能利用网络接口控制器（NIC）等网络设备漏洞入侵系统，通过 DMA 功能访问或篡改内存中的敏感数据。&lt;/p&gt;&#xA;&lt;h4 id=&#34;不同工作负载面临的安全威胁&#34;&gt;不同工作负载面临的安全威胁&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../basic00_1.png&#34; alt=&#34;不同工作负载面临的安全威胁&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;威胁模型&#34;&gt;威胁模型&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;strong&gt;类别&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;strong&gt;安全准则&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;内存分配&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;动态分配安全/非安全内存的能力&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;安全内存应根据需求动态分配或释放。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;内存机密性&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;内存隔离&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;防止非可信计算基（non-TCB）组件读取可信执行环境（TEE）的内存。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;抵御软件攻击的内存完整性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;防止软件攻击（如内存重映射、别名攻击、重放攻击、数据破坏等）。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;共享内存&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;TEE控制与非TCB组件的数据共享&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;防止非TCB代码在未经TEE同意的情况下泄露信息。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;TEE控制与其他TEE的数据共DUT 享&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;支持TEE之间安全共享内存的能力。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;I/O保护&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;防止非TCB设备通过DMA访问TEE内存&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;禁止未被TCB接纳的外设设备访问TEE内存。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;来自TCB内设备的可信I/O&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;通过准入控制将设备绑定到TEE。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>香山 bitmap 防御原理</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/basic/01_bm_principle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/basic/01_bm_principle/</guid>
      <description>&lt;h2 id=&#34;防御原理&#34;&gt;防御原理&lt;/h2&gt;&#xA;&lt;p&gt;针对日益复杂的负载的安全威胁，香山轻量动态隔离模型为经典负载机密虚拟机和容器设计了一种动态隔离机制，用来保护正在使用中的数据的机密性和完整性。依据不同的应用场景，将负载从安全的维度进行划分，分为安全敏感型负载和非安全敏感型负载。&lt;/p&gt;&#xA;&lt;p&gt;安全敏感型负载需要运行在可信执行环境下，用来保护正在使用中数据和代码的机密性和完整性。非安全敏感型负载对数据没有安全性保护需求，执行在开放的执行环境下，保证执行的效率。&lt;/p&gt;&#xA;&lt;p&gt;基于bitmap的安全隔离的防御机制，其核心原理是通过可信根在软件层面的标记（Shield-bit）来隔离和保护敏感工作负载（Sensitive Workloads）与普通工作负载（Normal Workloads），从而增强系统的安全性。以下是其防御原理的详细描述：&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-分类与标记&#34;&gt;1. 分类与标记&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;工作负载分类&lt;/strong&gt;：系统将工作负载分为两类：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;敏感工作负载（Sensitive Workloads）&lt;/strong&gt;：需要高安全级别的任务，如机密虚拟机、安全容器的任务（隐私数据的访问、处理）等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;普通工作负载（Normal Workloads）&lt;/strong&gt;：常规任务，代表系统中普通的应用程序或进程，安全要求较低。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Shield-bit 标记&lt;/strong&gt;：通过 “Shield-bit”（&lt;strong&gt;每比特代表 4KB&lt;/strong&gt;）对敏感工作负载使用的资源进行标记，依据需此标记动态调整资源访问权限：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;Shield-bit = 1&lt;/code&gt; 表示&lt;strong&gt;安全敏感资源&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;Shield-bit = 0&lt;/code&gt; 表示&lt;strong&gt;非安全敏感资源&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-资源隔离&#34;&gt;2. 资源隔离&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;资源池划分&lt;/strong&gt;：&lt;a href=&#34;https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/basic/01_bm_principle/#light_model_img&#34;&gt;图中&lt;/a&gt;显示资源池中包含混合的敏感和普通工作负载，但通过 Shield-bit 实现逻辑隔离。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;资源类型保护&lt;/strong&gt;：敏感工作负载访问特定资源（如内存、IO设备、中断等）时，Shield-bit 会触发保护机制，防止普通工作负载或恶意程序越权访问。例如：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;内存隔离&lt;/strong&gt;：敏感数据的内存区域仅对标记为敏感的工作负载可访问。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;设备与中断保护&lt;/strong&gt;：关键外设或中断仅允许敏感工作负载调用。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;3-bypass-机制&#34;&gt;3. Bypass 机制&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Bypass Shield-bit&lt;/strong&gt;：在单向隔离的情况下（仅对普通负载的资源访问作限制），安全敏感负载可绕过 Shield-bit 的机制直接访问资源提升性能。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4-防御目标&#34;&gt;4. 防御目标&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;防止横向渗透&lt;/strong&gt;：攻击者通过普通工作负载漏洞无法访问敏感资源。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;最小权限原则&lt;/strong&gt;：每个工作负载仅能访问其必需的资源，降低攻击面。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;动态安全调整&lt;/strong&gt;：根据工作负载的敏感程度动态切换保护状态。&lt;/p&gt;&#xA;&lt;h3 id=&#34;5-技术实现&#34;&gt;5. 技术实现&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;硬件支持&lt;/strong&gt;：依赖内存管理单元（MMU）的扩展功能。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;软件协同&lt;/strong&gt;：由可信计算基负责标记管理和资源调度。&lt;/p&gt;&#xA;&lt;span id=&#34;light_model_img&#34;/&gt;&#xA;&lt;h4 id=&#34;香山shield-xs-轻量隔离模型&#34;&gt;香山Shield-XS 轻量隔离模型&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../basic01_1.png&#34; alt=&#34;香山Shield-XS 轻量隔离模型&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;6-核心工作流程&#34;&gt;6. 核心工作流程&lt;/h3&gt;&#xA;&lt;h4 id=&#34;shield-xs-隔离模型工作流程&#34;&gt;Shield-XS 隔离模型工作流程&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../basic01_2.png&#34; alt=&#34;Shield-XS 隔离模型工作流程&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;A. 启动&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;系统初始化，加载固件（Firmware TCB）和可信执行环境（TEE TCB）。&lt;/p&gt;&#xA;&lt;p&gt;开启Bitmap安全检测功能。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;B. 配置&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;设定安全策略，例如定义受保护资源（内存、IO、中断等）访问权限。&lt;/p&gt;&#xA;&lt;p&gt;TEE-TCB 依据应用需求配置不同资源的安全/非安全属性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>bitmap的工作流程</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/basic/02_bm_workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/basic/02_bm_workflow/</guid>
      <description>&lt;h2 id=&#34;bitmap的工作流程是怎样的&#34;&gt;bitmap的工作流程是怎样的？&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../basic02_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-识别负载类型&#34;&gt;1. 识别负载类型&lt;/h3&gt;&#xA;&lt;p&gt;根据应用场景和安全需求，将负载分为安全敏感型负载和非安全敏感型负载：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;安全敏感型负载&lt;/strong&gt;：需要在可信执行环境中运行，以保护数据和代码的机密性和完整性。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;非安全敏感型负载&lt;/strong&gt;：可以在开放的执行环境中运行，主要关注执行效率。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-设置隔离属性&#34;&gt;2. 设置隔离属性&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;定义隔离属性&lt;/strong&gt;：为不同类型负载设置隔离属性，包括单向隔离和双向隔离。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;单向隔离&lt;/strong&gt;：允许安全敏感型负载访问非安全敏感型负载的资源，但不允许反向访问。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;双向隔离&lt;/strong&gt;：安全敏感型负载和非安全敏感型负载之间互相不能访问对方的资源。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;3-划分资源池&#34;&gt;3. 划分资源池&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;划分物理内存资源&lt;/strong&gt;：将物理内存划分为不同的资源池以支持不同负载的隔离需求。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;安全资源池&lt;/strong&gt;：分配给安全敏感型负载。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;非安全资源池&lt;/strong&gt;：分配给非安全敏感型负载。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;4-配置安全属性&#34;&gt;4. 配置安全属性&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;设置内存页安全状态&lt;/strong&gt;：使用Bitmap数据结构标记每个物理内存页的安全状态。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;安全页&lt;/strong&gt;：标记为1，表示该页属于安全资源池。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;非安全页&lt;/strong&gt;：标记为0，表示该页属于非安全资源池。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;5-动态分配资源&#34;&gt;5. 动态分配资源&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;按需分配内存&lt;/strong&gt;：根据负载的启动和运行时需求，动态分配相应的内存资源。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;安全敏感型负载&lt;/strong&gt;：从安全资源池分配内存，并确保其访问受限于安全页。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;非安全敏感型负载&lt;/strong&gt;：从非安全资源池分配内存，允许其访问非安全页。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;6-隔离检测判断&#34;&gt;6. 隔离检测判断&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;判断隔离类型&lt;/strong&gt;：判断当前负载是否需要单向隔离或者双向隔离。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;单向隔离&lt;/strong&gt;：仅对非安全敏感型负载进行安全性检测，确保其不访问安全资源。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;双向隔离&lt;/strong&gt;：对所有负载类型进行隔离检测，确保不同负载之间互不干扰。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;7-安全性检测&#34;&gt;7. 安全性检测&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;执行访问控制检查&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;对于单向隔离情况，检查非安全敏感型负载是否试图访问安全资源。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;对于双向隔离情况，检查所有负载类型是否试图越界访问其他类型的资源。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;8-动态回收资源&#34;&gt;8. 动态回收资源&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;释放不再使用的资源&lt;/strong&gt;：负载执行完毕后，其占用的内存资源被回收并返回到相应的资源池中，以便后续其他负载的使用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>香山bitmap 应用场景</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/basic/03_bm_scenario/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/basic/03_bm_scenario/</guid>
      <description>&lt;h2 id=&#34;应用场景&#34;&gt;应用场景&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-机密虚拟机&#34;&gt;1. 机密虚拟机&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../basic03_1.png&#34; alt=&#34;应用场景-机密虚拟机&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Shield-XS用于普通虚拟机和机密虚拟机的隔离。在机密虚拟机（Confidential VM， CVM）环境中，bitmap 用于标记和隔离安全内存区域。&lt;/p&gt;&#xA;&lt;p&gt;普通虚拟机在访问内存时，硬件通过 bitmap 检查机制确保其只能访问被授权的内存区域，从而实现虚拟机之间的内存隔离。&lt;/p&gt;&#xA;&lt;p&gt;注：机密虚拟机之间的隔离通过MMU 完成，不需要经过Bitmap 的检查机制。&lt;/p&gt;&#xA;&lt;p&gt;CVM Bitmap 的资源的标记和分配由C-SDSM (Confidential Supervisor Domain Security Manager) 完成，Hypervisor 和 CVM 通过TEECall 和 TEEResume 进行安全世界的交互。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../basic03_2.png&#34; alt=&#34;安全世界接口&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;TEECall&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从普通世界（Normal World）切换到安全世界（TEE），进入敏感工作负载执行流程。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;TEEResume&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从 TEE 返回普通世界，恢复 Normal Workloads 的执行。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-安全增强容器&#34;&gt;2. 安全增强容器&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../basic03_3.png&#34; alt=&#34;应用场景-容器&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上图显示了bitmap在容器中的应用场景。安全容器和普通容器都位于可信计算基的保护范围内。在安全容器中运行的应用程序可能包含敏感数据或关键业务逻辑。为了防止这些数据被普通容器或恶意软件访问，采用通过 &lt;strong&gt;bitmap 机制&lt;/strong&gt;进行隔离。&lt;/p&gt;&#xA;&lt;p&gt;Bitmap 数据结构用于标记哪些物理页属于安全容器的存储空间，通过将对应该容器内存区域的位图数据写为1，确保普通容器无法访问这些存储空间。只有安全容器内的应用程可以访问这些被标记为安全的内存页。&lt;/p&gt;&#xA;&lt;p&gt;普通容器中的应用程序可能来自不可信的来源。通过 bitmap 机制，普通容器的内存访问被限制在非安全内存区域。任何试图访问安全内存的请求都会被硬件拦截，并触发Access Fault。&lt;/p&gt;&#xA;&lt;p&gt;在上述场景的具体的实施细节中，&lt;strong&gt;&lt;font style=&#34;color:#ee0000;&#34;&gt;软件模块负责Bitmap管理和配置 ， 硬件机制负责Bitmap检查和同步。&lt;font&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
