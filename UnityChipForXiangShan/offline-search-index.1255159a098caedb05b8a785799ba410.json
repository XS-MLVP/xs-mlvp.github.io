[{"body":"脚本目标 该脚本的目标是提供RTL到Python DUT的编译、目标覆盖文件，以及自定义功能等内容。\n创建过程 确定文件名称 在香山昆明湖DUT验证进展中选择需要验证的UT，如果没有或者进一步细化，可通过编辑config/dutree/xiangshan=lmh.yaml自行添加。\n脚本文件的命名格式如下：\nscripts/build_ut_\u003c顶层模块\u003e_\u003c下层模块名\u003e[...].\u003c目标模块名\u003e.py 目前本项目内置了4个顶层模块：\nut_frontend 前端 ut_backend 后端 ut_mem_block 访存 ut_misc 其他 其中的子模块没有ut_前缀（顶层目录有该前缀是为了和其他目录区分开）。\n例如验证目标DUT为：backend.ctrl_block.decode，需要创建的脚本名称为 build_ut_backend_ctrl_block_decode.py。\n编写 build(cfg) -\u003e bool 函数 build函数定义如下：\ndef build(cfg) -\u003e bool: \"\"\"编译DUT Args: cfg: 运行时配置，可通过它访问配置项，例如 cfg.rtl.version Return: 返回 True 或者 False，表明该函数是否完成预期目标 \"\"\" build在make dut 时会被调用，其主要是将目标 RTL 转换为 Python 模块。在该过程中也可以加入其他必要过程，例如编译依赖项等。以build_ut_backend_ctrl_block_decode.py为例，主要完成了RTL检查、DUT检查、RTL编译、disasm依赖编译等工作：\ndef build(cfg) -\u003e bool: # import 相关依赖 from toffee_test.markers import match_version from comm import is_all_file_exist, get_rtl_dir, exe_cmd, get_root_dir # 检查RTL版本（version参数为空，表示所有版本都支持） if not match_version(cfg.rtl.version, []): warning(\"backend_ctrlblock_decode: %s\" % f\"Unsupported RTL version {cfg.rtl.version}\") return False # 检查在当前RTL中，目标文件是否存在 f = is_all_file_exist([\"rtl/RVCExpander.sv\", \"rtl/PreDecode.sv\", \"rtl/DecodeStage.sv\"], get_rtl_dir(cfg=cfg)) assert f is True, f\"File {f} not found\" # 如果dut中不存在RVCExpander/PreDecode/DecodeStage，则调用picker进行Python打包 if not os.path.exists(get_root_dir(\"dut/RVCExpander\")): info(\"Exporting RVCExpander.sv\") s, out, err = exe_cmd(f'picker export --cp_lib false {get_rtl_dir(\"rtl/RVCExpander.sv\", cfg=cfg) } --lang python --tdir {get_root_dir(\"dut\")}/ -w rvc.fst -c') assert s, \"Failed to export RVCExpander.sv: %s\\n%s\" % (out, err) if not os.path.exists(get_root_dir(\"dut/PreDecode\")): info(\"Exporting PreDecode.sv\") s, _, _ = exe_cmd(f'picker export --cp_lib false {get_rtl_dir(\"rtl/PreDecode.sv\", cfg=cfg) } --lang python --tdir {get_root_dir(\"dut\")}/ -w predecode.fst -c') assert s, \"Failed to export PreDecode.sv\" if not os.path.exists(get_root_dir(\"dut/DecodeStage\")): info(\"Exporting DecodeStage.sv\") s, _, _ = exe_cmd(f'picker export --cp_lib false {get_rtl_dir(\"rtl/DecodeStage.sv\", cfg=cfg) } --fs { get_root_dir(\"scripts/backend_ctrlblock_decode/rtl_files.f\") } --lang python --tdir {get_root_dir(\"dut\")}/ -w decode.fst -c') assert s, \"Failed to export DecodeStage.sv\" # 如果tools中不存在disasm/build，则需要编译disasm if not os.path.exists(get_root_dir(\"tools/disasm/build\")): info(\"Building disasm\") s, _, _ = exe_cmd(\"make -C %s\" % get_root_dir(\"tools/disasm\")) assert s, \"Failed to build disasm\" # 编译成功 return True picker的使用方式请参考其使用文档\n在scripts目录中可以创建子目录保存UT验证需要的文件，例如decode模块创建了scripts/backend_ctrlblock_decode目录，其中的rtl_file.f用来指定输入的RTL文件，line_coverage.ignore用来保存需要忽略的代码行统计。自定义目录的命名需要合理，且能通过名字判断其所属模块和文件。\n编写 line_coverage_files(cfg) -\u003e list[str] 函数 line_coverage_files函数的定义如下：\ndef line_coverage_files(cfg)-\u003e list[str]: \"\"\"指定需要覆盖的文件 Args: cfg: 运行时配置，可通过它访问配置项，例如 cfg.rtl.version Return: 返回统计代码行覆盖率的目标RTL文件名 \"\"\" 在build_ut_backend_ctrl_block_decode.py文件中，line_coverage_files函数的定义如下：\ndef line_coverage_files(cfg): return [\"PreDecode.v\", \"DecodeStage.v\"] 标识该模块关注的是对PreDecode.v, DecodeStage.v文件的覆盖。如果不开启测试结果后处理(cfg.doc_result.disable = False)，上述函数则不会被调用。\n","categories":"","description":"","excerpt":"脚本目标 该脚本的目标是提供RTL到Python DUT的编译、目标覆盖文件，以及自定义功能等内容。\n创建过程 确定文件名称 在香山昆明 …","ref":"/UnityChipForXiangShan/docs/03_add_test/01_build_script/","tags":"","title":"添加编译脚本"},{"body":"确定目录结构 单元测试所在的目录位置的层级结构应该与名称一致，例如backend.ctrl_block.decode应当位于ut_backend/ctrl_block/decode目录，且每层目录都需要有__init__.py，便于通过Python进行import。模块（例如decode）中的代码目录结构由贡献者自行决定，当需要满足python规范，且逻辑合理，命名合理。\n编写测试环境 在UT验证模块的测试环境中，目标是完成以下工作：\n对DUT进行功能封装，提供稳定测试API 定义功能覆盖率 定义必要fixture提供给测试用例 在合理时刻统计覆盖率 以decode环境中的RVCExpander为例（ut_backend/ctrl_block/decode/env/decode_wrapper.py）：\n1. DUT封装 class RVCExpander(toffee.Bundle): def __init__(self, cover_group, **kwargs): super().__init__() self.cover_group = cover_group self.dut = DUTRVCExpander(**kwargs) # 创建DUT self.dut.io_in.AsImmWrite() # DUTRVCExpander为组合电路，将输入引脚设置为ImmWrite写入模式 self.io = toffee.Bundle.from_prefix(\"io_\", self.dut) # 通过 Bundle 关联引脚 self.bind(self.dut) # 把 Bunldle 与 DUT 进行绑定 def expand(self, instr): self.io[\"in\"].value = instr # 给DUT引脚赋值 self.dut.RefreshComb() # 推动组合电路 self.cover_group.sample() # 调用sample对功能覆盖率进行统计 return self.io[\"out_bits\"].value, self.io[\"ill\"].value # 返回结果 和 是否是非法指令 def stat(self): # 获取当前状态 return { \"instr\": self.io[\"in\"].value, # 输入指令 \"decode\": self.io[\"out_bits\"].value, # 返回展开结果 \"ilegal\": self.io[\"ill\"].value != 0, # 输入是否非法 } 在上述例子中，class RVCExpander对DUTRVCExpander进行了封装，对外提供了两个API：\nexpand(instr: int) -\u003e (int, int) ：该函数用于接受输入指令 instr 进行解码，返回（结果，非法指令标记）。如果非法指令标记不为0，者说明输入指令非法。 stat() -\u003e dict(instr, decode, ilegal)：该函数用于返回当前的状态，其中包含当前的输入指令，解码结果以及非法指令标记。 上述API屏蔽了DUT的引脚，对外程序通用功能。\n2. 定义功能覆盖率 尽可能的在Env中定义好功能覆盖率，如果有必要也可以在测试用例中定义覆盖率。\nimport toffee.funcov as fc def init_rvc_expander_funcov(expander, g: fc.CovGroup): \"\"\"Add watch points to the RVCExpander module to collect function coverage information\"\"\" # 1. Add point RVC_EXPAND_RET to check expander return value: # - bin ERROR. The instruction is not illegal # - bin SUCCE. The instruction is not expanded g.add_watch_point(expander, { \"ERROR\": lambda x: x.stat()[\"ilegal\"] == False, \"SUCCE\": lambda x: x.stat()[\"ilegal\"] != False, }, name = \"RVC_EXPAND_RET\") ... 在上述代码中添加了名为RVC_EXPAND_RET的功能检查点来检查RVCExpander模块是否具有返回非法指令的能力。需要满足ERROR和SUCCE两个条件，即stat()中的ileage需要有True也需要有False值。toffee中覆盖率的使用方法请参考其使用文档。\n3. 定义必要fixture version_check = get_version_checker(\"openxiangshan-kmh-*\") # 指定满足要的RTL版本 @pytest.fixture() def rvc_expander(request): version_check() # 进行版本检查 fname = request.node.name # 获取调用该fixture的测试用例 wave_file = get_out_dir(\"decoder/rvc_expander_%s.fst\" % fname) # 设置波形文件路径 coverage_file = get_out_dir(\"decoder/rvc_expander_%s.dat\" % fname) # 设置代码覆盖率文件路径 coverage_dir = os.path.dirname(coverage_file) os.makedirs(coverage_dir, exist_ok=True) # 目标目录不正在则创建目录 expander = RVCExpander(g, coverage_filename=coverage_file, waveform_filename=wave_file) # 创建RVCExpander init_rvc_expander_funcov(expander, g) # 初始化功能检查点 yield expander # 返回创建好的 RVCExpander 给 Test Case expander.dut.Finish() # Tests Case运行完成后，结束DUT set_line_coverage(request, coverage_file) # 把生成的代码覆盖率文件告诉 toffee-report set_func_coverage(request, g) # 把生成的功能覆盖率数据告诉 toffee-report g.clear() # 清空功能覆盖统计 上述fixture完成了以下功能：\n进行RTL版本检查，如果不满足\"openxiangshan-kmh-*\"要求，则跳过调用改fixture的测试用例 创建DUT，并指定了波形，代码行覆盖率文件路径（路径中含有调用该fixure的用例名称：fname） 调用init_rvc_expander_funcov添加功能覆盖点 结束DUT，处理代码行覆盖率和功能覆盖率（发往toffee-report进行处理） 清空功能覆盖率 *注：在PyTest中，执行测试用例test_A(rvc_expander, ....)前，会自动调用并执行rvc_expander(request)中yield关键字前的部分，然后通过yield返回rvc_expander调用test_A用例，用例执行完成后，再继续执行fixture中yield关键字之后的部分。\nEnv编写要求： 需要进行RTL版本检查 Env提供的API需要和引脚、时序无关 Env提供的API需要稳定，不能随意进行接口/返回值修改 需要定义必要的fixture 需要初始化功能检查点（功能检查点可以独立成一个模块） 需要进行覆盖率统计 需要有说明文档 ","categories":"","description":"","excerpt":"确定目录结构 单元测试所在的目录位置的层级结构应该与名称一致，例如backend.ctrl_block.decode应当位 …","ref":"/UnityChipForXiangShan/docs/03_add_test/02_build_env/","tags":"","title":"构建测试环境"},{"body":"命名要求 所有测试用例文件请以test_*.py的方式进行命名，*用测试目标替换。所有测试用例也需要以test_前缀开头。用例名称需要具有明确意义。\n命名举例如下：\ndef test_a(): # 不合理，无法通过a判断测试目标 pass def test_rvc_expand_16bit_full(): # 合理，可以通过用例名称大体知道测试内容 pass 使用Assert 在每个测试用例中，都需要通过 assert 来判断本测试是否通过。\n编写注释 每个测试用例都需要添加必要的说明和注释，需要满足Python注释规范。\n测试用例说明参考格式：\ndef test_\u003cname\u003e(a: type_a, b: type_b): \"\"\"Test abstract Args: a (type_a): description of arg a. b (type_b): description of arg b. Detailed test description here (if need). \"\"\" ... 用例管理 为了方便测试用例管理，可通过toffee-test提供的@pytest.mark.toffee_tags标签功能，请参考此处。\n检查点反标 TBD\n","categories":"","description":"","excerpt":"命名要求 所有测试用例文件请以test_*.py的方式进行命名，*用测试目标替换。所有测试用例也需要以test_前缀开头。用例名称需要具有明 …","ref":"/UnityChipForXiangShan/docs/03_add_test/03_add_test/","tags":"","title":"添加测试用例"},{"body":"什么是代码覆盖率 TBD\n本项目中相关涉及位置 TBD\n1. build script TBD\n1. Env中的fixture TBD\n忽略统计指定代码 TBD\n查看统计结果 TBD\n","categories":"","description":"","excerpt":"什么是代码覆盖率 TBD\n本项目中相关涉及位置 TBD\n1. build script TBD\n1. Env中的fixture TBD\n忽略 …","ref":"/UnityChipForXiangShan/docs/03_add_test/04_cover_line/","tags":"","title":"代码覆盖率"},{"body":"什么是功能覆盖率 TBD\n本项目中相关涉及位置 TBD\n指定Group名称 TBD\n自定义检查点 TBD\n","categories":"","description":"","excerpt":"什么是功能覆盖率 TBD\n本项目中相关涉及位置 TBD\n指定Group名称 TBD\n自定义检查点 TBD\n","ref":"/UnityChipForXiangShan/docs/03_add_test/05_cover_func/","tags":"","title":"功能覆盖率"},{"body":" 当前版本： 查看测试报告 香山昆明湖架构各个模块验证情况如上图中所示。总统计数据如下：\n总测试用例数（Total Cases）： - 测试用例通过数（Passed Cases）： - 测试用例通过率（Passed Rate）： - 测试用例未过数（Failed Cases）： - 测试用例跳过数（Skipped Cases）： - 测试用例跳过率（Skip Rate）： - 总功能覆盖点数（Function Coverage）： - 覆盖点已覆盖数（Covered Functions）： - 覆盖点已覆盖率（Covered Rate）： - 总代码行覆盖率（Total Lines）： - 总代码行覆盖数（Covered Lines）： - 总代码行覆盖率（Covered Rate）： - *总代码行会随着DUT的增加而不断增加，因此：总代码行覆盖率不是最终覆盖率\n其他内容快捷连接：\nDUT文档与功能 待确认bug列表 已发现bug列表 已修复bug列表 正在进行的任务列表 已完成的任务列表 香山昆明湖DUT验证进展 注：本项目中的统计信息根据commit等数据自动更新，参与者可以提交issue（写明任务内容，预计完成时间等）同步正在进行的任务。\n数据自动更新日期：1970-01-01 00:00:00 ","categories":"","description":"","excerpt":" 当前版本： 查看测试报告 香山昆明湖架构各个模块验证情况如上图中所示。总统计数据如下：\n总测试用例数（Total Cases）： - 测试 …","ref":"/UnityChipForXiangShan/docs/","tags":"","title":"进度概述"},{"body":" 当前版本： 查看测试报告 上图共有-个模块，默认情况下模块为灰色，当模块中的测试用例数大于-时，该模块被完全点亮。目前已经完全点亮的模块为-个，待点亮的模块有-个。\n通用处理器模块简介 高性能处理器是现代计算设备的核心，它们通常由三个主要部分组成：前端、后端和访存系统。这些部分协同工作，以确保处理器能够高效地执行复杂的计算任务。\n前端：前端部分，也被称为指令获取和解码阶段，负责从内存中获取指令并将其解码成处理器可以理解的格式。这一阶段是处理器性能的关键，因为它直接影响到处理器可以多快地开始执行指令。前端通常包括指令缓存、分支预测单元和指令解码器。指令缓存用于存储最近访问过的指令，以减少对主内存的访问次数，从而提高处理速度。分支预测单元则尝试预测程序中的条件分支，以便提前获取和解码后续指令，这样可以减少等待分支结果的时间。\n后端：后端部分，也称为执行阶段，是处理器中负责实际执行指令的地方。这一阶段包括了算术逻辑单元（ALU）、浮点单元（FPU）和各种执行单元。这些单元负责进行算术运算、逻辑运算、数据传输和其他处理器操作。后端的设计通常非常复杂，因为它需要支持多种指令集架构（ISA）并优化性能。为了提高效率，现代处理器通常采用超标量架构，这意味着它们可以同时执行多条指令。\n访存：访存系统是处理器与内存之间交互的桥梁。它包括了数据缓存、内存控制器和高速缓存一致性协议。数据缓存用于存储处理器频繁访问的数据，以减少对主内存的访问次数。内存控制器负责管理处理器与内存之间的数据传输。高速缓存一致性协议确保在多处理器系统中，所有处理器看到的内存状态是一致的。\n高性能处理器的设计需要在这三个部分之间找到平衡，以实现最佳的性能。这通常涉及到复杂的微架构设计，以及对处理器流水线的优化。\n","categories":"","description":"","excerpt":" 当前版本： 查看测试报告 上图共有-个模块，默认情况下模块为灰色，当模块中的测试用例数大于-时，该模块被完全点亮。目前已经完全点亮的模块 …","ref":"/UnityChipForXiangShan/docs/00_unitychip_for_xiangshan/","tags":"","title":"目标验证单元"},{"body":"基础环境需求 本项目基于Python编程语言进行UT验证，采用的工具和测试框架为picker和toffe，环境需求如下：\nLinux操作系统。建议WSL2下安装Ubuntu22.04。 Python。建议Python3.11。 picker。按照快速开始中的提示安装最新版本。 环境配置完成后，clone仓库：\ngit clone https://github.com/XS-MLVP/UnityChipForXiangShan.git cd UnityChipForXiangShan pip3 install -r requirements.txt # 安装python依赖（例如 toffe） 下载RTL代码： 默认从仓库https://github.com/XS-MLVP/UnityChipXiangShanRTLs中下载。用户也可以自行按照XiangShan文档编译生成RTL。\nmake rtl # 该命下载最新的rtl代码，并解压至rtl目录，并创建软连接 所有RTL下载包请在UnityChipXiangShanRTLs中查看。\nRTL压缩包的命名规范为：名称-微架构-Git标记-日期编号.tar.gz，例如openxiangshan-kmh-97e37a2237-24092701.tar.gz。在使用时，仓库代码会过滤掉git标记和后缀，例如通过 cfg.rtl.version 访问到的版本号为：openxiangshan-kmh-24092701。压缩包内的目录结构为：\nopenxiangshan-kmh-97e37a2237-24092701.tar.gz └── rtl # 目录 |-- *.sv # 所有sv文件 `-- *.v # 所有v文件 编译DUT 该过程的目的是将RTL通过picker工具打包为Python模块。可以通过make命令指定被打包DUT，也可以一次性打包所有DUT。\n# 调用scripts目录中的build_ut_\u003cname\u003e.py中的build方法，创建待验证的Python版DUT make dut DUTS=\u003cname\u003e # DUTS的值如果有多个，需要用逗号隔开，支持通配符。DUTS默认值为 \"*\"，编译所有DUT # 例如： make dut DUTS=backend_ctrl_block_decode 以make dut DUTS=backend_ctrl_block_decode为例，命令执行完成后，会在dut目录下生成对应的Python包：\ndut/ ├── __init__.py ├── DecodeStage ├── Predecode └── RVCExpander 完成转换后，在测试用例代码中可以import对应的DUT，例如：\nfrom dut.PreDecode import DUTPreDecode dut = DUTPreDecode() ","categories":"","description":"","excerpt":"基础环境需求 本项目基于Python编程语言进行UT验证，采用的工具和测试框架为picker和toffe，环境需求如下：\nLinux操作系 …","ref":"/UnityChipForXiangShan/docs/01_verfiy_env/","tags":"","title":"准备验证环境"},{"body":"本项目基于PyTest测试框架进行验证。运算测试时，PyTest框架自动搜索所有test_*.py文件，并自动执行其中所有以test_开头的测试用例（Test Case）。\n# 执行所有ut_*目录中的test case make test_all # 执行指定目录下的test case make test target=\u003cdir\u003e # 例如执行ut_backend/ctrl_block/decode目录中所有的test case make test target=ut_backend/ctrl_block/decode 可通过args参数传递Pytest的运行参数，例如启动x-dist插件的多核功能：\nmake test args=\"-n 4\" # 启用 4 个进程 make test args=\"-n auto\" # 让框架自动选择启用多少个进程 *注：x-dist可以在多节点上并发运行测试，可参考其文档\n运行完成后，默认在out/report目录会生成html版本的测试报告，其 html 文件可通过浏览器直接打开查看（VS Code IDE建议安装Open In Default Browser插件）。\n运行测试主要完成以下三部分内容：\n按要求运行Test Case，可通过cfg.tests中的选项进行配置 统计测试结果，输出测试报告。有toffee-report自动生成 (总测试报告，所有Test的结果合并在一起) 根据需要（cfg.doc_result.disable = True）在测试报告上进行进一步数据统计 ","categories":"","description":"","excerpt":"本项目基于PyTest测试框架进行验证。运算测试时，PyTest框架自动搜索所有test_*.py文件，并自动执行其中所有以test_开头的 …","ref":"/UnityChipForXiangShan/docs/02_run_test/","tags":"","title":"运行测试"},{"body":"添加一个全新的DUT测试用例，需要完成以下三部分内容：\n添加编译脚本： 在scripts目录下编写对应的rtl到python的编译python文件。 构建测试环境： 在目录中创建目标测试UT目录（例如ut_backend/ctrl_block/decode）。如果有需要的话，可以在tools、comm等模块中添加该DUT测试需要的基础工具。 添加测试用例： 在测试UT目录，按PyTest规范添加测试用例。 如果是在已有的DUT测试中增加内容，按原有目录结构添加即可。\n如何通过picker和toffee库进行Python芯片验证，请参考：https://open-verify.cc/mlvp/docs\n在测试时还需要关心以下内容：\nUT模块说明: 在添加的模块顶层文件夹中，添加README.md说明，具体格式和要求请参考模板。 代码覆盖率：代码覆盖率是芯片验证的重要指标，一般需需要覆盖目标DUT的所有代码。 功能覆盖率：功能覆盖率即目标功能验证完成了多少，一般需要达到100%。 在后续的文档中，我们以decode模块为例，详细说明上述过程。\n*注：目录或文件名称需要合理，能通过其命名知晓其具体含义。\n","categories":"","description":"","excerpt":"添加一个全新的DUT测试用例，需要完成以下三部分内容：\n添加编译脚本： 在scripts目录下编写对应的rtl到python的编 …","ref":"/UnityChipForXiangShan/docs/03_add_test/","tags":"","title":"添加测试"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/docs/04_add_doc/","tags":"","title":"如何提交文档"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/docs/05_report_bug/","tags":"","title":"如何提交Bug"},{"body":"参与本项目 本项目欢迎任何人以Fork + PR的方式参与。\n若测试过程中发现bug，提交流程如下：\n参与者编写测试用例，自测完成后提交PR 如果发现有未pass的测试，分析bug原因，然后在本仓库提交 issue（关联对应PR），并赋予bugc标签 香山开放者确认bug，修改标签为bug 参与者在香山官方仓库上提交issue（附上本仓库的issue确认连接） *请在issue中对bug进行详细描述，方便加速确认\n万众一芯QQ交流群：\n","categories":"","description":"","excerpt":"参与本项目 本项目欢迎任何人以Fork + PR的方式参与。\n若测试过程中发现bug，提交流程如下：\n参与者编写测试用例，自测完成后提交PR …","ref":"/UnityChipForXiangShan/docs/06_join_us/","tags":"","title":"如何参与本项目"},{"body":"# Description Please include a summary of the changes and the related issue. Please also include relevant motivation and context. List any dependencies that are required for this change. Fixes # (issue) ## Type of change Please delete options that are not relevant. - [ ] Bug fix (non-breaking change which fixes an issue) - [ ] New feature (non-breaking change which adds functionality) - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected) - [ ] This change requires a documentation update # How Has This Been Tested? Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration - [ ] Test A - [x] Test B **Test Configuration**: * Firmware version: * Hardware: * Toolchain: * SDK: # Checklist: - [ ] My code follows the style guidelines of this project - [ ] I have performed a self-review of my code - [ ] I have commented my code, particularly in hard-to-understand areas - [ ] I have made corresponding changes to the documentation - [ ] My changes generate no new warnings - [ ] I have added tests that prove my fix is effective or that my feature works - [ ] New and existing unit tests pass locally with my changes - [ ] Any dependent changes have been merged and published in downstream modules 展示效果如下：\nDescription Please include a summary of the changes and the related issue. Please also include relevant motivation and context. List any dependencies that are required for this change.\nFixes # (issue)\nType of change Please delete options that are not relevant.\nBug fix (non-breaking change which fixes an issue) New feature (non-breaking change which adds functionality) Breaking change (fix or feature that would cause existing functionality to not work as expected) This change requires a documentation update How Has This Been Tested? Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\nTest A Test B Test Configuration:\nFirmware version: Hardware: Toolchain: SDK: Checklist: My code follows the style guidelines of this project I have performed a self-review of my code I have commented my code, particularly in hard-to-understand areas I have made corresponding changes to the documentation My changes generate no new warnings I have added tests that prove my fix is effective or that my feature works New and existing unit tests pass locally with my changes Any dependent changes have been merged and published in downstream modules ","categories":"","description":"","excerpt":"# Description Please include a summary of the changes and the related …","ref":"/UnityChipForXiangShan/docs/08_template_pr/","tags":"","title":"模板-PR"},{"body":" 什么是BPU\n","categories":"","description":"","excerpt":" 什么是BPU\n","ref":"/UnityChipForXiangShan/en/docs/bpu/","tags":"","title":"分支预测器（Branch Prediction Unit, BPU）"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/en/docs/bpu/00_ftb/","tags":"","title":"FTB"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/en/docs/bpu/02_ittage/","tags":"","title":"ITTAGE"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/en/docs/bpu/01_tage/","tags":"","title":"TAGE"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/en/docs/","tags":"","title":"XiangShan UT"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/docs/09_template_issue/","tags":"","title":"模板-ISSUE"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/docs/10_template_ut_readme/","tags":"","title":"模板-UT-README"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/docs/97_api/","tags":"","title":"常用API"},{"body":"测试用例管理 如果测试用例和目标RTL版本紧密相关，RTL发生变化，之前的测试用例不一定适用。此外，不同场景下有不同需求，例如验证测试环境时，不运行耗时太长的用例等。因此需要对用例进行管理，让用户能在在特定场景下跳过某些用例。为了实现该目标，我们需要通过pytest.mark.toffee_tags对于每个用例进行tag和version标记。然后在配置文件中设置需要跳过哪些tag或者只运行哪些tag的测试。\n@pytest.mark.toffee_tags(\"my_tag\", \"version1 \u003c version13\") def test_case_1(): ... 例如上述test_case_1被标记上了标签my_tag，支持版本设置为version1到version13。因此可以在配置文件中指定test.skip-tags=[\"my_tag\"]，来表示运行过程中跳过该用例。\npytest.mark.toffee_tags的参数说明如下：\n@pytest.mark.toffee_tags( tag: Optional[list, str] = [] # 用例标签 version: Optional[list, str] = [], # 用例rtl版本需求 skip: callable = None, # 自定义是否调过该用例，skip(tag, version, item): (skip, reason) ) toffee_tags函数的参数tag支持str和list[str]类型。version参数也可以是str和list[str]类型，当为list类型时，进行精确匹配，如果为str则匹配规则如下：\nname-number1 \u003c namer-number2: 表示版本需要在number1和number2之间（包含边界，number表示数字，也可以为小数，eg 1.11） name-number1+：表示number1版本以及以后的版本 name-number1-：表示number1版本以及以前的版本 如果不存在上述情况，且有*或者?表示通配符类型。其他情况为精确匹配。\n预定义标签，可以在comm/constants.py中查看，例如：\n# Predefined tags for test cases TAG_LONG_TIME_RUN = \"LONG_TIME_RUN\" # 运行时间长 TAG_SMOKE = \"SMOKE\" # 冒烟测试 TAG_RARELY_USED = \"RARELY_USED\" # 非常少用 TAG_REGRESSION = \"REGRESSION\" # 回归测试 TAG_PERFORMANCE = \"PERFORMANCE\" # 性能测试 TAG_STABILITY = \"STABILITY\" # 稳定测试 TAG_SECURITY = \"SECURITY\" # 安全测试 TAG_COMPATIBILITY = \"COMPATIBILITY\" # 兼容测试 TAG_OTHER = \"OTHER\" # 其他 TAG_CI = \"CI\" # 集成测试 TAG_DEBUG = \"DEBUG\" # 测试 TAG_DEMO = \"DEMO\" # demo 在默认配置中(config/_default.yaml)，会过滤掉：LONG_TIME_RUN、REGRESSION、RARELY_USED、CI 标记的测试。\n可以通过@pytest.mark.toffee_tags可以为每个用例添加标签，也可以在模块中定义如下变量，实现对整个模块的所有测试用例添加标签。\ntoffee_tags_default_tag = [] # 对应 tag 参数 toffee_tags_default_version = [] # 对应 version 参数 toffee_tags_default_skip = None # 对应 skip 参数 *注：本环境中的版本号会自动过滤掉git标记，例如下载的RTL名称为openxiangshan-kmh-97e37a2237-24092701.tar.gz，则其版本号在本项目中为：openxiangshan-kmh-24092701, 可通过cfg.rtl.version或者comm.get_config().rtl.version获得。\n版本检查 除了可以用标签toffee_tags自动检查版本外，还可以通过get_version_checker主动进行检查。一个单元测试通常由测试环境（Test Env）和测试用例组成（Test Case），Env对RTL引脚和功能进行封装，然后向Case提供稳定API，因此在Env中需要进行RTL版本判断，判断是否需要跳过使用本环境的所有测试用例。例如在Env中：\n... from comm import get_version_checker version_check = get_version_checker(\"openxiangshan-kmh-*\") # 获取RTL版本检查器，同toffee_tags中的veriosn参数 @pytest.fixture() def my_fixture(request): version_check() # 在 fixture 中主动检查 .... yield dut ... 在上述例子中，Env在名称为my_fixture的fixture中主动进行了版本检查。因此，在测试用例每次调用它时都会进行版本检查，如果检查不满足要求，则会跳过该用例的执行。\n仓库目录说明 UnityChipForXiangShan ├── LICENSE # 开源协议 ├── Makefile # Makefile主文件 ├── README.en.md # 英文readme ├── README.zh.md # 中文readme ├── __init__.py # Python模块文件，可以把整个UnityChipForXiangShan当成一个模块进行import ├── pytest.ini # PyTest 配置文件 ├── comm # 公用组件：日志，函数，配置等 ├── configs # 配置文件目录 ├── documents # 文档 ├── dut # dut生成目录 ├── out # log，report等生成目录 ├── requirements.txt # python依赖 ├── rtl # rtl缓存 ├── run.py # 主python入口文件 ├── scripts # dut编译脚本 ├── tools # 公共工具模块 ├── ut_backend # 后端测试用例 ├── ut_frontend # 前端测试用例 ├── ut_mem_block # 访存测试用例 └── ut_misc # 其他测试用例 配置文件说明 默认配置与说明如下：\n# 默认配置文件 # 配置加载顺序: _default.yaml -\u003e 用户指定的 *.yaml -\u003e 命令行参数 eg: log.term-level='debug' # RTL 配置 rtl: # RLT下载地址，从该地址获取所有*.gz.tar文件当成目标RTL base-url: https://\u003cyour_rtl_download_address\u003e # 需要下载的RTL版本 eg: openxiangshan-kmh-97e37a2237-24092701 version: latest # 需要存储RTL的目录，相对于当前配置文件的路径 cache-dir: \"../rtl\" # 测试用例配置（tag和case支持通配符） test: # 跳过标签，所有带有该标签的测试用例都会被跳过 skip-tags: [\"LONG_TIME_RUN\", \"RARELY_USED\", \"REGRESSION\", \"CI\"] # 目标标签，只有带有该标签的测试用例才会被执行（skip-tags会覆盖run-tags） run-tags: [] # 跳过的测试用例，所有带有该名字（或者模块名）的测试用例都会被跳过。 skip-cases: [] # 目标测试用例，只有带有该名字（或者模块名）的测试用例才会被执行（skip-cases会覆盖run-cases）。 run-cases: [] # 跳过异常，所有抛出该异常的测试用例都会被跳过 skip-exceptions: [] # 输出配置 output: # 输出目录，相对于当前配置文件的路径 out-dir: \"../out\" # 测试报告配置 report: # 报告生成目录，相对于output.out-dir report-dir: \"report\" # 报告名称，支持变量替换：%{host} 主机名，%{pid} 进程ID，%{time} 当前时间 report-name: \"%{host}-%{pid}-%{time}/index.html\" # 报告内容 information: # 报告标题 title: \"XiangShan KMH Test Report\" # 报告用户信息 user: name: \"User\" email: \"User@example.email.com\" # 目标行覆盖率 eg: 90 表示 90% line_grate: 99 # 其他需要展示的信息，key为标题，value为内容 meta: Version: \"1.0\" # 日志配置 log: # 根输出级别 root-level: \"debug\" # 终端输出级别 term-level: \"info\" # 文件日志输出级别 file-dir: \"log\" # 文件日志名称，支持变量替换：%{host} 主机名，%{pid} 进程ID，%{time} 当前时间 file-name: \"%{host}-%{pid}-%{time}.log\" # 文件日志输出级别 file-level: \"info\" # 测试结果配置（该数据用于填充documents中的统计图等，原始数据来源于toffee-test生成的report） # 运行完测试后，可通过 `make doc` 查看结果 doc-result: # 是否开测试结果后处理 disable: False # 目标DUT的组织结构配置 dutree: \"%{root}/configs/dutree/xiangshan-kmh.yaml\" # 结果名称，将会保存到输出的report目录 result-name: \"ut_data_progress.json\" # 创建的测试报告的软连接到 hugo report-link: \"%{root}/documents/static/data/reports\" 可在上述配置文件中添加自定义参数，通过cfg = comm.get_config()获取全局配置信息，然后通过cfg.your_key进行访问。cfg信息为只读信息，默认情况下不能进行修改。\n","categories":"","description":"","excerpt":"测试用例管理 如果测试用例和目标RTL版本紧密相关，RTL发生变化，之前的测试用例不一定适用。此外，不同场景下有不同需求，例如验证测试环境 …","ref":"/UnityChipForXiangShan/docs/98_others/","tags":"","title":"其他"},{"body":"为了方便将所有人的贡献集合在一起，需要在编码、环境、文档编写等方面采用相同的“规范”。\n环境要求 python： 在python编码过程中，尽可能的采用标准库，采用兼容Python3大部分版本的通用语法（尽可能的在Python3.6 - Python3.12中通用），不要使用过旧或者过新的语法。 操作系统： 建议Ubuntu 22.04，windows下，建议使用WSL2环境。 hugo 建议版本 0.124.1（版本过旧不支持软连接） 少依赖 尽可能少的使用第三方C++/C库 picker 建议使用wheel安装picker工具和xspcomm库 测试用例 代码风格 建议采用 PEP 8 规范 build脚本 需要按DUT的命名结构进行规范命名，不然无法正确收集验证结果。例如backend.ctrl_block.decodeUT在scripts目录中对应的build文件名称应该为build_ut_backend_ctrl_block_decode.py(以固定前缀build_ut_开始，点.用下划线_进行替换)。在脚本中实现 build(cfg) -\u003e bool 和 line_coverage_files(cfg) -\u003e list[str] 方法。build用于编译DUT为python模块，line_coverage_files方法用于返回需要统计的代码行覆盖率文件。 用例标签 如果用例无法做到版本通用，需要用pytest.mark.toffee_tags标记支持的版本。 用例抽象 编写的测试用例输入不能出现DUT的具体引脚等强耦合内容，只能调用基于DUT之上的函数封装。例如对于加法器 adder，需要把dut的目标功能封装为 dut_wrapper.add(a: int, b: int) -\u003e int, bool，在test_case中仅仅调用 sum, c = add(a, b)进行测试。 覆盖抽象 在编写功能覆盖率时，其检查点函数的输入也不能有DUT引脚。 环境抽象 对于一个验证，通常分为2部分：Test Case 和 Env （用例以外的都统一称为Env，它包含DUT、驱动、监控等），其中Env需要提供对外的功能抽象接口，不能对外呈现出太多细节。 测试说明 在每个DUT的验证环境中，需要通过README.md对该环境进行说明，例如需要对Env提供给Case的接口进行说明，目录结构说明等。 PR编写 标题 简洁明了，能概括PR的主要内容。 详细描述 详细说明PR的目的，修改的内容以及相关背景信息。入解决已有的问题需要给出链接（例如Issue）。 关联问题 在描述中关联相关问题，例如 Fixes #123，以便在合并PR时关闭关联问题。 测试 需要进行测试，并对测试结果进行描述 文档 PR涉及到的文档需要同步修改 分解 当PR涉及到的修改很多时，需要判断是否拆分成多个PR 检查清单 检查编译是否通过、代码风格是否合理、是否测试通过、是否有必要的注释等 模板 以及提供的PR模块请参考链接。 ISSUE编写 要求同上\n","categories":"","description":"","excerpt":"为了方便将所有人的贡献集合在一起，需要在编码、环境、文档编写等方面采用相同的“规范”。\n环境要求 python： 在python编码过程中， …","ref":"/UnityChipForXiangShan/docs/99_constraint/","tags":"","title":"必要规范"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/en/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/en/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/en/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/tags/","tags":"","title":"Tags"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/UnityChipForXiangShan/en/","tags":"","title":"XiangShan UT Docs"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/UnityChipForXiangShan/","tags":"","title":"XiangShan UT Docs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/search/","tags":"","title":"搜索结果"}]