[{"body":" 香山昆明湖架构各个模块验证情况如上图中所示。总统计数据如下：\n总测试用例数（Total Cases）xx; 测试用例通过数（Passed Cases）xx; 测试用例未过数（Failed Cases）xx; 测试用例跳过数（Skipped Cases）xx; 总功能覆盖点数（Function Coverage）xx; 覆盖点已覆盖数（Coverage Functions）xx; 总代码行覆盖率（Line Coverage Rate）xx; 其他内容快捷连接：\nDUT文档与功能 待确认bug列表 已发现bug列表 已修复bug列表 正在进行的任务列表 已完成的任务列表 注：本项目中的统计信息根据commit等数据自动更新，参与者可以提交issue（写明任务内容，预计完成时间等）同步正在进行的任务。\n数据自动更新日期：xx; ","categories":"","description":"","excerpt":" 香山昆明湖架构各个模块验证情况如上图中所示。总统计数据如下：\n总测试用例数（Total Cases）xx; 测试用例通过数（Passed …","ref":"/UnityChipForXiangShan/docs/","tags":"","title":"进度概述"},{"body":" 上图共有75个模块，默认情况下模块为灰色，当模块中的测试用例数大于10时，该模块被完全点亮。目前已经完全点亮的模块为x个，点亮中的模块有y个，待点亮的模块有z个。\n通用处理器模块介绍 高性能处理器是现代计算设备的核心，它们通常由三个主要部分组成：前端、后端和访存系统。这些部分协同工作，以确保处理器能够高效地执行复杂的计算任务。\n前端：前端部分，也被称为指令获取和解码阶段，负责从内存中获取指令并将其解码成处理器可以理解的格式。这一阶段是处理器性能的关键，因为它直接影响到处理器可以多快地开始执行指令。前端通常包括指令缓存、分支预测单元和指令解码器。指令缓存用于存储最近访问过的指令，以减少对主内存的访问次数，从而提高处理速度。分支预测单元则尝试预测程序中的条件分支，以便提前获取和解码后续指令，这样可以减少等待分支结果的时间。\n后端：后端部分，也称为执行阶段，是处理器中负责实际执行指令的地方。这一阶段包括了算术逻辑单元（ALU）、浮点单元（FPU）和各种执行单元。这些单元负责进行算术运算、逻辑运算、数据传输和其他处理器操作。后端的设计通常非常复杂，因为它需要支持多种指令集架构（ISA）并优化性能。为了提高效率，现代处理器通常采用超标量架构，这意味着它们可以同时执行多条指令。\n访存：访存系统是处理器与内存之间交互的桥梁。它包括了数据缓存、内存控制器和高速缓存一致性协议。数据缓存用于存储处理器频繁访问的数据，以减少对主内存的访问次数。内存控制器负责管理处理器与内存之间的数据传输。高速缓存一致性协议确保在多处理器系统中，所有处理器看到的内存状态是一致的。\n高性能处理器的设计需要在这三个部分之间找到平衡，以实现最佳的性能。这通常涉及到复杂的微架构设计，以及对处理器流水线的优化。\n香山昆明湖UT划分 前端：\nBPU RAS XX 后端：\n访存：\n其他：\n","categories":"","description":"","excerpt":" 上图共有75个模块，默认情况下模块为灰色，当模块中的测试用例数大于10时，该模块被完全点亮。目前已经完全点亮的模块为x个，点亮中的模块有y …","ref":"/UnityChipForXiangShan/docs/00_unitychip_for_xiangshan/","tags":"","title":"目标验证单元"},{"body":"基础环境需求 本项目基于Python编程语言进行UT验证，采用的工具和测试框架为toffee和mlvp，环境需求如下：\nLinux操作系统。建议WSL2下安装Ubuntu22.04。 Python。建议Python3.11。 picker。按照快速开始中的提示安装最新版本。 环境配置完成后，clone仓库：\ngit clone https://github.com/XS-MLVP/UnityChipForXiangShan.git cd UnityChipForXiangShan pip3 install -r requirements.txt # 安装python依赖 下载RTL代码： 默认从仓库https://github.com/XS-MLVP/UnityChipXiangShanRTLs中下载。用户也可以自行按照XiangShan文档编译生成RTL。\nmake rtl # 该命下载最新的rtl代码，并解压至rtl目录，并创建软连接 所有RTL下载包请在UnityChipXiangShanRTLs中查看。\n编译DUT 该过程的目的是将RTL通过picker工具打包为Python模块。可以通过make命令指定被打包DUT，也可以一次性打包所有DUT。\n# 调用scripts目录中的build_ut_\u003cname\u003e.py中的build方法，创建待验证的Python版DUT make dut DUTS=\u003cname\u003e # DUTS的值如果有多个，需要用逗号隔开，支持通配符。DUTS默认值为 \"*\"，编译所有DUT # 例如： make dut DUTS=backend_ctrlblock_decode 以make dut DUTS=backend_ctrlblock_decode为例，命令执行完成后，会在dut目录下生成对应的Python包：\ndut/ ├── __init__.py ├── decodestage ├── predecode └── rvcexpander 完成转换后，在测试用例代码中可以import对应的DUT，例如：\nfrom dut.predecode.UT_PreDecode import DUTPreDecode dut = DUTPreDecode() ","categories":"","description":"","excerpt":"基础环境需求 本项目基于Python编程语言进行UT验证，采用的工具和测试框架为toffee和mlvp，环境需求如下：\nLinux操作系统。 …","ref":"/UnityChipForXiangShan/docs/01_verfiy_env/","tags":"","title":"准备验证环境"},{"body":"本项目基于toffee验证框架进行验证（toffee基于Pytest测试框架）。运算测试时，测试框架自动搜索所有以test_*.py文件，并自动执行其中所有以test_开头的测试用例（Test Case）。\n# 执行所有ut_*目录中的test case make test_all # 执行指定目录下的test case make test target=\u003cdir\u003e # 例如执行ut_backend/ctrl_block/decode目录中所有的test case make test target=ut_backend/ctrl_block/decode 运行完成后，在out目录会生成html版本的测试报告，可通过浏览器直接打开查看（VS Code IDE建议安装Open In Default Browser插件）。\n","categories":"","description":"","excerpt":"本项目基于toffee验证框架进行验证（toffee基于Pytest测试框架）。运算测试时，测试框架自动搜索所有以test_*.py文件，并 …","ref":"/UnityChipForXiangShan/docs/02_run_test/","tags":"","title":"运行测试"},{"body":"添加一个全新的DUT测试用例，需要完成以下三部分内容：\n添加编译脚本： 在scripts目录下编写对应的rtl到python的编译python文件（例如build_ut_backend_ctrlblock_decode.py，必须以build_ut_开头）以及对应的目录（目录中包含必要的输入文件，例如rtl的filelist，需要导出的内部信号等）。所添加的python文件需要实现两个函数：build(cfg): bool 和 line_coverage_files(cfg): list[str]。build函数用来编译DUT，line_coverage_files用来指定该DUT需要查看哪些文件的行覆盖率。 添加测试用例： 在对应的ut_*目录中创建对应的python模块（例如ut_backend/ctrl_block/decode）,在该模块中需要包含以test_*.py的测试用例。用例的目录结构请按照昆明湖层级架构图进行添加，以确保收集测试结果时能与层级图对应。测试用例的编写方法请参考Pytest官方文档。 添加依赖模块： 如果有需要的话，可以在tools、comm等模块中添加该DUT测试需要的基础工具。如果该工具不够通用请添加到对应的ut_模块中，且不能以test_前缀进行命名（例如参考模型可以是ut_backend/ctrl_block/decode/reference.py）。 如果是在已有的DUT测试中增加内容，按原有目录结构添加即可。\n*目录或文件名称需要合理，能通过其命名知晓其具体含义。\n如何通过picker和toffee库进行Python芯片验证，请参考：https://open-verify.cc/mlvp/docs\n测试用例管理 测试用例和目标RTL版本紧密相关，如果RTL发生变化，之前的测试用例不一定适用。此外，不同场景下有不通需求，例如开始测试时，不运行耗时太长的用例等。因此需要对用例进行管理，让用户能在在特定场景下跳过某些用例。为了实现该目标，我们需要通过pytest.mark.toffee_tags对于每个用例进行tag和version标记。然后在配置文件中设置需要跳过哪些tag或者只运行哪些tag的测试。\n@pytest.mark.toffee_tags(\"my_tag\", \"version1 \u003c version13\") def test_case_1(): ... 例如上述test_case_1被标记上了标签my_tag，支持版本设置为version1到version13。因此可以在配置文件中指定test.skip-tags=[\"my_tag\"]，来表示运行过程中跳过该用例。预定义标签，请在comm/constants.py中查看。具体配置说明请参考配置文件说明。\npytest.mark.toffee_tags的参数说明如下：\n@pytest.mark.toffee_tags( tag: Optional[list, str] = [] # 用例标签 version: Optional[list, str] = [], # 用例rtl版本需求 skip: callable = None, # 自定义是否调过该用例，skip(tag, version, item): (skip, reason) ) toffee_tags函数的参数tag支持str和list[str]类型。version参数也可以是str和list[str]类型，当为list类型时，进行精确匹配，如果为str则匹配规则如下：\nname-number1 \u003c namer-number2: 表示版本需要在number1和number2之间（包含边界，number表示数字，也可以为小数，eg 1.11） name-number1+：表示number1版本以及以后的版本 name-number1-：表示number1版本以及以前的版本 如果不存在上述情况，且有*或者?表示通配符类型。其他情况为精确匹配。\n可以通过@pytest.mark.toffee_tags可以为每个用例添加标签，也可以在模块中定义如下变量，实现对整个模块的所有测试用例添加标签。\ntoffee_tags_default_tag = [] # 对应 tag 参数 toffee_tags_default_version = [] # 对应 version 参数 toffee_tags_default_skip = None # 对应 skip 参数 仓库目录说明 UnityChipForXiangShan ├── LICENSE # 开源协议 ├── Makefile # Makefile主文件 ├── README.en.md # 英文readme ├── README.zh.md # 中文readme ├── __init__.py # Python模块文件，可以把整个UnityChipForXiangShan当成一个模块进行import ├── comm # 公用组件：日志，函数，配置等 ├── configs # 配置文件目录 ├── documents # 文档 ├── dut # dut生成目录 ├── out # log，report等生成目录 ├── requirements.txt # python依赖 ├── rtl # rtl缓存 ├── run.py # 主python入口文件 ├── scripts # dut编译脚本 ├── tools # 公共工具模块 ├── ut_backend # 后端测试用例 ├── ut_frontend # 前端测试用例 ├── ut_mem_block # 访存测试用例 └── ut_misc # 其他测试用例 配置文件说明 默认配置与说明如下：\n# 默认配置文件 # 配置加载顺序: _default.yaml -\u003e 用户指定的 *.yaml -\u003e 命令行参数 eg: log.term-level='debug' # RTL 配置 rtl: # RLT下载地址，从该地址获取所有*.gz.tar文件当成目标RTL base-url: https://\u003cyour_rtl_download_address\u003e # 需要下载的RTL版本 eg: openxiangshan-kmh-97e37a2237-24092701 version: latest # 需要存储RTL的目录，相对于当前配置文件的路径 cache-dir: \"../rtl\" # 测试用例配置（tag和case支持通配符） test: # 跳过标签，所有带有该标签的测试用例都会被跳过 skip-tags: [\"LONG_TIME_RUN\"] # 目标标签，只有带有该标签的测试用例才会被执行（skip-tags会覆盖run-tags） run-tags: [] # 跳过的测试用例，所有带有该名字（或者模块名）的测试用例都会被跳过。 skip-cases: [] # 目标测试用例，只有带有该名字（或者模块名）的测试用例才会被执行（skip-cases会覆盖run-cases）。 run-cases: [] # 跳过异常，所有抛出该异常的测试用例都会被跳过 skip-exceptions: [] # 输出配置 output: # 输出目录，相对于当前配置文件的路径 out-dir: \"../out\" # 测试报告配置 report: # 报告生成目录，相对于output.out-dir report-dir: \"report\" # 报告名称，支持变量替换：%{host} 主机名，%{pid} 进程ID，%{time} 当前时间 report-name: \"%{host}-%{pid}-%{time}/index.html\" # 报告内容 information: # 报告标题 title: \"XiangShan KMH Test Report\" # 报告用户信息 user: name: \"User\" email: \"User@example.email.com\" # 目标行覆盖率 eg: 90 表示 90% line_grate: 99 # 其他需要展示的信息，key为标题，value为内容 meta: Version: \"1.0\" # 日志配置 log: # 根输出级别 root-level: \"debug\" # 终端输出级别 term-level: \"info\" # 文件日志输出级别 file-dir: \"log\" # 文件日志名称，支持变量替换：%{host} 主机名，%{pid} 进程ID，%{time} 当前时间 file-name: \"%{host}-%{pid}-%{time}.log\" # 文件日志输出级别 file-level: \"info\" # 测试结果配置（该数据用于填充documents中的统计图等，原始数据来源于toffee-test生成的report） # 运行完测试后，可通过 `make doc` 查看结果 doc-result: # 目标DUT的组织结构配置 dutree: \"dutree/xiangshan-kmh.yaml\" # 结果写入路径 save-path: \"../documents/static/data/ut_data_progress.json\" ","categories":"","description":"","excerpt":"添加一个全新的DUT测试用例，需要完成以下三部分内容：\n添加编译脚本： 在scripts目录下编写对应的rtl到python的编 …","ref":"/UnityChipForXiangShan/docs/03_add_test/","tags":"","title":"添加测试"},{"body":"本项目的DUT文档Fork了香山官方文档：https://docs.xiangshan.cc ， 原始仓库地址为：https://github.com/OpenXiangShan/XiangShan-doc。采用的文档格式为makedocs。\n万众一芯Fork后的仓库地址为：\nhttps://github.com/XS-MLVP/XiangShan-doc\n服务地址为：\nhttps://open-verify.cc/xiangshan-docs/\n文档贡献提交 首先For上述万众一芯对应的文档仓库。 修改或者添加贡献内容，建议一次commit包含足量修改或者新内容。 本地检查是否显示正常。 提交PR。在PR中描述清楚主要贡献。 PR审核通过后合并至仓库。 本项目中的PR定期向香山官方仓库提交PR，您的贡献可在相关git中查看。\n","categories":"","description":"","excerpt":"本项目的DUT文档Fork了香山官方文档：https://docs.xiangshan.cc ， 原始仓库地址 …","ref":"/UnityChipForXiangShan/docs/04_add_doc/","tags":"","title":"如何提交文档"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/docs/05_report_bug/","tags":"","title":"如何提交Bug"},{"body":"参与本项目 本项目欢迎任何人以Fork + PR的方式参与。\n若测试过程中发现bug，提交流程如下：\n参与者编写测试用例，自测完成后提交PR 如果发现有未pass的测试，分析bug原因，然后在本仓库提交 issue（关联对应PR），并赋予bugc标签 香山开放者确认bug，修改标签为bug 参与者在香山官方仓库上提交issue（附上本仓库的issue确认连接） *请在issue中对bug进行详细描述，方便加速确认\n万众一芯QQ交流群：\n","categories":"","description":"","excerpt":"参与本项目 本项目欢迎任何人以Fork + PR的方式参与。\n若测试过程中发现bug，提交流程如下：\n参与者编写测试用例，自测完成后提交PR …","ref":"/UnityChipForXiangShan/docs/06_join_us/","tags":"","title":"如何参与本项目"},{"body":" 什么是BPU\n","categories":"","description":"","excerpt":" 什么是BPU\n","ref":"/UnityChipForXiangShan/en/docs/bpu/","tags":"","title":"分支预测器（Branch Prediction Unit, BPU）"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/en/docs/bpu/00_ftb/","tags":"","title":"FTB"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/en/docs/bpu/02_ittage/","tags":"","title":"ITTAGE"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/en/docs/bpu/01_tage/","tags":"","title":"TAGE"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/en/docs/","tags":"","title":"XiangShan UT"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/en/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/en/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/en/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/tags/","tags":"","title":"Tags"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/UnityChipForXiangShan/en/","tags":"","title":"XiangShan UT Docs"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/UnityChipForXiangShan/","tags":"","title":"XiangShan UT Docs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/search/","tags":"","title":"搜索结果"}]