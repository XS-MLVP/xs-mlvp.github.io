<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术细节 on 万众一芯之香山处理器</title>
    <link>https://open-verify.cc/UnityChipForXiangShan/tags/%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/</link>
    <description>Recent content in 技术细节 on 万众一芯之香山处理器</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://open-verify.cc/UnityChipForXiangShan/tags/%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>机器模式Bitmap控制状态寄存器</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/feature/00_bm_csr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/feature/00_bm_csr/</guid>
      <description>&lt;h2 id=&#34;机器模式-bitmap控制状态寄存器&#34;&gt;机器模式 Bitmap控制状态寄存器&lt;/h2&gt;&#xA;&lt;h3 id=&#34;基本信息&#34;&gt;基本信息&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;寄存器名称&lt;/th&gt;&#xA;          &lt;th&gt;MBMC（Machine BitMap Control）&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;特权模式&lt;/td&gt;&#xA;          &lt;td&gt;机器模式&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;寄存器编号&lt;/td&gt;&#xA;          &lt;td&gt;0xBC2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;读写权限&lt;/td&gt;&#xA;          &lt;td&gt;可读可写&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;功能描述&lt;/td&gt;&#xA;          &lt;td&gt;用来控制Shield-bitmap 的使能、同步、Shield-XS Bitmap 基地址等&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;字段描述&#34;&gt;字段描述&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;地址&lt;/th&gt;&#xA;          &lt;th&gt;字段&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;[61:3]&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;strong&gt;BMA (Bitmap Address)&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Shield-XS Bitmap 基地址指定 Bitmap 数据结构在物理内存中的起始地址。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;CMODE (Current Mode)&lt;/td&gt;&#xA;          &lt;td&gt;表明当前执行模式CMODE = 1，表示安全模式CMODE = 0, 表示非安全模式。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;BCLEAR (Bitmap Clear)&lt;/td&gt;&#xA;          &lt;td&gt;Shield-XS Bitmap 同步位BCLEAR = 1，表示刷新所有Shield-bit 副本。&lt;br/&gt;&lt;strong&gt;注：实际使用过程，可结合HFence 指令&lt;/strong&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;0&lt;/td&gt;&#xA;          &lt;td&gt;BME (Bitmap Enable)&lt;/td&gt;&#xA;          &lt;td&gt;Shield-XS 使能位当 BME 置为 1 时，启用 Bitmap 功能。一旦启用，无法关闭，也无法修改 Bitmap 的基地址。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;数据结构&#34;&gt;数据结构&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../feature00_1.png&#34; alt=&#34;Shield-XS Bitmap数据结构&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;shield-xs-bitmap数据结构&#34;&gt;Shield-XS Bitmap数据结构&lt;/h4&gt;&#xA;&lt;p&gt;上图为Shield-XS Bitmap的数据结构，所有的Shield-XS Bitmap权限数据都被存放在一块连续的物理内存区域中。其中基地址是存放Shield-XS Bitmap 数据结构的内存区域的起始物理地址。这个地址可以通过MBMC寄存器中的 BMA字段进行配置。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Shield-Bitmap Cache</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/feature/01_bm_acceleration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/feature/01_bm_acceleration/</guid>
      <description>&lt;h2 id=&#34;shield-bitmap-cache-性能加速&#34;&gt;Shield-Bitmap Cache 性能加速&lt;/h2&gt;&#xA;&lt;p&gt;当访问一个物理地址 (PA) 时，硬件通过查找 Shield-XS Bitmap 数据结构中对应的位置来确定该页是否具有安全属性。&lt;/p&gt;&#xA;&lt;p&gt;查找安全属性的物理地址计算公式如下：&lt;/p&gt;&#xA;&lt;p&gt;即 &lt;strong&gt;Shield-Bitmap 访问地址 = MBMC.BMA + PA[ XLEN-1 : 12 + log&lt;sub&gt;2&lt;/sub&gt;(XLEN/8) ]&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;随后用选出对应该 4KB 页的权限。如果对应比特位为 1 ，则表示该页具有安全属性，只能被安全敏感型负载访问；如果为 0 ，则表示该页不具有安全属性，可以被非安全敏感型负载访问。&lt;/p&gt;&#xA;&lt;h5 id=&#34;shield-xs-直接从内存中读取安全属性&#34;&gt;Shield-XS 直接从内存中读取安全属性&lt;/h5&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../feature01_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;开启Shield-XS 隔离之后，CPU 内部发起的任何一笔访存操作，都需要对标记安全属性的存储空间发起访问，从内存中获取安全属性的延迟过长，使得系统的性能变差。&lt;/p&gt;&#xA;&lt;p&gt;为了Shield-XS 隔离带来的性能损失，利用了程序的局部性，增加了Shield-Bitmap Cache,&#xA;当任何一笔访存需要获取安全属性时，优先从Shield-Bitmap Cache 中读取，只有Shield-Bitmap Cache Miss时，才会发起访存请求。&lt;/p&gt;&#xA;&lt;h5 id=&#34;shield-xs优先从shield-bitmap-cache中读取安全属性&#34;&gt;Shield-XS优先从Shield-BitMap Cache中读取安全属性&lt;/h5&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../feature01_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Shield-XS Bitmap总体设计</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/feature/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/feature/</guid>
      <description>&lt;p&gt;本节介绍bitmap的总体设计，不包括具体的硬件实现，只解释概念，包含：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;机器模式 Bitmap控制状态寄存器&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Shield-Bitmap Cache 加速查表&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;虚拟化两阶段内存地址翻译转换原理&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;加入了Shield-XS安全检查后的内存地址转换流程&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Shield-Bitmap 地址翻译</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/feature/02_bm_mmu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/feature/02_bm_mmu/</guid>
      <description>&lt;h1 id=&#34;虚拟化两阶段地址翻译流程&#34;&gt;虚拟化两阶段地址翻译流程&lt;/h1&gt;&#xA;&lt;p&gt;bitmap和MMU-L2TLB耦合，会在虚拟化两阶段地址走表翻译完成后才进行隔离检查。如果bitmap检查没有通过，就向MMU-L1TLB 发送af。因此对L1TLB以及其上面的模块来说，bitmap是透明的。所以，在进一步介绍前，需要先了解MMU处理虚拟化两阶段地址的流程。&lt;/p&gt;&#xA;&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;两阶段翻译&lt;/strong&gt;：Guest Virtual Address (GVA) → Guest Physical Address (GPA) → Host Physical Address (HPA)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;关键寄存器&lt;/strong&gt; ：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;hgatp&lt;/strong&gt; ：控制G-stage（客户机阶段）页表根地址&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;vsatp&lt;/strong&gt; ：控制VS-stage（虚拟化监督模式阶段）页表根地址&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. VAPT (Virtual Address Protection and Translation)&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt; ：管理客户机虚拟地址（GVA）到客户机物理地址（GPA）的第一阶段翻译（VS-stage）。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;字段名&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;位宽&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;MODE&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;页表模式：&lt;br/&gt; &lt;ul&gt;&lt;li&gt;&lt;code&gt;0&lt;/code&gt;: 关闭翻译&lt;/li&gt; &lt;li&gt;&lt;code&gt;1&lt;/code&gt;: Sv32&lt;/li&gt; &lt;li&gt;&lt;code&gt;8&lt;/code&gt;: Sv39&lt;/li&gt; &lt;li&gt;&lt;code&gt;9&lt;/code&gt;: Sv48&lt;/li&gt; &lt;li&gt;&lt;code&gt;10&lt;/code&gt;: Sv57&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;ASID&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;16&lt;/td&gt;&#xA;          &lt;td&gt;地址空间标识符（Address Space ID），隔离不同客户机的地址空间&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;PPN&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;44&lt;/td&gt;&#xA;          &lt;td&gt;物理页号（Physical Page Number），指向VS-stage页表的根页表地址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;RESERVED&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;8&lt;/td&gt;&#xA;          &lt;td&gt;保留位，必须写0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;G&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;全局映射标志（Global bit），若为1则忽略ASID匹配&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;2. SVAPT (Supervisor Virtual Address Protection and Translation)&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Shield-Bitmap 地址翻译2</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/feature/03_bm_mmu_with_bm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/05_bitmap/feature/03_bm_mmu_with_bm/</guid>
      <description>&lt;h1 id=&#34;加入了shield-xs安全检查后的内存地址转换流程&#34;&gt;加入了Shield-XS安全检查后的内存地址转换流程&lt;/h1&gt;&#xA;&lt;p&gt;如前文所述， bitmap和MMU耦合。现在将介绍增加了bitmap后的MMU地址翻译流程。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../feature03_1.jpeg&#34; alt=&#34; &#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;从 &lt;strong&gt;客户虚拟地址&lt;/strong&gt; 到 &lt;strong&gt;主机物理地址&lt;/strong&gt; 的转换过程，同时涉及 &lt;strong&gt;安全属性检查&lt;/strong&gt; 和 Shield-Bitmap&lt;strong&gt;高速缓存访问&lt;/strong&gt;。以下是详细步骤：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;客户虚拟地址（Guest Virtual Address）&lt;/strong&gt;: 流程开始于计算单元（如CPU）使用客户虚拟地址发出内存访问请求。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;访问一级快表（L1TLB Lookup）&lt;/strong&gt;: 首先查询一级快表（&lt;strong&gt;L1TLB&lt;/strong&gt;），检查是否已缓存该地址的映射。只有经历过bitmap检查才会出现在L1TLB Cache中。因此和L2TLB Cache不同，L1TLB Cache 不会存储bitmap检查位。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;一级快表缓存命中？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;是&lt;/strong&gt; → 直接从L1TLB Cache获取主机物理地址（Host Physical Address）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;否&lt;/strong&gt; → 进入下一级查询（访问二级快表）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;访问二级快表（L2TLB Lookup）&lt;/strong&gt;: 如果一级快表未命中，继续查询二级快表（L2TLB），检查二级快表是否有对应的映射。L2TLB Cache 存储安全允许位（cf）表示 是否经过bitmap 检查。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;二级快表缓存命中？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;cf 和 L2TLB 页表项均命中&lt;/strong&gt; → 获取主机物理地址，并回填一级快表（更新L1TLB）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;L2TLB 页表项命中，bitmap cf 未设&lt;/strong&gt;→ 发送请求至bitmap，进行权限检查。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;否&lt;/strong&gt; → 触发 &lt;strong&gt;页表遍历（Page Table Walker）&lt;/strong&gt;，从内存中加载页表映射关系，随后进行bitmap检查。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;进行页表遍历&lt;/strong&gt;：从内存中加载页表映射关系&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;主机虚拟地址 → 主机物理地址转换&lt;/strong&gt;：通过页表遍历获取主机物理地址（Host Physical Address）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;安全性检查允许访问（Security Check）&lt;/strong&gt;： 对物理地址进行 &lt;strong&gt;安全属性检查&lt;/strong&gt;。如果检查失败，可能触发访问错误（Access Fault）。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
