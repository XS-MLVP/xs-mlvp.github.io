<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>万众一芯之香山处理器 – 进度概述</title>
    <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/</link>
    <description>Recent content in 进度概述 on 万众一芯之香山处理器</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	  <atom:link href="https://xs-mlvp.github.io/UnityChipForXiangShan/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 添加编译脚本</title>
      <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/03_add_test/01_build_script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/03_add_test/01_build_script/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: 构建环境</title>
      <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/03_add_test/02_build_env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/03_add_test/02_build_env/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: 添加测试用例</title>
      <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/03_add_test/03_add_test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/03_add_test/03_add_test/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: 代码覆盖率</title>
      <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/03_add_test/04_cover_line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/03_add_test/04_cover_line/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: 功能覆盖率</title>
      <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/03_add_test/05_cover_func/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/03_add_test/05_cover_func/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: 目标验证单元</title>
      <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/00_unitychip_for_xiangshan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/00_unitychip_for_xiangshan/</guid>
      <description>
        
        
        &lt;script src=&#34;../../js/echarts.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../js/chart_datatree.js&#34;&gt;&lt;/script&gt;
&lt;script&gt;
function update_dut_charts(data_url){
    show_datatree_chart(&#34;datatree_chart&#34;, data_url)
}
&lt;/script&gt;
&lt;br&gt;
&lt;div id=&#34;datatree_chart&#34; style=&#34;width: 90%;height:800px;&#34;&gt;&lt;/div&gt;
&lt;div style=&#34;text-align: center; width: 100%;&#34;&gt;

&lt;label&gt;当前版本：&lt;/label&gt;
&lt;select id=&#34;duturlSelect&#34; onchange=&#34;updateLink()&#34; style=&#34;border: 0px&#34;&gt;
    
    
    
    
    
&lt;/select&gt;
&lt;a id=&#34;dutgoLink&#34; href=&#34;#&#34; target=“_blank“&gt;查看测试报告&lt;/a&gt;

&lt;script&gt;
function updateLink() {
    var select = document.getElementById(&#34;duturlSelect&#34;);
    var goLink = document.getElementById(&#34;dutgoLink&#34;);
    var url = select.options[select.selectedIndex].getAttribute(&#34;data-url&#34;);
    goLink.href = url;
    
    window[&#34;update_dut_charts&#34;](url + &#34;/ut_data_progress.json&#34;);
    
}
document.addEventListener(&#39;DOMContentLoaded&#39;, function() {
    updateLink()
});
&lt;/script&gt;

&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;上图共有&lt;em id=&#34;em_id_report_dut_total&#34;&gt;-&lt;/em&gt;个模块，默认情况下模块为灰色，当模块中的测试用例数大于&lt;em id=&#34;em_id_report_dut_min_light&#34;&gt;-&lt;/em&gt;时，该模块被完全点亮。目前已经完全点亮的模块为&lt;em  id=&#34;em_id_report_dut_lighted&#34;&gt;-&lt;/em&gt;个，待点亮的模块有&lt;em  id=&#34;em_id_report_dut_lighted_no&#34;&gt;-&lt;/em&gt;个。&lt;/p&gt;
&lt;h4 id=&#34;通用处理器模块简介&#34;&gt;通用处理器模块简介&lt;/h4&gt;
&lt;p&gt;高性能处理器是现代计算设备的核心，它们通常由三个主要部分组成：前端、后端和访存系统。这些部分协同工作，以确保处理器能够高效地执行复杂的计算任务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;前端&lt;/strong&gt;：前端部分，也被称为指令获取和解码阶段，负责从内存中获取指令并将其解码成处理器可以理解的格式。这一阶段是处理器性能的关键，因为它直接影响到处理器可以多快地开始执行指令。前端通常包括指令缓存、分支预测单元和指令解码器。指令缓存用于存储最近访问过的指令，以减少对主内存的访问次数，从而提高处理速度。分支预测单元则尝试预测程序中的条件分支，以便提前获取和解码后续指令，这样可以减少等待分支结果的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;后端&lt;/strong&gt;：后端部分，也称为执行阶段，是处理器中负责实际执行指令的地方。这一阶段包括了算术逻辑单元（ALU）、浮点单元（FPU）和各种执行单元。这些单元负责进行算术运算、逻辑运算、数据传输和其他处理器操作。后端的设计通常非常复杂，因为它需要支持多种指令集架构（ISA）并优化性能。为了提高效率，现代处理器通常采用超标量架构，这意味着它们可以同时执行多条指令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;访存&lt;/strong&gt;：访存系统是处理器与内存之间交互的桥梁。它包括了数据缓存、内存控制器和高速缓存一致性协议。数据缓存用于存储处理器频繁访问的数据，以减少对主内存的访问次数。内存控制器负责管理处理器与内存之间的数据传输。高速缓存一致性协议确保在多处理器系统中，所有处理器看到的内存状态是一致的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;高性能处理器的设计需要在这三个部分之间找到平衡，以实现最佳的性能。这通常涉及到复杂的微架构设计，以及对处理器流水线的优化。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 准备验证环境</title>
      <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/01_verfiy_env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/01_verfiy_env/</guid>
      <description>
        
        
        &lt;h4 id=&#34;基础环境需求&#34;&gt;基础环境需求&lt;/h4&gt;
&lt;p&gt;本项目基于&lt;code&gt;Python&lt;/code&gt;编程语言进行UT验证，采用的工具和测试框架为&lt;a href=&#34;https://github.com/XS-MLVP/picker&#34;&gt;picker&lt;/a&gt;和&lt;a href=&#34;https://github.com/XS-MLVP/toffe&#34;&gt;toffe&lt;/a&gt;，环境需求如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Linux操作系统。建议WSL2下安装Ubuntu22.04。&lt;/li&gt;
&lt;li&gt;Python。建议Python3.11。&lt;/li&gt;
&lt;li&gt;picker。按照&lt;a href=&#34;https://open-verify.cc/mlvp/docs/quick-start/installer/&#34;&gt;快速开始&lt;/a&gt;中的提示安装最新版本。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;环境配置完成后，clone仓库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/XS-MLVP/UnityChipForXiangShan.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; UnityChipForXiangShan
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip3 install -r requirements.txt &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 安装python依赖（例如 toffe）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;下载rtl代码&#34;&gt;下载RTL代码：&lt;/h4&gt;
&lt;p&gt;默认从仓库&lt;a href=&#34;https://github.com/XS-MLVP/UnityChipXiangShanRTLs&#34;&gt;https://github.com/XS-MLVP/UnityChipXiangShanRTLs&lt;/a&gt;中下载。用户也可以自行按照XiangShan文档编译生成RTL。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make rtl    &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 该命下载最新的rtl代码，并解压至rtl目录，并创建软连接&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所有RTL下载包请在&lt;a href=&#34;https://github.com/XS-MLVP/UnityChipXiangShanRTLs&#34;&gt;UnityChipXiangShanRTLs&lt;/a&gt;中查看。&lt;/p&gt;
&lt;p&gt;RTL压缩包的命名规范为：&lt;code&gt;名称-微架构-Git标记-日期编号.tar.gz&lt;/code&gt;，例如&lt;code&gt;openxiangshan-kmh-97e37a2237-24092701.tar.gz&lt;/code&gt;。在使用时，仓库代码会过滤掉git标记和后缀，例如通过 cfg.rtl.version 访问到的版本号为：&lt;code&gt;openxiangshan-kmh-24092701&lt;/code&gt;。压缩包内的目录结构为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openxiangshan-kmh-97e37a2237-24092701.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── rtl           &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt;-- *.sv      &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 所有sv文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#4e9a06&#34;&gt;`&lt;/span&gt;-- *.v       &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 所有v文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;编译dut&#34;&gt;编译DUT&lt;/h4&gt;
&lt;p&gt;该过程的目的是将RTL通过picker工具打包为Python模块。可以通过make命令指定被打包DUT，也可以一次性打包所有DUT。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 调用scripts目录中的build_ut_&amp;lt;name&amp;gt;.py中的build方法，创建待验证的Python版DUT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make dut &lt;span style=&#34;color:#000&#34;&gt;DUTS&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&amp;lt;name&amp;gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# DUTS的值如果有多个，需要用逗号隔开，支持通配符。DUTS默认值为 &amp;#34;*&amp;#34;，编译所有DUT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 例如：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make dut &lt;span style=&#34;color:#000&#34;&gt;DUTS&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;backend_ctrl_block_decode
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以&lt;code&gt;make dut DUTS=backend_ctrl_block_decode&lt;/code&gt;为例，命令执行完成后，会在dut目录下生成对应的Python包：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dut/
├── __init__.py
├── DecodeStage
├── Predecode
└── RVCExpander
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完成转换后，在测试用例代码中可以import对应的DUT，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;dut.PreDecode&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DUTPreDecode&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;dut&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DUTPreDecode&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 运行测试</title>
      <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/02_run_test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/02_run_test/</guid>
      <description>
        
        
        &lt;p&gt;本项目基于PyTest测试框架进行验证。运算测试时，PyTest框架自动搜索所有以&lt;code&gt;test_*.py&lt;/code&gt;文件，并自动执行其中所有以&lt;code&gt;test_&lt;/code&gt;开头的测试用例（Test Case）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 执行所有ut_*目录中的test case&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make test_all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 执行指定目录下的test case&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&amp;lt;dir&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 例如执行ut_backend/ctrl_block/decode目录中所有的test case&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;target&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;ut_backend/ctrl_block/decode
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可通过&lt;code&gt;args&lt;/code&gt;参数传递Pytest的运行参数，例如启动x-dist插件的多核功能：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;-n 4&amp;#34;&lt;/span&gt;     &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 启用 4 个进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make &lt;span style=&#34;color:#204a87&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;-n auto&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# 让框架自动选择启用多少个进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行完成后，在out目录会生成html版本的测试报告，可通过浏览器直接打开查看（VS Code IDE建议安装&lt;code&gt;Open In Default Browser&lt;/code&gt;插件）。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 如何提交文档</title>
      <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/04_add_doc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/04_add_doc/</guid>
      <description>
        
        
        &lt;p&gt;本项目的DUT文档Fork了香山官方文档：&lt;a href=&#34;https://docs.xiangshan.cc&#34;&gt;https://docs.xiangshan.cc&lt;/a&gt; ，
原始仓库地址为：&lt;a href=&#34;https://github.com/OpenXiangShan/XiangShan-doc&#34;&gt;https://github.com/OpenXiangShan/XiangShan-doc&lt;/a&gt;。采用的文档格式为&lt;a href=&#34;https://www.mkdocs.org/&#34;&gt;makedocs&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;万众一芯Fork后的仓库地址为：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/XS-MLVP/XiangShan-doc&#34;&gt;https://github.com/XS-MLVP/XiangShan-doc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;服务地址为：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://open-verify.cc/xiangshan-docs/&#34;&gt;https://open-verify.cc/xiangshan-docs/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;文档贡献提交&#34;&gt;文档贡献提交&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;首先For上述万众一芯对应的文档仓库。&lt;/li&gt;
&lt;li&gt;修改或者添加贡献内容，建议一次commit包含足量修改或者新内容。&lt;/li&gt;
&lt;li&gt;本地检查是否显示正常。&lt;/li&gt;
&lt;li&gt;提交PR。在PR中描述清楚主要贡献。&lt;/li&gt;
&lt;li&gt;PR审核通过后合并至仓库。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本项目中的PR定期向香山官方仓库提交PR，您的贡献可在相关git中查看。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 如何提交Bug</title>
      <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/05_report_bug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/05_report_bug/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: 如何参与本项目</title>
      <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/06_join_us/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/06_join_us/</guid>
      <description>
        
        
        &lt;h3 id=&#34;参与本项目&#34;&gt;参与本项目&lt;/h3&gt;
&lt;p&gt;本项目欢迎任何人以&lt;code&gt;Fork + PR&lt;/code&gt;的方式参与。&lt;/p&gt;
&lt;p&gt;若测试过程中发现bug，提交流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参与者编写测试用例，自测完成后提交PR&lt;/li&gt;
&lt;li&gt;如果发现有未pass的测试，分析bug原因，然后在本仓库提交 issue（关联对应PR），并赋予bugc标签&lt;/li&gt;
&lt;li&gt;香山开放者确认bug，修改标签为bug&lt;/li&gt;
&lt;li&gt;参与者在香山&lt;a href=&#34;https://github.com/OpenXiangShan/XiangShan/issues&#34;&gt;官方仓库&lt;/a&gt;上提交issue（附上本仓库的issue确认连接）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;*请在issue中对bug进行详细描述，方便加速确认&lt;/p&gt;
&lt;p&gt;万众一芯QQ交流群：&lt;/p&gt;
&lt;image src=&#34;600480230.jpg&#34; alter=&#34;600480230&#34; width=300px /&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 模板-PR</title>
      <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/08_template_pr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/08_template_pr/</guid>
      <description>
        
        
        &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Description

Please include a summary of the changes and the related issue. 
Please also include relevant motivation and context. 
List any dependencies that are required for this change.

Fixes # (issue)

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. 
Please also list any relevant details for your test configuration

- [ ] Test A
- [x] Test B

**Test Configuration**:
* Firmware version:
* Hardware:
* Toolchain:
* SDK:

# Checklist:

- [ ] My code follows the style guidelines of this project
- [ ] I have performed a self-review of my code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published in downstream modules
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;展示效果如下：&lt;/p&gt;
&lt;h1 id=&#34;description&#34;&gt;Description&lt;/h1&gt;
&lt;p&gt;Please include a summary of the changes and the related issue. Please also include relevant motivation
and context. List any dependencies that are required for this change.&lt;/p&gt;
&lt;p&gt;Fixes # (issue)&lt;/p&gt;
&lt;h2 id=&#34;type-of-change&#34;&gt;Type of change&lt;/h2&gt;
&lt;p&gt;Please delete options that are not relevant.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Bug fix (non-breaking change which fixes an issue)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; New feature (non-breaking change which adds functionality)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Breaking change (fix or feature that would cause existing functionality to not work as expected)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; This change requires a documentation update&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;how-has-this-been-tested&#34;&gt;How Has This Been Tested?&lt;/h1&gt;
&lt;p&gt;Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce.
Please also list any relevant details for your test configuration&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Test A&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Test B&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Test Configuration&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firmware version:&lt;/li&gt;
&lt;li&gt;Hardware:&lt;/li&gt;
&lt;li&gt;Toolchain:&lt;/li&gt;
&lt;li&gt;SDK:&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;checklist&#34;&gt;Checklist:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; My code follows the style guidelines of this project&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; I have performed a self-review of my code&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; I have commented my code, particularly in hard-to-understand areas&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; I have made corresponding changes to the documentation&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; My changes generate no new warnings&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; I have added tests that prove my fix is effective or that my feature works&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; New and existing unit tests pass locally with my changes&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Any dependent changes have been merged and published in downstream modules&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 模板-ISSUE</title>
      <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/09_template_issue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/09_template_issue/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: 模板-UT-ReadMe</title>
      <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/10_template_ut_readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/10_template_ut_readme/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: 基本规范</title>
      <link>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/99_constraint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/UnityChipForXiangShan/docs/99_constraint/</guid>
      <description>
        
        
        &lt;p&gt;为了方便将所有人的贡献集合在一起，需要在编码、环境、文档编写等方面采用相同的“规范”。&lt;/p&gt;
&lt;h3 id=&#34;环境要求&#34;&gt;环境要求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;python：&lt;/strong&gt; 在python编码过程中，尽可能的采用标准库，采用兼容Python3大部分版本的通用语法（尽可能的在Python3.6 - Python3.12中通用），不要使用过旧或者过新的语法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作系统：&lt;/strong&gt; 建议Ubuntu 22.04，windows下，建议使用WSL2环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hugo&lt;/strong&gt; 建议版本 0.124.1（版本过旧不支持软连接）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;少依赖&lt;/strong&gt; 尽可能少的使用第三方C++/C库&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;picker&lt;/strong&gt; 建议使用wheel安装picker工具和xspcomm库&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试用例&#34;&gt;测试用例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代码风格&lt;/strong&gt; 建议采用 &lt;a href=&#34;https://peps.python.org/pep-0008/&#34;&gt;PEP 8 规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;build脚本&lt;/strong&gt; 需要按DUT的命名结构进行规范命名，不然无法正确收集验证结果。例如&lt;code&gt;backend.ctrl_block.decode&lt;/code&gt;UT在scripts目录中对应的build文件名称应该为&lt;code&gt;build_ut_backend_ctrl_block_decode.py&lt;/code&gt;(以固定前缀&lt;code&gt;build_ut_&lt;/code&gt;开始，点&lt;code&gt;.&lt;/code&gt;用下划线&lt;code&gt;_&lt;/code&gt;进行替换)。在脚本中实现 &lt;code&gt;build(cfg) -&amp;gt; bool&lt;/code&gt; 和 &lt;code&gt;line_coverage_files(cfg) -&amp;gt; list[str]&lt;/code&gt; 方法。&lt;code&gt;build&lt;/code&gt;用于编译DUT为&lt;code&gt;python&lt;/code&gt;模块，&lt;code&gt;line_coverage_files&lt;/code&gt;方法用于返回需要统计的代码行覆盖率文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用例标签&lt;/strong&gt; 如果用例无法做到版本通用，需要用&lt;code&gt;pytest.mark.toffee_tags&lt;/code&gt;标记支持的版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用例抽象&lt;/strong&gt; 编写的测试用例输入不能出现DUT的具体引脚等强耦合内容，只能调用基于DUT之上的函数封装。例如对于加法器 adder，需要把dut的目标功能封装为 &lt;code&gt;dut_wrapper.add(a: int, b: int) -&amp;gt; int, bool&lt;/code&gt;，在test_case中仅仅调用 &lt;code&gt;sum, c = add(a, b)&lt;/code&gt;进行测试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;覆盖抽象&lt;/strong&gt; 在编写功能覆盖率时，其检查点函数的输入也不能有DUT引脚。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;环境抽象&lt;/strong&gt; 对于一个验证，通常分为2部分：Test Case 和 Env （用例以外的都统一称为Env，它包含DUT、驱动、监控等），其中Env需要提供对外的功能抽象接口，不能对外呈现出太多细节。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试说明&lt;/strong&gt; 在每个DUT的验证环境中，需要通过&lt;code&gt;README.md&lt;/code&gt;对该环境进行说明，例如需要对Env提供给Case的接口进行说明，目录结构说明等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pr编写&#34;&gt;PR编写&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;标题&lt;/strong&gt; 简洁明了，能概括PR的主要内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;详细描述&lt;/strong&gt; 详细说明PR的目的，修改的内容以及相关背景信息。入解决已有的问题需要给出链接（例如Issue）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关联问题&lt;/strong&gt; 在描述中关联相关问题，例如 &lt;code&gt;Fixes #123&lt;/code&gt;，以便在合并PR时关闭关联问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试&lt;/strong&gt; 需要进行测试，并对测试结果进行描述&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文档&lt;/strong&gt; PR涉及到的文档需要同步修改&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分解&lt;/strong&gt; 当PR涉及到的修改很多时，需要判断是否拆分成多个PR&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查清单&lt;/strong&gt; 检查编译是否通过、代码风格是否合理、是否测试通过、是否有必要的注释等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模板&lt;/strong&gt; 以及提供的PR模块请&lt;a href=&#34;08_pr_template/&#34;&gt;参考链接&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;issue编写&#34;&gt;ISSUE编写&lt;/h3&gt;
&lt;p&gt;要求同上&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
