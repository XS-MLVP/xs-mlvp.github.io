<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shield-XS Bitmap 硬件设计 on 万众一芯之香山处理器</title>
    <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/02_bitmap/modules/</link>
    <description>Recent content in Shield-XS Bitmap 硬件设计 on 万众一芯之香山处理器</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/02_bitmap/modules/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bitmap Checker</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/02_bitmap/modules/00_bm_checker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/02_bitmap/modules/00_bm_checker/</guid>
      <description>&lt;h1 id=&#34;bitmap-checker硬件模块&#34;&gt;Bitmap Checker硬件模块&lt;/h1&gt;&#xA;&lt;h2 id=&#34;bitmap-checker简介&#34;&gt;Bitmap checker简介&lt;/h2&gt;&#xA;&lt;p&gt;Bitmap checker 的作用是将来自外部（ptw/lptw/hptw）的请求发送至cache，并根据是否命中进行内存访问查权限。最后将cache返回的或者内存访问得到的权限发送回请求源。&lt;/p&gt;&#xA;&lt;p&gt;此外，bitmap（walker）支持non blocking 特性，每一个请求来源都有FSM负责录入请求进行处理。但是一次只能有一个fsm进行cache访问。&lt;/p&gt;&#xA;&lt;h2 id=&#34;状态机描述&#34;&gt;状态机描述&lt;/h2&gt;&#xA;&lt;p&gt;为了保持non blocking，有8个独立的状态机（entries）并行运行。每个 entry 维护独立的状态和数据处理。当有请求进入时，从下到上依次将fsm填满，由于总共就8个请求来源，因此不会出现无空闲fsm可用的情况。&lt;/p&gt;&#xA;&lt;p&gt;当entry的PA重复时，仅有一个fsm会进行一次查cache 或者访问memory，其余重复fsm项的状态会被部分跳过。重复表示PA的tag位[47:18] 一致。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;PA&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;段&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;tag&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Bitmap offset&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;Page offset&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;位&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;[47:18]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;[17:12]&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;[11:0]&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;bitmap-checker-模块状态机&#34;&gt;Bitmap checker 模块状态机&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../modul00_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;状态机状态&#34;&gt;状态机状态&lt;/h4&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;状态&lt;/th&gt;&#xA;          &lt;th&gt;说明&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;state_idle&lt;/td&gt;&#xA;          &lt;td&gt;标明该fsm状态为空，可以录入新请求&lt;br/&gt;当io.req.fire时，切换到新状态&lt;br/&gt;转换条件：&lt;br/&gt;&lt;ul&gt;&lt;li&gt;io.req.fire → state_addr_check (无重复请求)&lt;/li&gt;&lt;li&gt;io.req.fire &amp;amp;&amp;amp; to_wait → state_mem_waiting (检测到重复请求在等待) 同时写入重复项的id到fsm&lt;/li&gt;&lt;li&gt;io.req.fire &amp;amp;&amp;amp; to_mem_out → state_mem_out (重复请求已完成) 同时写入重复项的id到fsm&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;state_addr_check&lt;/td&gt;&#xA;          &lt;td&gt;进行pmp检查&lt;br/&gt;转换条件：&lt;br/&gt;&lt;ul&gt;&lt;li&gt;accessFault=true → state_mem_out (检查失败)&lt;/li&gt;&lt;li&gt;accessFault=false → state_cache_req (检查通过)&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;state_cache_req&lt;/td&gt;&#xA;          &lt;td&gt;将cachereq拉高，fire后→ state_cache_resp&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;state_cache_resp&lt;/td&gt;&#xA;          &lt;td&gt;Cache resp fire后更新：&lt;ul&gt;&lt;li&gt;hit=true → state_mem_out (缓存命中)&lt;/li&gt;&lt;li&gt;hit=false &amp;amp;&amp;amp; cm_to_mem_out → state_mem_out (重复请求已完成) 同时写入重复项的id到fsm&lt;/li&gt;&lt;li&gt;hit=false &amp;amp;&amp;amp; cm_to_wait → state_mem_waiting (检测到重复请求) 同时写入重复项的id到fsm&lt;/li&gt;&lt;li&gt;hit=false → state_mem_req (无重复请求) &lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;state_mem_req&lt;/td&gt;&#xA;          &lt;td&gt;拉高valid 并等待，mem req fire时，将所有重复项目的id跟新为本fsm id，并将所有重复和本机 state 设置为mem wait&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;state_mem_waiting&lt;/td&gt;&#xA;          &lt;td&gt;Fire时→state_mem_out，并将所有的符合id项目内值全部跟新为mem返回值&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;state_mem_out&lt;/td&gt;&#xA;          &lt;td&gt;拉高 resp valid ，fire时→ state_idle&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;接口信号&#34;&gt;接口信号&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;信号&lt;/th&gt;&#xA;          &lt;th&gt;位宽&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Io.mem&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;内存访问相关信号&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.mem.resp.bits.id&lt;/td&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;memory 响应返回的 ID(需为bitmap编号)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.mem.resp.bits.value&lt;/td&gt;&#xA;          &lt;td&gt;512&lt;/td&gt;&#xA;          &lt;td&gt;memory 返回的 bitmap 数据块&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.mem.req_mask&lt;/td&gt;&#xA;          &lt;td&gt;20&lt;/td&gt;&#xA;          &lt;td&gt;Memory 请求屏蔽位&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.mem.req.bits.addr&lt;/td&gt;&#xA;          &lt;td&gt;56&lt;/td&gt;&#xA;          &lt;td&gt;memory 请求的 bitmap 数据地址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.mem.req.bits.id&lt;/td&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;memory 请求的编号(恒定为bitmap编号)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.mem.req.bits.hptw_bypassed&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;（和&lt;/font&gt;bitmap &lt;/font&gt;模块内部无关）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Io.Req&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;请求信号&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.req.bits.bmppn&lt;/td&gt;&#xA;          &lt;td&gt;27&lt;/td&gt;&#xA;          &lt;td&gt;被检查的物理页号 PPN&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.req.bits.id&lt;/td&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;请求编号，用于标识请求来源（和&lt;/font&gt;bitmap &lt;/font&gt;模块内部无关）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.req.bits.vpn&lt;/td&gt;&#xA;          &lt;td&gt;27&lt;/td&gt;&#xA;          &lt;td&gt;对应虚拟页号VPN&lt;/font&gt;，用于唤醒&lt;/font&gt;pagecache&lt;/font&gt;（和&lt;/font&gt;bitmap &lt;/font&gt;模块内部无关）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.req.bits.level&lt;/td&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;所查询页表的级别信息（&lt;/font&gt;0/1/2&lt;/font&gt;），用于唤醒&lt;/font&gt;pagecache&lt;/font&gt;（和&lt;/font&gt;bitmap &lt;/font&gt;模块内部无关）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.req.bits.way_info&lt;/td&gt;&#xA;          &lt;td&gt;8&lt;/td&gt;&#xA;          &lt;td&gt;TLB way &lt;/font&gt;编号用于唤醒&lt;/font&gt;pagecache&lt;/font&gt;（和&lt;/font&gt;bitmap &lt;/font&gt;模块内部无关）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.req.bits.hptw_bypassed&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;用于唤醒&lt;/font&gt;pagecache&lt;/font&gt;（和&lt;/font&gt;bitmap &lt;/font&gt;模块内部无关）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Io.resp&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;返回结果&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.resp.bits.cf&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;检查权限是否允许访问&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.resp.bits.cfs&lt;/td&gt;&#xA;          &lt;td&gt;8&lt;/td&gt;&#xA;          &lt;td&gt;相邻8个（3bit地址空间）的权限&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.resp.bits.id&lt;/td&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;响应对应的请求id&lt;/font&gt;（和&lt;/font&gt;bitmap &lt;/font&gt;模块内部无关）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Io.pmp&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Pmp&lt;/font&gt;查&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.pmp.req.bits.addr&lt;/td&gt;&#xA;          &lt;td&gt;56&lt;/td&gt;&#xA;          &lt;td&gt;进行PMP检查的物理地址&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.pmp.req.bits.cmd&lt;/td&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;读/写权限请求类型（恒定为读）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.pmp.req.bits.size&lt;/td&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;请求访问大小（恒定）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.pmp.resp.ld&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;PMP Load 权限检查结果&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.pmp.resp.mmio&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;PMP MMIO 检查结果&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Io.wakeup&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Resp&lt;/font&gt;时且非&lt;/font&gt;hptw bypassed &lt;/font&gt;进行重填pagecache&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.wakeup.bits.setIndex&lt;/td&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;唤醒用的setIndex&lt;/font&gt;（和&lt;/font&gt;bitmap &lt;/font&gt;模块内部无关）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.wakeup.bits.tag&lt;/td&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;唤醒tag&lt;/font&gt;（&lt;/font&gt;VPN&lt;/font&gt;高位）（和&lt;/font&gt;bitmap &lt;/font&gt;模块内部无关）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.wakeup.bits.isSp&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;是否为&lt;/font&gt;superpage&lt;/font&gt;（和&lt;/font&gt;bitmap &lt;/font&gt;模块内部无关）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.wakeup.bits.way_info&lt;/td&gt;&#xA;          &lt;td&gt;8&lt;/td&gt;&#xA;          &lt;td&gt;TLB&lt;/font&gt;对应的way &lt;/font&gt;信息（和&lt;/font&gt;bitmap &lt;/font&gt;模块内部无关）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.wakeup.bits.pte_index&lt;/td&gt;&#xA;          &lt;td&gt;6&lt;/td&gt;&#xA;          &lt;td&gt;PTE &lt;/font&gt;在段页表中的索引位置（和&lt;/font&gt;bitmap &lt;/font&gt;模块内部无关）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.wakeup.bits.check_success&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;是否 bitmap 检查通过&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Refill&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io.refill.bits.data&lt;/td&gt;&#xA;          &lt;td&gt;64&lt;/td&gt;&#xA;          &lt;td&gt;要写入cache &lt;/font&gt;的bitmap &lt;/font&gt;数据&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;CSR&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_sfence_valid&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;SFENCE &lt;/font&gt;操作有效信号（为高刷新&lt;/font&gt;fsm&lt;/font&gt;）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_csr_satp_changed&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;SATP &lt;/font&gt;寄存器变更标志（为高刷新&lt;/font&gt;fsm&lt;/font&gt;）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_csr_vsatp_changed&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;VSATP &lt;/font&gt;寄存器变更标志（为高刷新&lt;/font&gt;fsm&lt;/font&gt;）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_csr_hgatp_changed&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;HGATP &lt;/font&gt;寄存器变更标志（为高刷新&lt;/font&gt;fsm&lt;/font&gt;）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_csr_mbmc_BMA&lt;/td&gt;&#xA;          &lt;td&gt;58&lt;/td&gt;&#xA;          &lt;td&gt;Bitmap &lt;/font&gt;基址寄存器值&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>Bitmap Cache</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/02_bitmap/modules/01_bm_cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/02_bitmap/modules/01_bm_cache/</guid>
      <description>&lt;h3 id=&#34;bitmap-cache硬件模块&#34;&gt;Bitmap Cache硬件模块&lt;/h3&gt;&#xA;&lt;h4 id=&#34;bitmap-cache简介&#34;&gt;Bitmap cache简介&lt;/h4&gt;&#xA;&lt;p&gt;Bitmap cache用于缓存 bitmap 数据块以减少 memory 访问延迟，存储最近访问的 bitmap 数据，&lt;strong&gt;共16个entry。每个 entry 存储一个 64-bit 数据段&lt;/strong&gt;。使用plru替换策略。&lt;/p&gt;&#xA;&lt;h4 id=&#34;bitmap模块结构&#34;&gt;Bitmap模块结构&lt;/h4&gt;&#xA;&lt;p&gt;Cache 一回合出结果，不需要pipeline。此外，refill也只需要一回合。Refill使用plru进行充填。&lt;/p&gt;&#xA;&lt;h4 id=&#34;bitmap-cache接口&#34;&gt;Bitmap cache接口&lt;/h4&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;io_req&lt;/th&gt;&#xA;          &lt;th&gt;位宽&lt;/th&gt;&#xA;          &lt;th&gt;Bm 发起请求&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_req_bits_tag&lt;/td&gt;&#xA;          &lt;td&gt;36&lt;/td&gt;&#xA;          &lt;td&gt;Tag for cache lookup ([35:6] = tag)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_req_bits_order&lt;/td&gt;&#xA;          &lt;td&gt;8&lt;/td&gt;&#xA;          &lt;td&gt;发起请求的Fsm编号&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Io resp&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;返回bm请求&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_resp_bits_hit&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;是否hit cache&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_resp_bits_order&lt;/td&gt;&#xA;          &lt;td&gt;8&lt;/td&gt;&#xA;          &lt;td&gt;发起请求的Fsm编号&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_resp_bits_cfs&lt;/td&gt;&#xA;          &lt;td&gt;8&lt;/td&gt;&#xA;          &lt;td&gt;相邻8个的权限&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Io refill&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Refill接口，来自bm，bm resp valid时发起重填&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_refill_bits_tag&lt;/td&gt;&#xA;          &lt;td&gt;36&lt;/td&gt;&#xA;          &lt;td&gt;Tag for cache refill ([35:6] = tag)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_refill_bits_data&lt;/td&gt;&#xA;          &lt;td&gt;64&lt;/td&gt;&#xA;          &lt;td&gt;Data to refill into cache&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_resp_bits_hit&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;是否hit cache&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;CSR&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_sfence_valid&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;同步刷新请求有效（触发缓存刷新）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_csr_satp_changed&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;SATP CSR 变更标志（触发缓存刷新）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_csr_vsatp_changed&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;VSATP CSR 变更标志（触发缓存刷新）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_csr_hgatp_changed&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;HGATP CSR 变更标志（触发缓存刷新）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_csr_mbmc_BCLEAR&lt;/td&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;缓存清除信号（触发缓存刷新）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>Bitmap 与L2TLB交互</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/02_bitmap/modules/02_bm_l2tlb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/02_bitmap/modules/02_bm_l2tlb/</guid>
      <description>&lt;h3 id=&#34;bitmap-与l2tlb内的交互&#34;&gt;Bitmap 与L2TLB内的交互&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../module02_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;page-cache-与-bitmap-检测机制的交互&#34;&gt;Page Cache 与 Bitmap 检测机制的交互&lt;/h4&gt;&#xA;&lt;h5 id=&#34;新增信号&#34;&gt;新增信号&lt;/h5&gt;&#xA;&lt;p&gt;发向 PTW 的 bitmap check 信号：用于触发 PTW 进行 bitmap 检测。&lt;/p&gt;&#xA;&lt;p&gt;发向 HPTW 的 bitmap check 信号：用于触发 HPTW 进行 bitmap 检测。&lt;/p&gt;&#xA;&lt;p&gt;接收来自 bitmap 的重填信号（bitmap wakeup）：用于接收 bitmap 检测结果并更新缓存。&lt;/p&gt;&#xA;&lt;h5 id=&#34;bitmap-wakeup接口-refill-bitmap&#34;&gt;Bitmap Wakeup接口: refill bitmap&lt;/h5&gt;&#xA;&lt;p&gt;功能描述：当接收到 wake up valid 信号时，将 check_success 结果写入对应的 sp 或 l0 的 cache bitmap reg 中。&lt;/p&gt;&#xA;&lt;p&gt;工作原理：cache bitmap reg 用于标识缓存项是否通过 bitmap 检测。值为 1 表示已通过检测；值为 0 表示检测未通过或尚未检测。如果发现 PtwCache 命中的表项未通过检测，则触发 Bitmap 检测流程，并通过 bitmap wakeup 更新缓存项。此外，在走表过程中所有bitmap返回的项都会回填page cache。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bitmap接口时序图</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/02_bitmap/modules/03_bm_timing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/02_bitmap/modules/03_bm_timing/</guid>
      <description>&lt;h2 id=&#34;bitmap接口时序图&#34;&gt;Bitmap接口时序图&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../module03_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;信号&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_req_ready&lt;/td&gt;&#xA;          &lt;td&gt;8个fsm中有至少一个idle时为高，可以视为常态高&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_req_valid&lt;/td&gt;&#xA;          &lt;td&gt;新请求进入时高，平时为低&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_resp_ready&lt;/td&gt;&#xA;          &lt;td&gt;当请求源（ptw hptw llptw）发送请求，等待返回时会拉高，平时无请求时为低&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_resp_valid&lt;/td&gt;&#xA;          &lt;td&gt;当返回查询结果时拉高，平时为低&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_mem_req_ready&lt;/td&gt;&#xA;          &lt;td&gt;有其它mem请求时（ptw llptw hptw）为低，平时为高&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_mem_req_valid&lt;/td&gt;&#xA;          &lt;td&gt;cache miss时发起mem请求拉高，平时为低&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_mem_resp_valid&lt;/td&gt;&#xA;          &lt;td&gt;mem 返回结果拉高，平时为低&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_cache_req_valid&lt;/td&gt;&#xA;          &lt;td&gt;bimap fsm 发起 cache 请求拉高，平时为低&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_cache_req_ready&lt;/td&gt;&#xA;          &lt;td&gt;常态高&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_cache_resp_valid&lt;/td&gt;&#xA;          &lt;td&gt;io_cache_req_valid下一clk 拉高平时低&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;io_cache_resp_ready&lt;/td&gt;&#xA;          &lt;td&gt;io_cache_req_valid 下一clk 拉高平时低&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>开销评估</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/02_bitmap/modules/04_bm_cost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/02_bitmap/modules/04_bm_cost/</guid>
      <description>&lt;h2 id=&#34;开销评估&#34;&gt;开销评估&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;1. 基本配置&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;strong&gt;类别&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;strong&gt;配置项&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;&lt;strong&gt;参数**&lt;/strong&gt;/*&lt;strong&gt;*设置&lt;/strong&gt;&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Shield-Bit 配置&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;有效 Shield-XS 隔离模型&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;设置 Shield-Bitmap&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;_&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Shield-Bitmap缓存大小&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;128 × 8 Bytes&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;KunminghuV2 配置&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;TileLink Prototype&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;-&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;缓存层级配置&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;L1 指令/数据缓存大小&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;64KB&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;L1 指令/数据 TLB&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;48-全关联（Full Association）&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;L2 缓存大小&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;1MB&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;L3 缓存大小&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;16MB&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;strong&gt;2. SPEC2006 性能数据&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;SPECInt2006 Simpoint est.@&lt;strong&gt;3GHz&lt;/strong&gt; &lt;strong&gt;GEOMEAN 44.62 &lt;strong&gt;-&amp;gt;&lt;/strong&gt; 44.29 (0.72% )&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../module04_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;图 9.1 SPEC2006 性能开销&lt;/p&gt;&#xA;&lt;p&gt;性能开销与DTLB Miss-rate 呈正比。有效的减少 DTLB 和 Shield-bitmap Cache 的miss-rate, 可以进一步提升性能。例如将缓存从 16 项扩展到 128 项，可使 GemsFDTD 的性能开销从 6.51% 降低至 2.36%。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
