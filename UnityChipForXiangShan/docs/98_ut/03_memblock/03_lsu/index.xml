<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LSU on 万众一芯之香山处理器</title>
    <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/03_lsu/</link>
    <description>Recent content in LSU on 万众一芯之香山处理器</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/03_lsu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>StoreUnit</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/03_lsu/01_storeunit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/03_lsu/01_storeunit/</guid>
      <description>&lt;h4 id=&#34;本文档参考香山storeunit设计文档写成&#34;&gt;本文档参考&lt;a href=&#34;https://github.com/OpenXiangShan/XiangShan-Design-Doc/blob/master/docs/zh/memblock/LSU/index.md&#34;&gt;香山StoreUnit设计文档&lt;/a&gt;写成&lt;/h4&gt;&#xA;&lt;p&gt;请注意，本文档撰写的测试点仅供参考，如能补充更多测试点，最终获得的奖励可能更高！&lt;/p&gt;&#xA;&lt;h1 id=&#34;storeunit说明文档&#34;&gt;StoreUnit说明文档&lt;/h1&gt;&#xA;&lt;h2 id=&#34;文档概述&#34;&gt;文档概述&lt;/h2&gt;&#xA;&lt;p&gt;本文档描述了StoreUnit的结构与功能，并根据功能给出测试点参考，方便测试的参与者理解测试需求，编写相关测试用例。&#xA;StoreUnit 是存储指令执行单元 ，由多个协同工作的子模块组成，包括其五级流水线处理流程、支持的三种类型store指令（标量、向量、非对齐）、接口设计与信号交互逻辑。该模块用于执行Store类指令的地址生成与处理，是Load/Store流水线中的关键组成部分。&lt;/p&gt;&#xA;&lt;h2 id=&#34;术语说明&#34;&gt;术语说明&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;名称&lt;/th&gt;&#xA;          &lt;th&gt;定义&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;TLB（Translation Lookaside Buffer）&lt;/td&gt;&#xA;          &lt;td&gt;地址转换旁路缓冲器，用于虚拟地址到物理地址的快速转换&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;PMP（Physical Memory Protection）&lt;/td&gt;&#xA;          &lt;td&gt;物理内存访问权限检查机制&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;RAW（Read After Write）违例&lt;/td&gt;&#xA;          &lt;td&gt;写后读违例，表示一个load指令读取尚未写入的store数据&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;MMIO（Memory-Mapped Input/Output）&lt;/td&gt;&#xA;          &lt;td&gt;内存映射IO&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;存储指令执行&#34;&gt;存储指令执行&lt;/h3&gt;&#xA;&lt;p&gt;内存单元里包含2条Store地址流水线与2条Store数据流水线。各流水线独立接收并执行对应发射队列派发的指令。&lt;/p&gt;&#xA;&lt;h4 id=&#34;存储地址流水线&#34;&gt;存储地址流水线&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;scalar.png&#34; alt=&#34;Scalar&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;由4级结构组成：&lt;/p&gt;&#xA;&lt;p&gt;​Store地址流水线（4级结构）​​&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;stage 0:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;计算VA地址&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;非对齐 &amp;gt; 向量 &amp;gt; 标量请求的优先级仲裁&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;地址非对齐检查更新到uop.exceptionVec&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;对地址的16字节边界检测&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;发出DTLB读请求到tlb&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;更新指令的掩码信息到s0_mask_out发送到StoreQueue&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;判断是否为数据宽度为128bits的store指令。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;stage 1:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;接收TLB地址转换响应，TLB若缺失则重试&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;查询LoadQueueRAW以进行违规检查&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;与加载单元s1和s2阶段的Load指令进行RAW冒险检测&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;如果DTLB hit，将store issue信息发送到后端&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;stage 2:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;mmio/PMP检查、检查原子操作权限&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;更新storeQueue中标记为地址就绪状态&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;更新DTLB结果通过feedback_slow更新到后端&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;stage 3:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;标量store发起写回，通过stout发送给后端&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;StoreQueue条目释放与状态清理&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;存储数据流水线&#34;&gt;存储数据流水线&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;从发射队列（issue queue）接收数据&lt;/li&gt;&#xA;&lt;li&gt;将数据写回StoreQueue&lt;/li&gt;&#xA;&lt;li&gt;标记发射队列接收的数据为就绪状态&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;向量存储指令执行&#34;&gt;向量存储指令执行&lt;/h3&gt;&#xA;&lt;p&gt;对于除 SEG指令外的向量内存访问指令，VSSplit 负责接收向量内存访问指令发射队列发送的微操作（uop），并将该微操作拆分为多个元素。随后VSSplit 将这些元素发送至StoreUnit 执行，执行流程与标量内存访问指令相同。执行完成后，元素会被写回至 VSMerge，其中 Merge 模块会将这些元素收集并组合成微操作，最终写回向量寄存器文件。&#xA;SEG 指令则由独立的 VSegmentUnit 模块处理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>微报告模板</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/03_lsu/00_template/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/03_memblock/03_lsu/00_template/</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;SCALAR_DISPATCH 测试点&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;功能描述&#34;&gt;功能描述&lt;/h3&gt;&#xA;&lt;p&gt;本测试点验证标量Store指令（如sb、sh、sw、sd）从发射队列派发到StoreUnit时，是否正确分配一个StoreQueue（SQ）条目。测试确保指令派发机制正常工作，包括SQ索引分配、状态标记和信号交互。这是StoreUnit最基本的功能，涉及指令派发流水线的初始阶段。&lt;/p&gt;&#xA;&lt;h3 id=&#34;输入参数&#34;&gt;输入参数&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;虚拟地址（vaddr）​​：0x1000&lt;/li&gt;&#xA;&lt;li&gt;存储数据（data）​​：0x12345678&lt;/li&gt;&#xA;&lt;li&gt;存储大小（size）​​：1、2、4、8字节&lt;/li&gt;&#xA;&lt;li&gt;首次派发标志（is_first_issue）​​：true或false&lt;/li&gt;&#xA;&lt;li&gt;指令类型​：通过fuOpType设置&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;输出验证&#34;&gt;输出验证&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;派发成功信号​：io_stin_ready和io_stin_valid同时为高，表示指令被接收。&lt;/li&gt;&#xA;&lt;li&gt;SQ条目分配​：io_lsq_valid为高，且io_lsq_bits_updateAddrValid为高，表示SQ地址更新有效。&lt;/li&gt;&#xA;&lt;li&gt;SQ索引范围​：io_lsq_bits_uop_sqIdx_value在0到SQ_SIZE-1之间（如0-63）。&lt;/li&gt;&#xA;&lt;li&gt;状态标记​：SQ条目中的valid位被设置为1，robIdx正确记录。&lt;/li&gt;&#xA;&lt;li&gt;后续准备​：io_stin_ready保持为高，表示可接收新指令。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;边界条件分析&#34;&gt;边界条件分析&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;不同存储大小​：测试了1字节（sb）、2字节（sh）、4字节（sw）和8字节（sd）指令，确保所有大小都能正确分配SQ条目。&lt;/li&gt;&#xA;&lt;li&gt;地址对齐​：测试对齐地址（如0x1000）和不对齐地址（如0x1001），验证地址计算不影响派发。&lt;/li&gt;&#xA;&lt;li&gt;首次派发与重发​：设置is_first_issue为true和false，模拟首次派发和重发场景，确保重发机制不干扰SQ分配。&lt;/li&gt;&#xA;&lt;li&gt;​SQ容量边界​：通过多次派发指令，测试SQ接近满时的行为，确保索引不溢出。&lt;/li&gt;&#xA;&lt;li&gt;信号时序​：验证在时钟上升沿信号稳定，避免时序问题导致派发失败。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;结果总结&#34;&gt;结果总结&lt;/h3&gt;&#xA;&lt;p&gt;测试通过，所有验证点均符合预期。标量Store指令派发功能正常，SQ条目分配正确，边界条件处理稳健。覆盖了标量存储的所有大小类型和常见地址场景，为后续流水线阶段提供了可靠基础。无异常或错误发生，测试完整性高。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
