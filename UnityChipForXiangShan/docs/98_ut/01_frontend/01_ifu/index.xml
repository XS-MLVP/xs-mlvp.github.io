<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IFU on 万众一芯之香山处理器</title>
    <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/</link>
    <description>Recent content in IFU on 万众一芯之香山处理器</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>F3PreDecoder</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/02_f3predecoder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/02_f3predecoder/</guid>
      <description>&lt;div class=&#34;ifu-ctx&#34;&gt;&#xA;&lt;h1 id=&#34;子模块f3predecoder模块简介&#34;&gt;子模块：F3PreDecoder模块简介&lt;/h1&gt;&#xA;&lt;p&gt;这个模块是从PreDecoder中时序优化出来的，负责判定CFI指令的类型&lt;/p&gt;&#xA;&lt;h2 id=&#34;f3predecoder功能介绍&#34;&gt;F3PreDecoder功能介绍&lt;/h2&gt;&#xA;&lt;h3 id=&#34;cfi指令类型判定&#34;&gt;CFI指令类型判定&lt;/h3&gt;&#xA;&lt;p&gt;要想确定CFI指令类型，只需要分别尝试匹配JAL、JALR、BR和他们的RVC版本即可，注意，RVC的EBREAK&#xA;不应该被视为CFI指令。在匹配的过程中，自然CFI指令的类型就被甄别出来了。在这一步中，我们将所有指令分到如下四类brType中：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;CFI指令类型&lt;/th&gt;&#xA;          &lt;th&gt;brType类型编码&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;非CFI&lt;/td&gt;&#xA;          &lt;td&gt;00&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;branch指令&lt;/td&gt;&#xA;          &lt;td&gt;01&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;jal指令&lt;/td&gt;&#xA;          &lt;td&gt;10&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;jalr指令&lt;/td&gt;&#xA;          &lt;td&gt;11&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;retcall判定&#34;&gt;ret、call判定&lt;/h3&gt;&#xA;&lt;p&gt;然后，我们需要判断是否为call或者ret，这可以通过rd和rs的取值来考察，具体来说，RISCV的RVI指令中，提供了对rd和rs取值的约定，&#xA;当二者取到link寄存器的序号（x1为标准的返回地址寄存器，x5为备用的link寄存器），分别对应着压栈和弹栈。详细的对应情况如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;linkjal.png&#34; alt=&#34;links&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;f3predecoder接口说明&#34;&gt;F3Predecoder接口说明&lt;/h2&gt;&#xA;&lt;p&gt;in_instr: 传递 16 x 4B的拼接指令码&lt;/p&gt;&#xA;&lt;p&gt;out_pd：每条指令的预译码信息，在F3Predecoder分析得到的是brType、isCall和isRet&lt;/p&gt;&#xA;&lt;h2 id=&#34;f3predecoder子模块测试点和功能点&#34;&gt;F3PreDecoder子模块测试点和功能点&lt;/h2&gt;&#xA;&lt;h3 id=&#34;功能点1-cfi指令类型判定&#34;&gt;功能点1 CFI指令类型判定&lt;/h3&gt;&#xA;&lt;p&gt;要想确定CFI指令类型，只需要分别尝试匹配JAL、JALR、BR和他们的RVC版本即可，注意，RVC的EBREAK&#xA;不应该被视为CFI指令。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;序号&lt;/th&gt;&#xA;          &lt;th&gt;名称&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.1&lt;/td&gt;&#xA;          &lt;td&gt;非CFI判定&lt;/td&gt;&#xA;          &lt;td&gt;对传入的非CFI指令（包括RVC.EBREAK），应该判定为类型0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.2&lt;/td&gt;&#xA;          &lt;td&gt;BR判定&lt;/td&gt;&#xA;          &lt;td&gt;对传入的BR指令，应该判定为类型1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.3&lt;/td&gt;&#xA;          &lt;td&gt;JAL判定&lt;/td&gt;&#xA;          &lt;td&gt;对传入的JAL指令，应该判定为类型2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.4&lt;/td&gt;&#xA;          &lt;td&gt;JALR判定&lt;/td&gt;&#xA;          &lt;td&gt;对传入的JALR指令，应该判定为类型3&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;功能点2-retcall判定&#34;&gt;功能点2 ret、call判定&lt;/h3&gt;&#xA;&lt;p&gt;然后，需要判断是否为call或者ret，这可以通过rd和rs的取值来考察。当然，首先必须得满足无条件跳转指令。&lt;/p&gt;&#xA;&lt;p&gt;对于类型2，只有不为RVC指令且目的寄存器rd为link寄存器（x1或x5）时，才为Call。&lt;/p&gt;&#xA;&lt;p&gt;对于类型3，在RVI指令下，当rd为link寄存器时，必为Call。当rs为link寄存器且rd不为时，必为Ret。&#xA;在RVC指令下，对C.JALR指令，为call，对C.JR指令，当rs1为link时，为Ret&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;序号&lt;/th&gt;&#xA;          &lt;th&gt;名称&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.1&lt;/td&gt;&#xA;          &lt;td&gt;非CFI和BR不判定&lt;/td&gt;&#xA;          &lt;td&gt;对传入的非CFI和BR指令，都不应判定为call或者ret&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.2.1.1&lt;/td&gt;&#xA;          &lt;td&gt;RVI.JAL判定call&lt;/td&gt;&#xA;          &lt;td&gt;对传入的RVI.JAL指令，当rd设置为1或5，应当判定该指令为call&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.2.1.2&lt;/td&gt;&#xA;          &lt;td&gt;RVI.JAL例外&lt;/td&gt;&#xA;          &lt;td&gt;对传入的RVI.JAL指令，当rd设置为1和5之外的值，不应当判定该指令为call或ret&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.2.2&lt;/td&gt;&#xA;          &lt;td&gt;RVC.JAL不判定&lt;/td&gt;&#xA;          &lt;td&gt;对传入的RVC.JAL指令，无论什么情况都不能判定为call或ret&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.3.1.1&lt;/td&gt;&#xA;          &lt;td&gt;RVI.JALR和rd为link&lt;/td&gt;&#xA;          &lt;td&gt;传入RVI.JALR指令，并且rd为1或5，无论其他取值，都应判定为call&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.3.1.2&lt;/td&gt;&#xA;          &lt;td&gt;RVI.JALR且仅rs为link&lt;/td&gt;&#xA;          &lt;td&gt;传入RVI.JALR指令，rd不为1和5，rs为1或5，应判定为ret&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.3.1.3&lt;/td&gt;&#xA;          &lt;td&gt;RVI.JALR无link&lt;/td&gt;&#xA;          &lt;td&gt;对传入的JALR指令，若rd和rs均不为link，则不应判定为ret和cal&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.3.2.1&lt;/td&gt;&#xA;          &lt;td&gt;RVC.JALR为Ret&lt;/td&gt;&#xA;          &lt;td&gt;传入RVC.JALR指令，必定为call&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.3.2.2.1&lt;/td&gt;&#xA;          &lt;td&gt;RVC.JR且rs为link&lt;/td&gt;&#xA;          &lt;td&gt;传入RVC.JR指令，rs为1或5，应判定为ret&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.3.2.2.2&lt;/td&gt;&#xA;          &lt;td&gt;RVC.JR且rs不为link&lt;/td&gt;&#xA;          &lt;td&gt;传入RVC.JR指令，rs不为1或5，不应判定为ret&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;测试点汇总&#34;&gt;测试点汇总&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;序号&lt;/th&gt;&#xA;          &lt;th&gt;功能&lt;/th&gt;&#xA;          &lt;th&gt;名称&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.1&lt;/td&gt;&#xA;          &lt;td&gt;CFI指令类型判定&lt;/td&gt;&#xA;          &lt;td&gt;非CFI判定&lt;/td&gt;&#xA;          &lt;td&gt;对传入的非CFI指令（包括RVC.EBREAK），应该判定为类型0&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.2&lt;/td&gt;&#xA;          &lt;td&gt;CFI指令类型判定&lt;/td&gt;&#xA;          &lt;td&gt;BR判定&lt;/td&gt;&#xA;          &lt;td&gt;对传入的BR指令，应该判定为类型1&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.3&lt;/td&gt;&#xA;          &lt;td&gt;CFI指令类型判定&lt;/td&gt;&#xA;          &lt;td&gt;JAL判定&lt;/td&gt;&#xA;          &lt;td&gt;对传入的JAL指令，应该判定为类型2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.4&lt;/td&gt;&#xA;          &lt;td&gt;CFI指令类型判定&lt;/td&gt;&#xA;          &lt;td&gt;JALR判定&lt;/td&gt;&#xA;          &lt;td&gt;对传入的JALR指令，应该判定为类型3&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.1&lt;/td&gt;&#xA;          &lt;td&gt;ret、call判定&lt;/td&gt;&#xA;          &lt;td&gt;非CFI和BR不判定&lt;/td&gt;&#xA;          &lt;td&gt;对传入的非CFI和BR指令，都不应判定为call或者ret&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.2.1.1&lt;/td&gt;&#xA;          &lt;td&gt;ret、call判定&lt;/td&gt;&#xA;          &lt;td&gt;RVI.JAL判定call&lt;/td&gt;&#xA;          &lt;td&gt;对传入的RVC.JAL指令，当rd设置为1或5，应当判定该指令为call&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.2.1.2&lt;/td&gt;&#xA;          &lt;td&gt;ret、call判定&lt;/td&gt;&#xA;          &lt;td&gt;RVI.JAL例外&lt;/td&gt;&#xA;          &lt;td&gt;对传入的RVC.JAL指令，当rd设置为1和5之外的值，不应当判定该指令为call或ret&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.2.2&lt;/td&gt;&#xA;          &lt;td&gt;ret、call判定&lt;/td&gt;&#xA;          &lt;td&gt;RVC.JAL不判定&lt;/td&gt;&#xA;          &lt;td&gt;对传入的RVI.JAL指令，无论什么情况都不能判定为call或ret&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.3.1.1&lt;/td&gt;&#xA;          &lt;td&gt;ret、call判定&lt;/td&gt;&#xA;          &lt;td&gt;RVI.JALR和rd为link&lt;/td&gt;&#xA;          &lt;td&gt;传入RVI.JALR指令，并且rd为1或5，无论其他取值，都应判定为call&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.3.1.2&lt;/td&gt;&#xA;          &lt;td&gt;ret、call判定&lt;/td&gt;&#xA;          &lt;td&gt;RVI.JALR且仅rs为link&lt;/td&gt;&#xA;          &lt;td&gt;传入RVI.JALR指令，rd不为1和5，rs为1或5，应判定为ret&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.3.1.3&lt;/td&gt;&#xA;          &lt;td&gt;ret、call判定&lt;/td&gt;&#xA;          &lt;td&gt;RVI.JALR无link&lt;/td&gt;&#xA;          &lt;td&gt;对传入的JALR指令，若rd和rs均不为link，则不应判定为ret和cal&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.3.2.1&lt;/td&gt;&#xA;          &lt;td&gt;ret、call判定&lt;/td&gt;&#xA;          &lt;td&gt;RVC.JALR为Ret&lt;/td&gt;&#xA;          &lt;td&gt;传入RVC.JALR指令，必定为call&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.3.2.2.1&lt;/td&gt;&#xA;          &lt;td&gt;ret、call判定&lt;/td&gt;&#xA;          &lt;td&gt;RVC.JR且rs为link&lt;/td&gt;&#xA;          &lt;td&gt;传入RVC.JR指令，rs为1或5，应判定为ret&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.3.2.2.2&lt;/td&gt;&#xA;          &lt;td&gt;ret、call判定&lt;/td&gt;&#xA;          &lt;td&gt;RVC.JR且rs不为link&lt;/td&gt;&#xA;          &lt;td&gt;传入RVC.JR指令，rs不为1或5，不应判定为ret&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>FrontendTrigger</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/05_frontend_trigger/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/05_frontend_trigger/</guid>
      <description>&lt;div class=&#34;ifu-ctx&#34;&gt;&#xA;&lt;h1 id=&#34;frontendtrigger子模块&#34;&gt;FrontendTrigger子模块&lt;/h1&gt;&#xA;&lt;p&gt;该子模块的主要作用是在前端设置硬件断点和检查。&lt;/p&gt;&#xA;&lt;p&gt;该模块的输入pc有一个隐含条件，那就是这个pc是通过ftq传递的startAddr计算出来的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;frontendtrigger功能介绍&#34;&gt;FrontendTrigger功能介绍&lt;/h2&gt;&#xA;&lt;h3 id=&#34;断点设置和断点检查&#34;&gt;断点设置和断点检查&lt;/h3&gt;&#xA;&lt;p&gt;在IFU的FrontendTrigger模块里共4个Trigger，编号为0,1,2,3，每个Trigger的配置信息（断点类型、匹配地址等）保存在tdata寄存器中。&lt;/p&gt;&#xA;&lt;p&gt;当软件向CSR寄存器&lt;code&gt;tselect&lt;/code&gt;、&lt;code&gt;tdata1/2&lt;/code&gt;写入特定的值时，CSR会向IFU发送tUpdate请求，更新FrontendTrigger内的&lt;code&gt;tdata&lt;/code&gt;寄存器中的配置信息。&#xA;目前前端的Trigger仅可以配置成PC断点&lt;code&gt;mcontrol.tdata1&lt;/code&gt;寄存器的select位为0；当select=1时，该Trigger将永远不会命中，且不会产生异常）。&lt;/p&gt;&#xA;&lt;p&gt;在取指时，IFU的F3流水级会向FrontendTrigger模块发起查询并在同一周期得到结果。后者会对取指块内每一条指令在每一个Trigger上做检查，&#xA;当指令的PC和&lt;code&gt;tdata2&lt;/code&gt;寄存器内容的关系满足&lt;code&gt;mcontrol.match&lt;/code&gt;位所指示的关系（香山支持match位为0、2、3，对应等于、大于等于、小于）时，&#xA;该指令会被标记为Trigger命中，随着执行在后端产生断点异常，进入M-Mode或调试模式。&lt;/p&gt;&#xA;&lt;h3 id=&#34;链式断点&#34;&gt;链式断点&lt;/h3&gt;&#xA;&lt;p&gt;根据RISCV的debug spec，香山实现的是mcontrol6。&lt;/p&gt;&#xA;&lt;p&gt;当它们对应的Chain位被置时，只有当该Trigger和编号在它后面一位的Trigger同时命中，&lt;del&gt;且timing配置相同时&lt;/del&gt;（在最新的手册中，这一要求已被删除），处理器才会产生异常。&lt;/p&gt;&#xA;&lt;p&gt;在过去（riscv-debug-spec-draft，对应 XiangShan 2024.10.05 合入的 &lt;a href=&#34;https://github.com/OpenXiangShan/XiangShan/pull/3693&#34;&gt;PR#3693&lt;/a&gt; 前）的版本中，Chain 还需要满足两个 Trigger 的 &lt;code&gt;mcontrol.timing&lt;/code&gt; 是相同的。而在新版（riscv-debug-spec-v1.0.0）中，&lt;code&gt;mcontrol.timing&lt;/code&gt; 被移除。目前 XiangShan 的 scala 实现仍保留了这一位，但其值永远为 0 且不可写入，编译生成的 verilog 代码中没有这一位。&lt;/p&gt;&#xA;&lt;h2 id=&#34;frontendtrigger-接口说明&#34;&gt;FrontendTrigger 接口说明&lt;/h2&gt;&#xA;&lt;p&gt;设计上并没有提供一个或一组对外的接口来查询某个断点的状态，因此，要在测试中检查断点状态，要么需要检查内部信号的情况（仓库中提供的构建脚本已经暴露了所有内部信号），要么通过具体执行过程中，断点的触发情况来判定。&lt;/p&gt;&#xA;&lt;h3 id=&#34;输入接口&#34;&gt;输入接口&lt;/h3&gt;&#xA;&lt;p&gt;主要分为控制接口和执行信息（目前执行信息只有pc）&lt;/p&gt;&#xA;&lt;h4 id=&#34;控制接口-io_frontendtrigger&#34;&gt;控制接口 io_frontendTrigger&lt;/h4&gt;&#xA;&lt;p&gt;本接口存储了frontendTrigger的控制信息，包含以下信号/信号组：&lt;/p&gt;&#xA;&lt;h5 id=&#34;debugmode&#34;&gt;debugMode&lt;/h5&gt;&#xA;&lt;p&gt;当前是否处于debug模式下&lt;/p&gt;&#xA;&lt;h5 id=&#34;tenablevec&#34;&gt;tEnableVec&lt;/h5&gt;&#xA;&lt;p&gt;对FrontendTrigger的每个断点，指示其是否有效。&lt;/p&gt;&#xA;&lt;h5 id=&#34;tupdate&#34;&gt;tUpdate&lt;/h5&gt;&#xA;&lt;p&gt;更新断点的控制信息，包含以下信号/信号组：&lt;/p&gt;&#xA;&lt;p&gt;valid：此次更新是否有效/是否更新。&lt;/p&gt;&#xA;&lt;p&gt;bits_addr：此次更新的是哪个断点（0~3）&lt;/p&gt;&#xA;&lt;p&gt;bits_tdata_action：断点触发条件达成后的行为&lt;/p&gt;&#xA;&lt;p&gt;bits_tdata_chain：断点是否链式传导&lt;/p&gt;&#xA;&lt;p&gt;bits_tdata_matchType：断点匹配类型（等于、大于、小于三种）&lt;/p&gt;&#xA;&lt;p&gt;bits_tdata_select：目前为止，select为0时为pc断点&lt;/p&gt;&#xA;&lt;p&gt;bits_tdata_tdata2：用于和PC比较的基准值&lt;/p&gt;&#xA;&lt;h5 id=&#34;triggercanraisebpexp&#34;&gt;triggerCanRaiseBpExp&lt;/h5&gt;&#xA;&lt;p&gt;trigger是否可以引起异常&lt;/p&gt;&#xA;&lt;h4 id=&#34;pc&#34;&gt;pc&lt;/h4&gt;&#xA;&lt;p&gt;pc有一个隐含条件，就是16条指令的pc必定是连续的&lt;/p&gt;&#xA;&lt;h3 id=&#34;输出接口&#34;&gt;输出接口&lt;/h3&gt;&#xA;&lt;p&gt;triggered：16条指令的断点触发情况。&lt;/p&gt;&#xA;&lt;h2 id=&#34;frontendtrigger-测试点和功能点&#34;&gt;FrontEndTrigger 测试点和功能点&lt;/h2&gt;&#xA;&lt;h3 id=&#34;功能点1-设置断点和断点检查&#34;&gt;功能点1 设置断点和断点检查&lt;/h3&gt;&#xA;&lt;p&gt;FrontEndTrigger目前仅支持设置PC断点，这通过设置断点的tdata1寄存器的select位为0实现。&#xA;同时，tdata2寄存器的mcontrol位负责设置指令PC和tdata2寄存器的地址需要满足的关系，&#xA;关系满足时，该指令会被标记为trigger命中。&lt;/p&gt;&#xA;&lt;p&gt;所以，基于以上功能描述，我们需要测试：&lt;/p&gt;&#xA;&lt;p&gt;select位为1时，断点是否永远不会触发。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PredChecker</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/04_pred_checker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/04_pred_checker/</guid>
      <description>&lt;div class=&#34;ifu-ctx&#34;&gt;&#xA;&lt;h1 id=&#34;子模块predchecker简介&#34;&gt;子模块：PredChecker简介&lt;/h1&gt;&#xA;&lt;p&gt;分支预测检查器PredChecker接收来自IFU的预测块信息（包括预测跳转指令在预测块的位置、预测的跳转目标、预译码得到的指令信息、指令PC以及预译码得到的跳转目标偏移等），在模块内部检查五种类型的分支预测错误。模块内部分为两个流水线stage，分别输出信息，第一个stage输出给IFU的f3阶段，用于修正预测块的指令范围和预测结果。第二个stage输出给wb阶段，用于在发现分支预测错误时产生前端重定向以及写回给FTQ（Fetch Target Queue）正确的预测信息。&lt;/p&gt;&#xA;&lt;h2 id=&#34;predchecker功能介绍&#34;&gt;PredChecker功能介绍&lt;/h2&gt;&#xA;&lt;h3 id=&#34;jal预测错误检查&#34;&gt;JAL预测错误检查&lt;/h3&gt;&#xA;&lt;p&gt;jal指令预测错误的条件是，预测块中有一条有效jal指令（由预译码信息给出），但是要么这个预测块没有预测跳转，要么此预测块预测跳转的指令在这条jal指令之后（即这条jal指令没有被预测跳转）。&lt;/p&gt;&#xA;&lt;h3 id=&#34;jalr预测错误检查&#34;&gt;JALR预测错误检查&lt;/h3&gt;&#xA;&lt;p&gt;jalr指令预测错误的条件是，预测块中有一条有效jalr指令（由预译码信息给出），而且这个指令不是ret指令，但是要么这个预测块没有预测跳转，要么此预测块预测跳转的指令在这条jalr指令之后（即这条jalr指令没有被预测跳转）。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ret预测错误检查&#34;&gt;RET预测错误检查&lt;/h3&gt;&#xA;&lt;p&gt;ret指令预测错误的条件是，预测块中有一条有效ret指令（由预译码信息给出），但是要么这个预测块没有预测跳转，要么此预测块预测跳转的指令在这条ret指令之后（即这条ret指令没有被预测跳转）。&lt;/p&gt;&#xA;&lt;h3 id=&#34;更新指令有效范围向量&#34;&gt;更新指令有效范围向量&lt;/h3&gt;&#xA;&lt;p&gt;PredChecker在检查出Jal/Ret/JALR指令预测错误时，需要重新生成指令有效范围向量，有效范围截取到Jal/Ret指令的位置，之后的bit全部置为0。&#xA;需要注意的是，jal和ret指令的错误检查都会导致指令有效范围的缩短，&#xA;所以需要重新生成指令有效范伟fixedRange，同时修复预测结果。需要注意的是，这个修复只会针对RET预测错误和JAL预测错误导致的范围错误，对于后续要介绍的非CFI（控制流指令）预测错误和无效指令预测错误，尽管他们会造成预测块的范围偏小，但是不会进行修复，而是直接在这里进行重定向。这样，重定向后重新取的指令会从这个出错的指令开始。&lt;/p&gt;&#xA;&lt;h3 id=&#34;非cfi预测错误检查&#34;&gt;非CFI预测错误检查&lt;/h3&gt;&#xA;&lt;p&gt;非CFI预测错误的条件是被预测跳转的指令根据预译码信息显示不是一条CFI指令。&lt;/p&gt;&#xA;&lt;h3 id=&#34;无效指令预测错误检查&#34;&gt;无效指令预测错误检查&lt;/h3&gt;&#xA;&lt;p&gt;无效指令预测错误的条件是被预测的指令的位置根据预译码信息中的指令有效向量显示不是一条有效指令的开始。&lt;/p&gt;&#xA;&lt;h3 id=&#34;目标地址预测错误检查&#34;&gt;目标地址预测错误检查&lt;/h3&gt;&#xA;&lt;p&gt;目标地址预测错误的条件是，被预测的是一条有效的jal或者branch指令，同时预测的跳转目标地址和由指令码计算得到的跳转目标不一致。&lt;/p&gt;&#xA;&lt;h3 id=&#34;分级输出检查结果&#34;&gt;分级输出检查结果&lt;/h3&gt;&#xA;&lt;p&gt;以上PredChecker检查结果会分为两级分别输出，前面已经提到，Jal/Ret指令由于需要重新生成指令有效范围向量和重新指定预测位置，&#xA;所以需要在错误产生的当拍（F3）直接输出结果到Ibuffer用于及时更正进入后端的指令 。而由于时序的考虑，其他错误信息（比如五种错误的错误位置、正确的跳转地址等）则是等到下一拍（WB）阶段才返回给IFU做前端重定向。&lt;/p&gt;&#xA;&lt;h2 id=&#34;predchecker接口说明&#34;&gt;PredChecker接口说明&lt;/h2&gt;&#xA;&lt;h3 id=&#34;输入接口&#34;&gt;输入接口&lt;/h3&gt;&#xA;&lt;p&gt;fire_in：这个信号可以简单认为是模块有效性的控制信号。&lt;/p&gt;&#xA;&lt;p&gt;ftqOffset：来自BPU（分支预测单元）的预测信息，表示该预测块的跳转指令是否存在（valid），以及跳转指令的序号（bits）。&lt;/p&gt;&#xA;&lt;p&gt;instrRange：来自PreDecode的预译码信息，对每条指令，表示该指令是否在预测块的有效指令范围内。&lt;/p&gt;&#xA;&lt;p&gt;instrValid：来自PreDecode的预译码信息，表示的是对于每条32位的拼接指令，其是否为一条有效的指令（即低16位为一条RVC指令，或者整个32位为一条RVI指令）。&lt;/p&gt;&#xA;&lt;p&gt;jumpOffset：来自PreDecode的预译码信息，如果某一指令为跳转指令，jumpOffset表示这个指令的跳转目标。&lt;/p&gt;&#xA;&lt;p&gt;pc：指令的pc。&lt;/p&gt;&#xA;&lt;p&gt;pds：来自PreDecode模块的预译码信息，包含指令的brType、是否为Ret（isRet）、是否为RVC指令（isRVC）。&lt;/p&gt;&#xA;&lt;p&gt;target：来自BPU，下个预测块的开始地址。&lt;/p&gt;&#xA;&lt;h3 id=&#34;输出接口&#34;&gt;输出接口&lt;/h3&gt;&#xA;&lt;h4 id=&#34;第一阶段输出&#34;&gt;第一阶段输出&lt;/h4&gt;&#xA;&lt;p&gt;fixedRange：修复的指令有效范围向量，对每条指令i，fixedRange_i为真表示这条指令是否在当前预测块的有效指令范围内&lt;/p&gt;&#xA;&lt;p&gt;fixedTaken：修复过后的CFI指令选取情况，对每条指令，fixedTaken_i为真表示这条指令是否是这个预测块的第一条CFI指令&lt;/p&gt;&#xA;&lt;h4 id=&#34;第二阶段输出&#34;&gt;第二阶段输出&lt;/h4&gt;&#xA;&lt;p&gt;fixedMissPred：对每条指令，PredChecker检查出的存在预测错误的情况，fixedMissPred_i为真表示这条指令存在预测错误&lt;/p&gt;&#xA;&lt;p&gt;fixedTarget：对每条指令，给出修复过的下一条指令的位置（可以是常规的pc+2或+4，或者如果是跳转指令，给出跳转目标）。&lt;/p&gt;&#xA;&lt;p&gt;jalTarget：对每条指令，给出跳转目标。&lt;/p&gt;&#xA;&lt;p&gt;faultType：每条指令的错误类型，取指范围包含noFault，jalFault，retFault，targetFault，notCFIFault，invalidTaken，jalrFault，分别对应数字0～6&lt;/p&gt;&#xA;&lt;h2 id=&#34;predchecker测试点和功能点&#34;&gt;PredChecker测试点和功能点&lt;/h2&gt;&#xA;&lt;h3 id=&#34;功能点1-bpu预测信息的jal预测错误检查&#34;&gt;功能点1 BPU预测信息的JAL预测错误检查&lt;/h3&gt;&#xA;&lt;p&gt;PredChecker会对传入的预测块进行JAL预测错误预检查并修正指令有效范围向量和预测的跳转指令。&lt;/p&gt;&#xA;&lt;p&gt;对这一模块的测试，我们分为两部分：正确的输入是否会误检和确有JAL检测错误的预测块输入能否检出。&lt;/p&gt;&#xA;&lt;p&gt;对于误检，我们设计如下的测试点:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;序号&lt;/th&gt;&#xA;          &lt;th&gt;名称&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.1.1&lt;/td&gt;&#xA;          &lt;td&gt;误检测试1&lt;/td&gt;&#xA;          &lt;td&gt;预测块中没有JAL指令且BPU预测信息也没有取用任何跳转指令的输入，检查PredChecker是否会误报JAL预测错误。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.1.2&lt;/td&gt;&#xA;          &lt;td&gt;误检测试2&lt;/td&gt;&#xA;          &lt;td&gt;预测块中有JAL指令且BPU预测信息取用的正是本条跳转指令的输入，检查PredChecker是否会误报JAL预测错误。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;对于JAL预测错误的正确检验，我们设计如下的测试点：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;序号&lt;/th&gt;&#xA;          &lt;th&gt;名称&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.2.1&lt;/td&gt;&#xA;          &lt;td&gt;存在JAL未预测&lt;/td&gt;&#xA;          &lt;td&gt;预测块中存在JAL指令，但是BPU预测信息未预测跳转，检查PredChecker是否能检测出JAL预测错误。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.2.2&lt;/td&gt;&#xA;          &lt;td&gt;预测的JAL并非第一条&lt;/td&gt;&#xA;          &lt;td&gt;预测块中存在JAL指令，但是BPU预测信息取的跳转指令在第一条JAL指令之后，检查PredChecker是否能检测出JAL预测错误。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;功能点2-bpu预测信息的ret预测错误检查&#34;&gt;功能点2 BPU预测信息的RET预测错误检查&lt;/h3&gt;&#xA;&lt;p&gt;PredChecker会对传入的预测块进行RET预测错误预检查并修正指令有效范围向量和新的预测结果。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PreDecode</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/01_predecode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/01_predecode/</guid>
      <description>&lt;div class=&#34;ifu-ctx&#34;&gt;&#xA;&lt;h1 id=&#34;子模块predecoder简介&#34;&gt;子模块：PreDecoder简介&lt;/h1&gt;&#xA;&lt;p&gt;预译码器PreDeocoder接受初始指令码并进行指令码拼接，拼接之后对每个指令码查询预译码表产生预译码信息，预译码信息包括该位置是否是有效指令开始、CFI指令类型、是否是RVC指令、是否是Call指令以及是否是Ret指令。预译码器会产生两种有效指令开始的向量，一种是默认第1个二字节必为有效指令开始，另一种是默认第2个二字节必为有效指令的开始，最终的选择在IFU端做。&lt;/p&gt;&#xA;&lt;p&gt;所以，预译码器接收的输入是： 17 x 2B的初始指令码，这个2字节的初始指令码要么是一条RVC指令，要么是一条RVI指令的前半或后半部分。&lt;/p&gt;&#xA;&lt;p&gt;预译码器的输出是：16x4B的拼接指令码；对每个4B指令码，该条指令是否为RVI或RVC指令（RVC指令只考虑该4B的低2B）；对每个4B指令码，该条指令的跳转偏移；两个16位的有效指令开始向量，其中第一种向量假定当前预测块的起始2字节为一条有效指令的开始，而第二种向量假定当前预测块的起始2字节为一条有效RVI指令的结束（但是由于第二种向量的前两位必然为0和1,所以编译优化后，第二种向量实际只有14个信号，表示2-15位；同理，第1种向量的第0位因为恒为1,所以也被优化）&lt;/p&gt;&#xA;&lt;h3 id=&#34;功能介绍&#34;&gt;功能介绍&lt;/h3&gt;&#xA;&lt;h3 id=&#34;指令码生成&#34;&gt;指令码生成&lt;/h3&gt;&#xA;&lt;p&gt;预译码器接受来自IFU完成指令切分的17 × 2字节的初始指令码，并以4字节为窗口，2字节为步进长度，&#xA;从第1个2字节开始，直到第16个2字节，选出总共16个4字节的指令码。&lt;/p&gt;&#xA;&lt;h3 id=&#34;预译码信息生成&#34;&gt;预译码信息生成&lt;/h3&gt;&#xA;&lt;p&gt;预译码器根据指令码产生预译码信息，主要包括：是否是RVC指令、是否是CFI指令、&#xA;CFI指令类型（branch/jal/jalr/call/ret）、CFI指令的目标地址计算偏移。&lt;/p&gt;&#xA;&lt;p&gt;首先是判断是否是RVC指令，RVC指令的具体格式参阅RISCV手册的描述：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;RVCtable.png&#34; alt=&#34;RVC&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;其中，决定指令是否为RVC的部分在于指令的[1, 0]两位，不为3的情况下都是RVC指令。&lt;/p&gt;&#xA;&lt;p&gt;其余的指令性质判定功能（CFI类型、是否为call和ret）被时序优化到了F3PreDecoder中，不过也可以认为是PreDecoder的一部分，可以设置测试点进行测试&lt;/p&gt;&#xA;&lt;p&gt;最后比较麻烦的是CFI指令的目标地址计算偏移，主要是对J和BR分支指令进行的计算，这需要综合RVI和RVC中jal和br指令的结构。&#xA;首先，是手册中对于C.J的描述&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;JOP.png&#34; alt=&#34;JOP&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这里对imm立即数的注解是，立即数的每一位最后对应到的是偏移的哪一位。&lt;/p&gt;&#xA;&lt;p&gt;所以，可以认为立即数是这么重组的：&lt;/p&gt;&#xA;&lt;p&gt;instr(12) + instr(8) + instr(10, 9) + instr(6) + instr(7) + instr(2) + instr(11) +instr(5,3) + &amp;ldquo;0&amp;rdquo;&lt;/p&gt;&#xA;&lt;p&gt;而RVI中，对于JAL指令，是这么定义的：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;RVIJ.png&#34; alt=&#34;RVIJ&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们可以类似地计算立即数。&lt;/p&gt;&#xA;&lt;p&gt;同样的，我们可以查询手册，参考BR类指令的立即数计算RVC和RVI指令对应的偏移。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;RVIBR.png&#34; alt=&#34;RVIBR&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;RVCBR.png&#34; alt=&#34;RVCBR&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;predecode接口说明&#34;&gt;PreDecode接口说明&lt;/h2&gt;&#xA;&lt;h3 id=&#34;输入接口&#34;&gt;输入接口&lt;/h3&gt;&#xA;&lt;p&gt;in_bits_data 17 x 2B的初始指令码，其中，每2个字节既可以代表一条RVC指令，也可以代表一个RVI指令的一半。&lt;/p&gt;&#xA;&lt;h3 id=&#34;输出接口&#34;&gt;输出接口&lt;/h3&gt;&#xA;&lt;p&gt;instr：拼接后的 16 x 4B的初始指令码&lt;/p&gt;&#xA;&lt;p&gt;jumpOffset：如果这条指令是跳转指令，则jumpOffset表示其跳转偏移&lt;/p&gt;&#xA;&lt;p&gt;pd：每条指令预译码信息，包括valid、isRVC、brType、isRet、isCall。其中第0条指令的valid已经被优化了&lt;/p&gt;&#xA;&lt;p&gt;hasHalfValid：这个信号需要和pd的valid结合起来看，PreDecode的一个功能是求出指令开始向量，也就是对每个4B的拼接指令，判断其低2B是否为一条有效指令的开始（即一条RVI指令的前半部分，或者一条RVC指令），但是需要分类讨论该预测块的第一个2B是否为一条有效指令的开始。hasHalfValid表示的是当前预测块的第一个2B指令为一条RVI指令的后半部分时，给出的指令开始向量。类似地，pd中的valid指的是当前预测块的第一个2B指令为一条指令的开始时，给出的指令开始向量。&lt;/p&gt;&#xA;&lt;h2 id=&#34;predecoder测试点和功能点&#34;&gt;PreDecoder测试点和功能点&lt;/h2&gt;&#xA;&lt;h3 id=&#34;功能点1-生成指令码&#34;&gt;功能点1 生成指令码&lt;/h3&gt;&#xA;&lt;p&gt;子模块：PreDecoder简介&lt;/p&gt;&#xA;&lt;p&gt;预译码器PreDeocoder接受初始指令码并进行指令码拼接，拼接之后对每个指令码查询预译码表产生预译码信息，预译码信息包括该位置是否是有效指令开始、CFI指令类型、是否是RVC指令、是否是Call指令以及是否是Ret指令。预译码器会产生两种有效指令开始的向量，一种是默认第1个二字节必为有效指令开始，另一种是默认第2个二字节必为有效指令的开始，最终的选择在IFU端做。&lt;/p&gt;&#xA;&lt;p&gt;所以，预译码器接收的输入是： 17 x 2B的初始指令码，这个2字节的初始指令码要么是一条RVC指令，要么是一条RVI指令的前半或后半部分。&lt;/p&gt;</description>
    </item>
    <item>
      <title>RVCExpander</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/03_ifu_rvc_exp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/03_ifu_rvc_exp/</guid>
      <description>&lt;div class=&#34;ifu-ctx&#34;&gt;&#xA;&lt;h1 id=&#34;子模块rvcexpander简介&#34;&gt;子模块：RVCExpander简介&lt;/h1&gt;&#xA;&lt;p&gt;RVCExpander是IFU的子模块，负责对传入的指令进行指令扩展，并解码计算非法信息。&lt;/p&gt;&#xA;&lt;p&gt;该模块接收的输入量是两个：一条RVC指令或者RVI指令；CSR对fs.status的使能情况。&lt;/p&gt;&#xA;&lt;p&gt;输出量也是两个：输入指令对应的RVI指令；RVC指令是否非法。&lt;/p&gt;&#xA;&lt;h2 id=&#34;指令扩展&#34;&gt;指令扩展&lt;/h2&gt;&#xA;&lt;p&gt;如果是RVI指令，则无需扩展。&lt;/p&gt;&#xA;&lt;p&gt;否则对RVC指令，按照手册的约定进行扩展。&lt;/p&gt;&#xA;&lt;h2 id=&#34;非法指令判断&#34;&gt;非法指令判断&lt;/h2&gt;&#xA;&lt;p&gt;RVI指令永远判断为合法。&lt;/p&gt;&#xA;&lt;p&gt;对于RVC指令的判定，详细内容参阅20240411的RISCV手册的26.8节表格列出的指令条件。&lt;/p&gt;&#xA;&lt;h2 id=&#34;常量说明&#34;&gt;常量说明&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;常量名&lt;/th&gt;&#xA;          &lt;th&gt;常量值&lt;/th&gt;&#xA;          &lt;th&gt;解释&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;XLEN&lt;/td&gt;&#xA;          &lt;td&gt;64&lt;/td&gt;&#xA;          &lt;td&gt;通用寄存器位宽，决定指令扩展时使用rv32还是rv64还是rv128&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;fLen&lt;/td&gt;&#xA;          &lt;td&gt;64&lt;/td&gt;&#xA;          &lt;td&gt;香山支持d扩展，故为64&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;rvcexpander接口说明&#34;&gt;RVCExpander接口说明&lt;/h2&gt;&#xA;&lt;h3 id=&#34;输入接口&#34;&gt;输入接口&lt;/h3&gt;&#xA;&lt;p&gt;fsIsOff：表示CSR是否使能&lt;code&gt;fs.status&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;in：传入一个32位数据，其可以是一个完整的RVI指令，也可以是低16位RVC指令+高16位为RVI指令的一半（当然低16位也有可能是RVI指令的后半部分，但是RVCExpander不会区分，可以认为RVCExpander假定传入的32位数据的低16位一定为一条指令的开始）&lt;/p&gt;&#xA;&lt;h3 id=&#34;输出接口&#34;&gt;输出接口&lt;/h3&gt;&#xA;&lt;p&gt;ill：表示这条指令是否为非法指令&lt;/p&gt;&#xA;&lt;p&gt;out_bits：对RVI指令，直接返回，对RVC指令，返回扩展后的32位指令。&lt;/p&gt;&#xA;&lt;h2 id=&#34;功能点和测试点&#34;&gt;功能点和测试点&lt;/h2&gt;&#xA;&lt;h3 id=&#34;功能点1-指令扩展&#34;&gt;功能点1 指令扩展&lt;/h3&gt;&#xA;&lt;p&gt;RVCExpander负责接收预译码器拼接的指令码，并进行指令扩展，如果是16位RVC指令，需要按照RISCV手册的约定完成扩展&lt;/p&gt;&#xA;&lt;p&gt;对此，我们需要随机生成RVI指令和RVC指令，送入预译码器：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;序号&lt;/th&gt;&#xA;          &lt;th&gt;名称&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.1&lt;/td&gt;&#xA;          &lt;td&gt;RVI指令保留&lt;/td&gt;&#xA;          &lt;td&gt;构造RVI指令传入，检查保留情况&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.2&lt;/td&gt;&#xA;          &lt;td&gt;RVC指令扩展&lt;/td&gt;&#xA;          &lt;td&gt;构造RVC指令传入，按手册检查扩展结果&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;功能点2-非法指令判断&#34;&gt;功能点2 非法指令判断&lt;/h3&gt;&#xA;&lt;p&gt;RVCExpander在解析指令时，如发现指令违反了手册的约定，则需要判定该指令非法&lt;/p&gt;&#xA;&lt;p&gt;对此，我们需要随机生成非法指令送入RVI中，并检测RVCExpander对合法位的校验；同时，我们还需要校验合法指令是否会被误判为非法指令：&lt;/p&gt;&#xA;&lt;p&gt;此外，需要判定C.fp指令在CSR未使能fs.status的情况下，能否将这类指令判定为非法。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;序号&lt;/th&gt;&#xA;          &lt;th&gt;名称&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.1&lt;/td&gt;&#xA;          &lt;td&gt;常规非法指令测试&lt;/td&gt;&#xA;          &lt;td&gt;随机构造非法RVC指令传入，检查判断结果&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.2&lt;/td&gt;&#xA;          &lt;td&gt;合法指令测试&lt;/td&gt;&#xA;          &lt;td&gt;随机构造合法RVC指令传入，检查判断结果&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.3&lt;/td&gt;&#xA;          &lt;td&gt;C.fp指令测试&lt;/td&gt;&#xA;          &lt;td&gt;CSR未使能fs.status的情况下，C.fp指令应该为非法&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;测试点汇总&#34;&gt;测试点汇总 &lt;a id=&#34;rvc_expander_functions&#34;&gt; &lt;/a&gt;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;序号&lt;/th&gt;&#xA;          &lt;th&gt;功能&lt;/th&gt;&#xA;          &lt;th&gt;名称&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.1&lt;/td&gt;&#xA;          &lt;td&gt;指令扩展&lt;/td&gt;&#xA;          &lt;td&gt;RVI指令保留&lt;/td&gt;&#xA;          &lt;td&gt;构造RVI指令传入，检查保留情况&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1.2&lt;/td&gt;&#xA;          &lt;td&gt;指令扩展&lt;/td&gt;&#xA;          &lt;td&gt;RVC指令扩展&lt;/td&gt;&#xA;          &lt;td&gt;构造RVC指令传入，按手册检查扩展结果&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.1&lt;/td&gt;&#xA;          &lt;td&gt;非法指令判断&lt;/td&gt;&#xA;          &lt;td&gt;非法指令测试&lt;/td&gt;&#xA;          &lt;td&gt;随机构造非法RVC指令传入，检查判断结果&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.2&lt;/td&gt;&#xA;          &lt;td&gt;非法指令判断&lt;/td&gt;&#xA;          &lt;td&gt;合法指令测试&lt;/td&gt;&#xA;          &lt;td&gt;随机构造合法RVC指令传入，检查判断结果&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2.3&lt;/td&gt;&#xA;          &lt;td&gt;C.fp指令测试&lt;/td&gt;&#xA;          &lt;td&gt;CSR未使能fs.status的情况下，C.fp指令应该为非法&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;rvc扩展辅助阅读材料&#34;&gt;RVC扩展辅助阅读材料&lt;/h2&gt;&#xA;&lt;p&gt;为方便参考模型的书写，在这里根据20240411版本的手册内容整理了部分指令扩展的思路。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
