<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>验证文档 on 万众一芯之香山处理器</title>
    <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/</link>
    <description>Recent content in 验证文档 on 万众一芯之香山处理器</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>验证文档规范</title>
      <link>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/00_standard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/UnityChipForXiangShan/docs/98_ut/00_standard/</guid>
      <description>本规范规定了“万众一芯”的文档模板（不是验证报告的模板），已发布和将来将要发布的文档都需要遵循这一规范。&#xA;以下是文档模板：&#xA;验证文档 术语说明 [可选项]列出术语和关键概念解释，方便读者参考，如果没有或比较简单可以没有&#xA;整体框图 [可选项]如果特别复杂的模块，可以加入一张整体框图&#xA;流水级示意图 [可选项]如果模块存在多流水级，则可以加入一张流水级示意图&#xA;子模块列表 [可选项]如果有的话，请在这里列出&#xA;模块功能说明 简述功能&#xA;简述功能划分，复杂的可以以表格形式呈现&#xA;功能1说明 针对功能1分解测试点&#xA;如果测试点较多可以先列一个小表格；针对每个测试点，给出设置cov_group的建议&#xA;功能2说明 针对功能2分解测试点&#xA;如果测试点较多可以先列一个小表格；针对每个测试点，给出设置cov_group的建议&#xA;功能3说明 针对功能3分解测试点&#xA;如果测试点较多可以先列一个小表格；针对每个测试点，给出设置cov_group的建议&#xA;&amp;hellip;&#xA;常量说明 说明本模块中需要用到的关键常量。（可省略）&#xA;接口说明 详细解释各种接口的含义、来源&#xA;接口时序 [可选项] 复杂的模块可以考虑添加接口时序说明&#xA;测试点总表 请用&amp;lt;mrs-testpoints&amp;gt;&amp;lt;/mrs-testpoints&amp;gt;标签包裹下面的测试点总表&#xA;请用&amp;lt;mrs-pn&amp;gt;&amp;lt;/mrs-pn&amp;gt;标签包裹您的每个测试点名称&#xA;完成上述两步主要是方便我们后续用脚本提取测试点&#xA;序号 功能名称 测试点名称 解释 1.x.x 用英文大写 用英文大写？需要链接相应测试点 简单解释输入输出需要的信息 子模块的文档格式类似&#xA;以下以FIFO为例，展示了一个简单的文档案例&#xA;`timescale 1ns / 1ps module FIFO ( //data_width = 8 data depth =8 input clk, input rst_n, input wr_en, //写使能 input rd_en, //读使能 input [7:0]wdata, //写入数据输入 output [7:0]rdata, //读取数据输出 output empty, //读空标志信号 output full //写满标志信号 ); reg [7:0] rdata_reg = 8&amp;#39;d0; assign rdata = rdata_reg; reg [7:0] data [7:0]; //数据存储单元(8bit数据8个) reg [3:0] wr_ptr = 4&amp;#39;d0; //写指针 reg [3:0] rd_ptr = 4&amp;#39;d0; //读指针 wire [2:0] wr_addr; //写地址(写指针的低3位) wire [2:0] rd_addr; //读地址(读指针的低3位) assign wr_addr = wr_ptr[2:0]; assign rd_addr = rd_ptr[2:0]; always@(posedge clk or negedge rst_n)begin //写数据 if(!</description>
    </item>
  </channel>
</rss>
