[{"body":"脚本目标 在scripts目录下使用python编写对应rtl的编译文件（例如build_ut_frontend_ifu_rvc_expander.py）。\n该脚本的目标是提供 RTL 到 Python DUT 的编译、目标覆盖文件，以及自定义功能等内容。\n创建过程 确定文件名称 在香山昆明湖 DUT 验证进展中选择需要验证的 UT，如果没有或者进一步细化，可通过编辑configs/dutree/xiangshan-kmh.yaml自行添加。\n比如，我们要验证的是前端部分的ifu模块下的rvc_expander模块，那么需要在configs/dutree/xiangshan-kmh.yaml中添加对应的部分（目前yaml中已经有该模块了，此处为举例）：\nname: \"kmh_dut\" desc: \"所有昆明湖DUT\" children: - name: \"frontend\" desc: \"前端模块\" children: - name: \"ifu\" desc: \"指令单元 (Instruction Fetch Unit)\" children: - name: \"rvc_expander\" desc: \"RVC指令扩充器\" 脚本文件的命名格式如下：\nscripts/build_\u003c顶层模块\u003e_\u003c下层模块名\u003e_..._\u003c目标模块名\u003e.py 目前本项目内置了 4 个顶层模块：\nut_frontend 前端 ut_backend 后端 ut_mem_block 访存 ut_misc 其他 其中的子模块没有ut_前缀（顶层目录有该前缀是为了和其他目录区分开）。\n例如验证目标 DUT 为rvc_expander模块：\n该模块是属于前端的，所以顶级模块为ut_frontend，它的下层模块为ifu，目标模块为rvc_expander。\n通过刚才我们打开的yaml文件也可以知道，frontend的children 为ifu，ifu的children 为rvc_expander。 所以，需要创建的脚本名称为build_ut_frontend_ifu_rvc_expander.py。\n编写 build(cfg) -\u003e bool 函数 build 函数定义如下：\ndef build(cfg) -\u003e bool: \"\"\"编译DUT Args: cfg: 运行时配置，可通过它访问配置项，例如 cfg.rtl.version Return: 返回 True 或者 False，表明该函数是否完成预期目标 \"\"\" build 在 make dut 时会被调用，其主要是将目标 RTL 转换为 Python 模块。在该过程中也可以加入其他必要过程，例如编译依赖项等。以build_ut_frontend_ifu_rvc_expander.py为例，主要完成了 RTL 检查、DUT 检查、RTL 编译、disasm 依赖编译等工作：\nimport os from comm import warning, info def build(cfg): # import 相关依赖 from toffee_test.markers import match_version from comm import is_all_file_exist, get_rtl_dir, exe_cmd, get_root_dir # 检查RTL版本（version参数为空，表示所有版本都支持） if not match_version(cfg.rtl.version, \"openxiangshan-kmh-*\"): warning(\"ifu frontend rvc expander: %s\" % f\"Unsupported RTL version {cfg.rtl.version}\") return False # 检查在当前RTL中，目标文件是否存在 f = is_all_file_exist([\"rtl/RVCExpander.sv\"], get_rtl_dir(cfg=cfg)) assert f is True, f\"File {f} not found\" # 如果dut中不存在RVCExpander，则调用picker进行Python打包 if not os.path.exists(get_root_dir(\"dut/RVCExpander\")): info(\"Exporting RVCExpander.sv\") s, out, err = exe_cmd(f'picker export --cp_lib false {get_rtl_dir(\"rtl/RVCExpander.sv\", cfg=cfg)} --lang python --tdir {get_root_dir(\"dut\")}/ -w rvc.fst -c') assert s, \"Failed to export RVCExpander.sv: %s\\n%s\" % (out, err) # 如果tools中不存在disasm/build，则需要编译disasm if not os.path.exists(get_root_dir(\"tools/disasm/build\")): info(\"Building disasm\") s, _, _ = exe_cmd(\"make -C %s\" % get_root_dir(\"tools/disasm\")) assert s, \"Failed to build disasm\" # 编译成功 return True def line_coverage_files(cfg): return [\"RVCExpander.v\"] picker 的使用方式请参考其文档和使用\n在scripts目录中可以创建子目录保存 UT 验证需要的文件，例如 rvc_expander 模块创建了scripts/frontend_ifu_rvc_expander目录，其中的rtl_file.f用来指定输入的 RTL 文件，line_coverage.ignore用来保存需要忽略的代码行统计。自定义目录的命名需要合理，且能通过名字判断其所属模块和文件。\n编写 line_coverage_files(cfg) -\u003e list[str] 函数 line_coverage_files 函数的定义如下：\ndef line_coverage_files(cfg)-\u003e list[str]: \"\"\"指定需要覆盖的文件 Args: cfg: 运行时配置，可通过它访问配置项，例如 cfg.rtl.version Return: 返回统计代码行覆盖率的目标RTL文件名 \"\"\" 在build_ut_frontend_ifu_rvc_expander.py文件中，line_coverage_files函数的定义如下：\ndef line_coverage_files(cfg): return [\"RVCExpander.v\"] 标识该模块关注的是对RVCExpander.v文件的覆盖。如果要开启测试结果处理，还需要在configs/_default.yaml中的doc-result下disable=False（默认参数是False，也就是开启状态）;如果不开启测试结果处理则(disable = True)。注意，如果不开启测试结果处理，那么上述函数就不会被调用。\n","categories":"","description":"","excerpt":"脚本目标 在scripts目录下使用python编写对应rtl的编译文件（例 …","ref":"/UnityChipForXiangShan/docs/03_add_test/01_build_script/","tags":"","title":"添加编译脚本"},{"body":"确定目录结构 UT(Unit Test, 单元测试)所在的目录位置的层级结构应该与名称一致，例如frontend.ifu.rvc_expander应当位于ut_frontend/ifu/rvc_expander目录，且每层目录都需要有__init__.py，便于通过 python 进行import。\n本章节的文件为your_module_wrapper.py（如果你的模块是rvc_expander，那么文件就是rvc_expander_wrapper.py）。\nwrapper 是包装的意思，也就是我们测试中需要用到的方法封装成和dut解耦合的API提供给测试用例使用。\n*注：解耦合是为了测试用例和 DUT 解耦，使得测试用例可以独立于 DUT 进行编写和调试，也就是在测试用例中，不需要知道 DUT 的具体实现细节，只需要知道如何使用 API 即可。可以参照将验证代码与DUT进行解耦\n该文件应该放于ut_frontend_or_backend/top_module/your_module/env（这里依然以rvc_expander举例：rvc_expander属于前端，其顶层目录则应该是ut_frontend；rvc_expander的顶层模块是ifu，那么次级目录就是ifu;之后的就是rvc_expander自己了；最后，由于我们是在构建测试环境，再建一级env目录。将它们连起来就是：ut_frontend_or_backend/top_module/your_module/env）目录下。\nut_frontend/ifu/rvc_expander ├── classical_version │ ├── env │ │ ├── __init__.py │ │ └── rvc_expander_wrapper.py │ ├── __init__.py │ └── test_rvc_expander.py ├── __init__.py ├── README.md └── toffee_version ├── agent │ └── __init__.py ├── bundle │ └── __init__.py ├── env │ ├── __init__.py │ └── ref_rvc_expand.py ├── __init__.py └── test ├── __init__.py ├── rvc_expander_fixture.py └── test_rvc.py 这里rvc_expander目录下有classical_version传统版本和toffee_version使用toffee的版本。 传统版本就是使用pytest框架来进行测试，toffee只使用了其Bundle;而在toffee版本中，我们会使用更多toffee的特性。 一般来说，使用传统版本就已经可以覆盖绝大多数情况了，只有在传统版本不能满足需求时，才需要使用toffee版本。\n编写测试环境的时候，两个版本选择一个就行。\n模块（例如rvc_expander）中的代码目录结构由贡献者自行决定（我们写的时候并不需要再建一级classical_version或toffee_version目录），但需要满足 python 规范，且逻辑和命名合理。\nEnv 编写要求 需要进行 RTL 版本检查 Env 提供的 API 需要和引脚、时序无关 Env 提供的 API 需要稳定，不能随意进行接口/返回值修改 需要定义必要的 fixture 需要初始化功能检查点（功能检查点可以独立成一个模块） 需要进行覆盖率统计 需要有说明文档 编写测试环境：传统版本 在 UT 验证模块的测试环境中，目标是完成以下工作：\n对 DUT 进行功能封装，为测试提供稳定 API 定义功能覆盖率 定义必要 fixture 提供给测试用例 在合理时刻统计覆盖率 以 IFU 环境中的 RVCExpander 为例（ut_frontend/ifu/rvc_expander/classical_version/env/rvc_expander_wrapper.py）：\n1. DUT 封装 以下内容位于ut_frontend/ifu/rvc_expander/classical_version/env/rvc_expander_wrapper.py。\nclass RVCExpander(toffee.Bundle): def __init__(self, cover_group, **kwargs): super().__init__() self.cover_group = cover_group self.dut = DUTRVCExpander(**kwargs) # 创建DUT self.io = toffee.Bundle.from_prefix(\"io_\", self.dut) # 通过 Bundle 使用前缀关联引脚 self.bind(self.dut) # 把 Bundle 与 DUT 进行绑定 def expand(self, instr, fsIsOff): self.io[\"in\"].value = instr # 给DUT引脚赋值 self.io[\"fsIsOff\"].value = fsIsOff # 给DUT引脚赋值 self.dut.RefreshComb() # 推动组合电路 self.cover_group.sample() # 调用sample对功能覆盖率进行统计 return self.io[\"out_bits\"].value, self.io[\"ill\"].value # 返回结果 和 是否是非法指令 def stat(self): # 获取当前状态 return { \"instr\": self.io[\"in\"].value, # 输入指令 \"decode\": self.io[\"out_bits\"].value, # 返回展开结果 \"ilegal\": self.io[\"ill\"].value != 0, # 输入是否非法 } 在上述例子中，class RVCExpander对DUTRVCExpander进行了封装，对外提供了两个 API：\nexpand(instr: int, fsIsOff: bool) -\u003e (int, int) ：该函数用于接受输入指令 instr 进行解码，返回（结果，非法指令标记）。如果非法指令标记不为 0，者说明输入指令非法。 stat() -\u003e dict(instr, decode, ilegal)：该函数用于返回当前的状态，其中包含当前的输入指令，解码结果以及非法指令标记。 上述 API 屏蔽了 DUT 的引脚，对外程序通用功能。\n2. 定义功能覆盖率 尽可能的在 Env 中定义好功能覆盖率，如果有必要也可以在测试用例中定义覆盖率。toffee 功能覆盖率的定义请参考什么是功能覆盖率。为了完善功能检查点和测试用例之间的对应关系，功能覆盖率定义完成后，需要在适合的位置进行检查点和测试用例的对应（测试点反标）。\n以下内容位于ut_frontend/ifu/rvc_expander/classical_version/env/rvc_expander_wrapper.py。\nimport toffee.funcov as fc # 创建功能覆盖率组 g = fc.CovGroup(UT_FCOV(\"../../../CLASSIC\")) def init_rvc_expander_funcov(expander, g: fc.CovGroup): \"\"\"Add watch points to the RVCExpander module to collect function coverage information\"\"\" # 1. Add point RVC_EXPAND_RET to check expander return value: # - bin ERROR. The instruction is not illegal # - bin SUCCE. The instruction is not expanded g.add_watch_point(expander, { \"ERROR\": lambda x: x.stat()[\"ilegal\"] == False, \"SUCCE\": lambda x: x.stat()[\"ilegal\"] != False, }, name = \"RVC_EXPAND_RET\") ... # 5. Reverse mark function coverage to the check point def _M(name): # get the module name return module_name_with(name, \"../../test_rv_decode\") # - mark RVC_EXPAND_RET g.mark_function(\"RVC_EXPAND_RET\", _M([\"test_rvc_expand_16bit_full\", \"test_rvc_expand_32bit_full\", \"test_rvc_expand_32bit_randomN\"]), bin_name=[\"ERROR\", \"SUCCE\"]) ... 在上述代码中添加了名为RVC_EXPAND_RET的功能检查点来检查RVCExpander模块是否具有返回非法指令的能力。需要满足ERROR和SUCCE两个条件，即stat()中的ileage需要有True也需要有False值。在定义完检查点后，通过mark_function方法，对会覆盖到该检查的测试用例进行了标记。\n3. 定义必要fixture 以下内容位于ut_frontend/ifu/rvc_expander/classical_version/env/rvc_expander_wrapper.py。\nversion_check = get_version_checker(\"openxiangshan-kmh-*\") # 指定满足要的RTL版本 @pytest.fixture() def rvc_expander(request): version_check() # 进行版本检查 fname = request.node.name # 获取调用该fixture的测试用例 wave_file = get_out_dir(\"decoder/rvc_expander_%s.fst\" % fname) # 设置波形文件路径 coverage_file = get_out_dir(\"decoder/rvc_expander_%s.dat\" % fname) # 设置代码覆盖率文件路径 coverage_dir = os.path.dirname(coverage_file) os.makedirs(coverage_dir, exist_ok=True) # 目标目录不存在则创建目录 expander = RVCExpander(g, coverage_filename=coverage_file, waveform_filename=wave_file) # 创建RVCExpander expander.dut.io_in.AsImmWrite() # 设置io_in引脚的写入时机为立即写入 expander.dut.io_fsIsOff.AsImmWrite() # 设置io_fsIsOff引脚的写入时机为立即写入 init_rvc_expander_funcov(expander, g) # 初始化功能检查点 yield expander # 返回创建好的 RVCExpander 给 Test Case expander.dut.Finish() # Tests Case运行完成后，结束DUT set_line_coverage(request, coverage_file) # 把生成的代码覆盖率文件告诉 toffee-report set_func_coverage(request, g) # 把生成的功能覆盖率数据告诉 toffee-report g.clear() # 清空功能覆盖统计 上述 fixture 完成了以下功能：\n进行 RTL 版本检查，如果不满足\"openxiangshan-kmh-*\"要求，则跳过调用改 fixture 的测试用例 创建 DUT，并指定了波形，代码行覆盖率文件路径（路径中含有调用该 fixure 的用例名称：fname） 调用init_rvc_expander_funcov添加功能覆盖点 结束 DUT，处理代码行覆盖率和功能覆盖率（发往 toffee-report 进行处理） 清空功能覆盖率 *注：在 PyTest 中，执行测试用例test_A(rvc_expander, ....)前（rvc_expander是我们在使用fixure装饰器时定义的方法名），会自动调用并执行rvc_expander(request)中yield关键字前的部分（相当于初始化），然后通过yield返回rvc_expander调用test_A用例（yield返回的对象，在测试用例里就是我们fixture下定义的方法名），用例执行完成后，再继续执行fixture中yield关键字之后的部分。比如：参照下面统计覆盖率的代码，倒数第四行的 rvc_expand(rvc_expander, generate_rvc_instructions(start, end))，其中的rvc_expander就是我们在fixture中定义的方法名，也就是yield返回的对象。\n4. 统计覆盖率 以下内容位于ut_frontend/ifu/rvc_expander/classical_version/test_rvc_expander.py\nN = 10 T = 1\u003c\u003c16 @pytest.mark.toffee_tags(TAG_LONG_TIME_RUN) @pytest.mark.parametrize(\"start,end\", [(r*(T//N), (r+1)*(T//N) if r \u003c N-1 else T) for r in range(N)]) def test_rvc_expand_16bit_full(rvc_expander, start, end): \"\"\"Test the RVC expand function with a full compressed instruction set Description: Perform an expand check on 16-bit compressed instructions within the range from 'start' to 'end'. \"\"\" # Add check point: RVC_EXPAND_RANGE to check expander input range. # When run to here, the range[start, end] is covered covered = -1 g.add_watch_point(rvc_expander, { \"RANGE[%d-%d]\"%(start, end): lambda _: covered == end }, name = \"RVC_EXPAND_ALL_16B\", dynamic_bin=True) # Reverse mark function to the check point g.mark_function(\"RVC_EXPAND_ALL_16B\", test_rvc_expand_16bit_full, bin_name=\"RANGE[%d-%d]\"%(start, end)) # Drive the expander and check the result rvc_expand(rvc_expander, generate_rvc_instructions(start, end)) # When go to here, the range[start, end] is covered covered = end g.sample() # 覆盖率采样 在定义了覆盖率之后，还需要在测试用例中进行覆盖率统计。上述代码中，在测试用例中使用add_watch_point添加了一个功能检查点rvc_expander，并在后面进行了标记和采样,而且在最后一样对覆盖率进行了采样。 覆盖率采样，实际上是通过回调函数触发了一次add_watch_point中bins的判断，当其中bins的判断结果为True时，就会统计一次Pass。\n编写测试环境：toffee版本 使用python语言进行的测试可以通过引入我们的开源测试框架toffee来得到更好的支持。\ntoffee的官方教程可以参考这里。\nbundle：快捷DUT封装 toffee通过Bundle实现了对DUT的绑定。toffee提供了多种建立Bundle与DUT绑定的方法。相关代码\n手动绑定 toffee框架下，用于支持绑定引脚的最底层类是Signal，其通过命名匹配的方式和DUT中的各个引脚进行绑定。相关代码参照ut_frontend/ifu/rvc_expander/toffee_version。\n以最简单的RVCExpander为例，其io引脚形如：\nmodule RVCExpander( input [31:0] io_in, input io_fsIsOff, output [31:0] io_out_bits, output io_ill ); 一共四个信号，io_in, io_fsIsOff, io_out_bits, io_ill。我们可以抽取共同的前缀，比如\"io_\"（不过由于in在python中有其他含义，其不能直接作为变量名，虽然可以使用setattr 和getattr方法来规避这个问题，但是出于代码简洁的考虑，我们只选取\"io\"作为前缀），将后续部分作为引脚名定义在对应的Bundle类中：\nclass RVCExpanderIOBundle(Bundle): _in, _fsIsOff ,_out_bits,_ill = Signals(4) 然后在更高一级的Env或者Bundle中，采取from_prefix的方式完成前缀的绑定：\nself.agent = RVCExpanderAgent(RVCExpanderIOBundle.from_prefix(\"io\").bind(dut)) 自动定义Bundle 实际上，Bundle类的定义也不一定需要写明，可以仅仅通过前缀绑定：\nself.io = toffee.Bundle.from_prefix(\"io_\", self.dut) # 通过 Bundle 使用前缀关联引脚 self.bind(self.dut) 如果Bundle的from_prefix方法传入dut，其将根据前缀和DUT的引脚名自动生成引脚的定义，而在访问的时候，使用dict访问的思路即可：\nself.io[\"in\"].value = instr self.io[\"fsIsOff\"].value = False Bundle代码生成 toffee框架的scripts提供了两个脚本。\nbundle_code_gen.py脚本主要提供了三个方法：\ndef gen_bundle_code_from_dict(bundle_name: str, dut, dict: dict, max_width: int = 120) def gen_bundle_code_from_prefix(bundle_name: str, dut, prefix: str = \"\", max_width: int = 120): def gen_bundle_code_from_regex(bundle_name: str, dut, regex: str, max_width: int = 120): 通过传入dut和生成规则（包括dict、prefix、regex三种），自动生成对应的bundle代码。\n而bundle_code_intel_gen.py则解析picker生成的signals.json文件，自动生成层次化的bundle代码。可以直接在命令行调用：\npython bundle_code_intel_gen.py [signal] [target] 如发现自动生成脚本存在bug，欢迎提issue以便我们修正。\nAgent：驱动方法 如果说Bundle是将DUT的数据职责进行抽象的话，那么Agent则是将DUT的行为职责封装为一个个接口。简单地说，Agent通过封装多个对外开放的方法，将多组IO操作抽象为一个具体的行为：\nclass RVCExpanderAgent(Agent): def __init__(self, bundle:RVCExpanderIOBundle): super().__init__(bundle) self.bundle = bundle @driver_method() async def expand(self, instr, fsIsOff): # 传入参数：RVC指令和fs.status使能情况 self.bundle._in.value = instr # 引脚赋值 self.bundle._fsIsOff.value = fsIsOff # 引脚赋值 await self.bundle.step() # 推动时钟 return self.bundle._out_bits.value, # 返回值：扩展后指令 self.bundle._ill.value # 返回值：指令合法校验 譬如，RVCExpander的指令扩展功能接收输入的指令（可能为RVI指令，也可能为RVC指令）和CSR对fs.status的使能情况。我们将这个功能抽象为expand方法，提供除self以外的两个参数。同时，指令扩展最终将会返回传入指令对应的RVI指令和该指令是否合法的判断，对应地，该方法也返回这两个值。\nEnv：测试环境 class RVCExpanderEnv(Env): def __init__(self, dut:DUTRVCExpander): super().__init__() dut.io_in.xdata.AsImmWrite() dut.io_fsIsOff.xdata.AsImmWrite() # 设置引脚写入时机 self.agent = RVCExpanderAgent(RVCExpanderIOBundle.from_prefix(\"io\").bind(dut)) # 补全前缀，绑定DUT 覆盖率定义 定义覆盖率组的方式和前述方式类似，这里就不再赘述了。\n测试套件定义 测试套件的定义略有不同：\n@toffee_test.fixture async def rvc_expander(toffee_request: toffee_test.ToffeeRequest): import asyncio version_check() dut = toffee_request.create_dut(DUTRVCExpander) start_clock(dut) init_rvc_expander_funcov(dut, gr) toffee_request.add_cov_groups([gr]) expander = RVCExpanderEnv(dut) yield expander cur_loop = asyncio.get_event_loop() for task in asyncio.all_tasks(cur_loop): if task.get_name() == \"__clock_loop\": task.cancel() try: await task except asyncio.CancelledError: break 由于toffee提供了更强大的测试覆盖率管理功能，因此不需要手动设置行覆盖率。同时，由于toffee的时钟机制，建议在套件代码最后额外检查任务是否全部结束。\n","categories":"","description":"","excerpt":"确定目录结构 UT(Unit Test, 单元测试)所在的目录位置的层级结构应该与名称一致，例 …","ref":"/UnityChipForXiangShan/docs/03_add_test/02_build_env/","tags":"","title":"构建测试环境"},{"body":"命名要求 所有测试用例文件请以test_*.py的方式进行命名，*用测试目标替换（例如test_rvc_expander.py）。所有测试用例也需要以test_前缀开头。用例名称需要具有明确意义。\n命名举例如下：\ndef test_a(): # 不合理，无法通过a判断测试目标 pass def test_rvc_expand_16bit_full(): # 合理，可以通过用例名称大体知道测试内容 pass 使用 Assert 在每个测试用例中，都需要通过assert来判断本测试是否通过。 pytest统计的是assert语句的结果，因此assert语句需要保证能够通过。\n以下内容位于ut_frontend/ifu/rvc_expander/classical_version/test_rvc_expander.py中：\ndef rvc_expand(rvc_expander, ref_insts, is_32bit=False, fsIsOff=False): \"\"\"compare the RVC expand result with the reference Args: rvc_expander (warpper): the fixture of the RVC expander ref_insts (list[int]]): the reference instruction list \"\"\" find_error = 0 for insn in ref_insts: insn_disasm = disasmbly(insn) value, instr_ex = rvc_expander.expand(insn, fsIsOff) if is_32bit: assert value == insn, \"RVC expand error, 32bit instruction need to be the same\" if (insn_disasm == \"unknown\") and (instr_ex == 0): debug(f\"find bad inst:{insn}, ref: 1, dut: 0\") find_error +=1 elif (insn_disasm != \"unknown\") and (instr_ex == 1): if (instr_filter(insn_disasm) != 1): debug(f\"find bad inst:{insn},disasm:{insn_disasm}, ref: 0, dut: 1\") find_error +=1 assert 0 == find_error, \"RVC expand error (%d errros)\" % find_error 编写注释 每个测试用例都需要添加必要的说明和注释，需要满足Python 注释规范。\n测试用例说明参考格式：\ndef test_\u003cname\u003e(a: type_a, b: type_b): \"\"\"Test abstract Args: a (type_a): description of arg a. b (type_b): description of arg b. Detailed test description here (if need). \"\"\" ... 用例管理 为了方便测试用例管理，可通过 toffee-test 提供的@pytest.mark.toffee_tags标签功能，请参考 本网站的其他部分和toffee-test。\n参考用例 如果很多测试用例（Test）具有相同的操作，该公共操作部分可以提炼成一个通用函数。以 RVCExpander 验证为例，可以把压缩指令的展开与参考模型（disasm）的对比封装成以下函数：\n以下内容位于ut_frontend/ifu/rvc_expander/classical_version/test_rvc_expander.py中：\ndef rvc_expand(rvc_expander, ref_insts, is_32bit=False, fsIsOff=False): \"\"\"compare the RVC expand result with the reference Args: rvc_expander (warpper): the fixture of the RVC expander ref_insts (list[int]]): the reference instruction list \"\"\" find_error = 0 for insn in ref_insts: insn_disasm = disasmbly(insn) value, instr_ex = rvc_expander.expand(insn, fsIsOff) if is_32bit: assert value == insn, \"RVC expand error, 32bit instruction need to be the same\" if (insn_disasm == \"unknown\") and (instr_ex == 0): debug(f\"find bad inst:{insn}, ref: 1, dut: 0\") find_error +=1 elif (insn_disasm != \"unknown\") and (instr_ex == 1): if (instr_filter(insn_disasm) != 1): debug(f\"find bad inst:{insn},disasm:{insn_disasm}, ref: 0, dut: 1\") find_error +=1 assert 0 == find_error, \"RVC expand error (%d errros)\" % find_error 在上述公共部分中有 assert，因此调用该函数的 Test 也能提过该 assert 判断运行结果是否提过。\n在测试用例的开发过程中，通常存在大量的调试工作，为了让验证环境快速就位，需要编写一些“冒烟测试”进行调试。RVCExpander 展开 16 位压缩指令的冒烟测试如下：\n@pytest.mark.toffee_tags(TAG_SMOKE) def test_rvc_expand_16bit_smoke(rvc_expander): \"\"\"Test the RVC expand function with 1 compressed instruction\"\"\" rvc_expand(rvc_expander, generate_rvc_instructions(start=100, end=101)) 为了方便进行管理，上述测试用例通过toffee_tags标记上了 SMOKE 标签。它的输入参数为rvc_expander，则在在运行时，会自动调用对应同名的fixture进行该参数的填充。\nRVCExpander 展开 16 位压缩指令的测试目标是对 2^16 所有压缩指令进行遍历，检测所有情况是否都与参考模型 disasm 一致。在实现上，如果仅仅用一个 Test 进行遍历，则需要耗费大量时间，为此我们可以利用 PyTest 提供的parametrize对 test 进行参数化配置，然后通过pytest-xdist插件并行执行：\n以下内容位于ut_frontend/ifu/rvc_expander/classical_version/test_rvc_expander.py中：\nN = 10 T = 1\u003c\u003c16 @pytest.mark.toffee_tags(TAG_LONG_TIME_RUN) @pytest.mark.parametrize(\"start,end\", [(r*(T//N), (r+1)*(T//N) if r \u003c N-1 else T) for r in range(N)]) def test_rvc_expand_16bit_full(rvc_expander, start, end): \"\"\"Test the RVC expand function with a full compressed instruction set Description: Perform an expand check on 16-bit compressed instructions within the range from 'start' to 'end'. \"\"\" # Add check point: RVC_EXPAND_RANGE to check expander input range. # When run to here, the range[start, end] is covered g.add_watch_point(rvc_expander, { \"RANGE[%d-%d]\"%(start, end): lambda _: True }, name = \"RVC_EXPAND_ALL_16B\").sample() # Reverse mark function to the check point g.mark_function(\"RVC_EXPAND_ALL_16B\", test_rvc_expand_16bit_full, bin_name=\"RANGE[%d-%d]\"%(start, end)) # Drive the expander and check the result rvc_expand(rvc_expander, generate_rvc_instructions(start, end)) 在上述用例中定义了参数化参数start, end，用来指定压缩指令的开始值和结束值，然后通过装饰器@pytest.mark.parametrize对他们进行分组赋值。变量 N 可以指定将目标数据进行分组的组数，默认设置为 10 组。在运行时用例test_rvc_expand_16bit_full会展开为test_rvc_expand_16bit_full[0-6553]至test_rvc_expand_16bit_full[58977-65536]10 个测试用例运行。\n","categories":"","description":"","excerpt":"命名要求 所有测试用例文件请以test_*.py的方式进行命名，*用测试目标替换（例如test_rvc_expander.py）。所有测试用 …","ref":"/UnityChipForXiangShan/docs/03_add_test/03_add_test/","tags":"","title":"添加测试用例"},{"body":"代码覆盖率是一项评价指标，它衡量了被测代码中哪些部分被执行了，哪些部分没有被执行。通过统计代码覆盖率，可以评估测试的有效性和覆盖程度。\n代码覆盖率包括：\n行覆盖率(line coverage): 被测代码中被执行的行数，最简单的指标，一般期望达到 100%。 条件覆盖率(branch coverage): 每一个控制结构的每个分支是否均被执行。例如，给定一个 if 语句，其 true 和 false 分支是否均被执行？ 有限状态机覆盖率(fsm coverage): 状态机所有状态是否都达到过。 翻转覆盖率(toggle coverage): 统计被测代码中被执行的翻转语句，检查电路的每个节点是否都有 0 -\u003e 1 和 1 -\u003e 0 的跳变。 路径覆盖率(path coverage): 检查路径的覆盖情况。在 always 语句块和 initial 语句块中，有时会使用 if … else 和 case 语句，在电路结构上便会产生一系列的数据路径。。 *我们主要使用的模拟器是 Verilator,优先考虑行覆盖率。Verilator 支持覆盖率统计，因此我们在构建 DUT 时，如果要开启覆盖率统计，需要在编译选项中添加-c参数。\n本项目中相关涉及位置 开启覆盖率需要在编译时（使用 picker 命令时）加上“-c”参数（参考 picker 的参数解释），同时在文件中设置启用行覆盖率，这样在使用 toffee 测试时，才能够生成覆盖率统计文件。\n结合上面的描述，在本项目中也就是编译，编写和启用行覆盖率函数和测试的时候会涉及到代码覆盖率：\n添加编译脚本部分 编写编译脚本\n# 省略前面 if not os.path.exists(get_root_dir(\"dut/RVCExpander\")): info(\"Exporting RVCExpander.sv\") s, out, err = exe_cmd(f'picker export --cp_lib false {get_rtl_dir(\"rtl/RVCExpander.sv\", cfg=cfg) } --lang python --tdir {get_root_dir(\"dut\")}/ -w rvc.fst -c') assert s, \"Failed to export RVCExpander.sv: %s\\n%s\" % (out, err) # 省略后面 在s, out, err=...这一行，我们使用 picker 命令，并且开启代码了覆盖率(命令最后的\"-c\"参数)。\n设置目标覆盖文件(line_coverage_files 函数)\n按照需求编写line_coverage_files(cfg) -\u003e list[str]函数，并且开启测试结果处理(doc_result.disable = False)让其被调用。\n构建测试环境部分 定义必要 fixture\nset_line_coverage(request, coverage_file) # 把生成的代码覆盖率文件告诉 toffee-report 通过函数toffee-test.set_line_coverage把覆盖率文件传递给 toffe-test，这样其才能够收集数据，以便于后面生成的报告带有行覆盖率。\n忽略指定统计 有时候，我们可能需要手动指定某些内容不参与覆盖率统计。例如有些是不需要被统计的，有些统计不到是正常的。这时候我们就可以忽略这些内容，这对优化覆盖率报告或调试非常有帮助。 目前我们的框架可以使用两种方式来实现忽略统计的功能：\n1.通过 verilator 指定忽略统计的内容 使用 verilator_coverage_off/on 指令 Verilator 支持通过注释指令来忽略特定代码段的覆盖率统计。例如，使用如下的指令：\n// *verilator coverage_off* // 忽略统计的代码段 ... // *verilator coverage_on* 举个例子\nmodule example; always @(posedge clk) begin // *verilator coverage_off* if (debug_signal) begin $display(\"This is for debugging only\"); end // *verilator coverage_on* if (enable) begin do_something(); end end endmodule 在上述示例中，debug_signal 部分的代码将不会计入覆盖率统计，而 enable 部分仍然会被统计。\n更多 verilator 的忽略统计方式请参照verilator 官方文档\n2.通过 toffee 指定需要过滤掉的内存 def set_line_coverage(request, datfile, ignore=[]): \"\"\"Pass Args: request (pytest.Request): Pytest的默认fixture， datfile (string): DUT生成的 ignore (list[str]): 覆盖率过滤文件/或者文件夹 \"\"\" ignore 参数可以指定在覆盖率文件中需要过滤掉的内容，例如：\n... set_line_coverage(request, coverage_file, get_root_dir(\"scripts/frontend_ifu_rvc_expander\")) 在统计覆盖率时，会在\"scripts/frontend_ifu_rvc_expander\"目录中搜索到line_coverage.ignore文件，然后按其中每行的通配符进行过滤。\n# Line covarge ignore file # ignore Top file */RVCExpander_top*% 上述文件表示，在统计覆盖率时，会忽略掉包含\"RVCExpander_top\"关键字的文件（实际上是收集了对应的数据，但是最后统计的时候忽略了）。\n查看统计结果 在经过前面所有步骤之后，包括准备测试环境中的下载 RTL 代码、编译 DUT、编辑配置 ；添加测试中的添加编译脚本,构建测试环境、添加测试用例。\n现在运行测试,之后就默认在out/report目录会生成 html 版本的测试报告。\n也可以在进度概述图形下方的“当前版本”选择对应的测试报告(按照测试时间命名)，然后点击右侧链接即可查看统计结果。\n","categories":"","description":"","excerpt":"代码覆盖率是一项评价指标，它衡量了被测代码中哪些部分被执行了，哪些部分没有被执行。通过统计代码覆盖率，可以评估测试的有效性和覆盖程度。\n代码 …","ref":"/UnityChipForXiangShan/docs/03_add_test/04_cover_line/","tags":"","title":"代码覆盖率"},{"body":"功能覆盖率（Functional Coverage）是一种用户定义的度量标准，用于度量验证中已执行的设计规范的比例。功能覆盖率关注的是设计的功能和特性是否被测试用例覆盖到了。\n反标是指将功能点与测试用例对应起来。这样，在统计时，就能看到每个功能点对应了哪些测试用例，从而方便查看哪些功能点用的测试用例多，哪些功能点用的测试用例少，有利于后期的测试用例优化。\n本项目中相关涉及位置 功能覆盖率需要我们先定义了才能统计，主要是在构建测试环境的时候涉及。\n在构建测试环境中：\n定义功能覆盖率： 创建了功能覆盖率组,添加观察点和反标 定义必要 fixture： 把统计结果传递给 toffee-report 统计覆盖率： 添加观察点和反标 其他：\n在 Test case 中使用，可以在每个测试用例里也编写一个功能点。 功能覆盖率使用流程 指定 Group 名称 测试报告通过 Group 名字和 DUT 名字进行匹配，利用 comm.UT_FCOV 获取 DUT 前缀，例如在 Python 模块ut_frontend/ifu/rvc_expander/classical_version/env/rvc_expander_wrapper.py中进行如下调用：\nfrom comm import UT_FCOV # 本模块名为：ut_frontend.ifu.rvc_expander.classical_version.env.rvc_expander_wrapper # 通过../../../去掉了classical_version和上级模块env，rvc_expander_wrapper # UT_FCOV会默认去掉前缀 ut_ g = fc.CovGroup(UT_FCOV(\"../../../CLASSIC\")) # name = UT_FCOV(\"../../../CLASSIC\") name 的值为frontend.ifu.rvc_expander.CLASSIC，在最后统计结果时，会按照最长前缀匹配到目标 UT（即匹配到：frontend.ifu.rvc_expander 模块）\n创建覆盖率组 使用toffee的funcov可以创建覆盖率组。\nimport toffee.funcov as fc # 使用上面指定的GROUP名字 g = fc.CovGroup(name) 这两步也可以合成一句g = fc.CovGroup(UT_FCOV(\"../../../CLASSIC\"))。 创建的g对象就表示了一个功能覆盖率组，可以使用其来提供观察点和反标。\n添加观察点和反标 在每个测试用例内部，可以使用add_watch_point（add_cover_point是其别名，二者完全一致）来添加观察点和mark_function来添加反标。 观察点是，当对应的信号触发了我们在观察点内部定义的要求后，这个观察点的名字（也就是功能点）就会被统计到功能覆盖率中。 反标是，将功能点和测试用例进行关联，这样在统计时，就能看到每个功能点对应了哪些测试用例。\n对于观察点的位置，需要根据实际情况来定，一般来说，在测试用例外直接添加观察点是没有问题的。 不过有时候我们可以更加的灵活。\n在测试用例之外（decode_wrapper.py中） def init_rvc_expander_funcov(expander, g: fc.CovGroup): \"\"\"Add watch points to the RVCExpander module to collect function coverage information\"\"\" # 1. Add point RVC_EXPAND_RET to check expander return value: # - bin ERROR. The instruction is not illegal # - bin SUCCE. The instruction is not expanded g.add_watch_point(expander, { \"ERROR\": lambda x: x.stat()[\"ilegal\"] == False, \"SUCCE\": lambda x: x.stat()[\"ilegal\"] != False, }, name = \"RVC_EXPAND_RET\") # 5. Reverse mark function coverage to the check point def _M(name): # get the module name return module_name_with(name, \"../../test_rv_decode\") # - mark RVC_EXPAND_RET g.mark_function(\"RVC_EXPAND_RET\",_M([\"test_rvc_expand_16bit_full\", \"test_rvc_expand_32bit_full\", \"test_rvc_expand_32bit_randomN\"]), bin_name=[\"ERROR\", \"SUCCE\"]) # The End return None 这个例子的第一个g.add_watch_point是放在测试用例之外的，因为它和现有的测试用例没有直接关系，放在测试用例之外反而更加方便。添加观察点之后，只要add_watch_point方法中的bins条件触发了，我们的toffee-test框架就能够收集到对应的功能点。\n在测试用例之中（test_rvc_expander.py中） N=10 T=1\u003c\u003c32 @pytest.mark.toffee_tags([TAG_LONG_TIME_RUN, TAG_RARELY_USED]) @pytest.mark.parametrize(\"start,end\", [(r*(T//N), (r+1)*(T//N) if r \u003c N-1 else T) for r in range(N)]) def test_rvc_expand_32bit_full(rvc_expander, start, end): \"\"\"Test the RVC expand function with a full 32 bit instruction set Description: Randomly generate N 32-bit instructions for each check, and repeat the process K times. \"\"\" # Add check point: RVC_EXPAND_ALL_32B to check instr bits. covered = -1 g.add_watch_point(rvc_expander, {\"RANGE[%d-%d]\"%(start, end): lambda _: covered == end}, name = \"RVC_EXPAND_ALL_32B\", dynamic_bin=True) # Reverse mark function to the check point g.mark_function(\"RVC_EXPAND_ALL_32B\", test_rvc_expand_32bit_full) # Drive the expander and check the result rvc_expand(rvc_expander, list([_ for _ in range(start, end)])) # When go to here, the range[start, end] is covered covered = end g.sample() 这个例子的观察点在测试用例里面，因为这里的start和end是由pytest.mark.parametrize来决定的，数值不是固定的，所以我们需要在测试用例里面添加观察点。\n采样 在上一个例子的最后，我们调用了g.sample()，这个函数的作用是告诉toffee-test，add_watch_point里的bins已经执行过了，判断一下是不是True，是的话就为这个观察点记录一次Pass。\n有手动就有自动。我们可以在构建测试环境时，在定义fixture中加入StepRis(lambda x: g.sample()),这样就会在每个时钟周期的上升沿自动采样。\n以下内容来自ut_backend/ctrl_block/decode/env/decode_wrapper.py 。\n@pytest.fixture() def decoder(request): # before test init_rv_decoder_funcov(g) func_name = request.node.name # If the output directory does not exist, create it output_dir_path = get_out_dir(\"decoder/log\") os.makedirs(output_dir_path, exist_ok=True) decoder = Decode(DUTDecodeStage( waveform_filename=get_out_dir(\"decoder/decode_%s.fst\"%func_name), coverage_filename=get_out_dir(\"decoder/decode_%s.dat\"%func_name), )) decoder.dut.InitClock(\"clock\") decoder.dut.StepRis(lambda x: g.sample()) yield decoder # after test decoder.dut.Finish() coverage_file = get_out_dir(\"decoder/decode_%s.dat\"%func_name) if not os.path.exists(coverage_file): raise FileNotFoundError(f\"File not found: {coverage_file}\") set_line_coverage(request, coverage_file, get_root_dir(\"scripts/backend_ctrlblock_decode\")) set_func_coverage(request, g) g.clear() 如上面所示，我们在yield之前调用了g.sample()，这样就会在每个时钟周期的上升沿自动采样。\nStepRis函数的作用是在每个时钟周期的上升沿执行传入的函数，详情可参照picker使用介绍\n","categories":"","description":"","excerpt":"功能覆盖率（Functional Coverage）是一种用户定义的度量标准，用于度量验证中已执行的设计规范的比例。功能覆盖率关注的是设计的 …","ref":"/UnityChipForXiangShan/docs/03_add_test/05_cover_func/","tags":"","title":"功能覆盖率"},{"body":"前端模块验证文档\n","categories":"","description":"","excerpt":"前端模块验证文档\n","ref":"/UnityChipForXiangShan/docs/98_ut/01_frontend/","tags":"","title":"Frontend"},{"body":" 当前版本： 20241223133801-main-2a8c1ab351e4ea786c55435dd18f60c0c523cc8a 20241220061304-main-187577e01df03a8ff7ffc828b79070bd5e582436 20241218062220-main-a866912fc3a6df3d17b857a1a898f6f9e5c5957c 20241217100236-main-53f30b46ed6e6eeb261894c4a71a60f69777ef8c 20241216044913-main-7d081626cef0910d9490d169053ee32a8e0c51db 20241213025923-main-d09f78a58caeeb64347ca2587f1f3f2b2a59e6a0 20241212091919-main-c54c0c2e590cf334b986f8ef3eacc53329f4ed1e 20241204085334-main-335e7e0d4ffc2c7a17f8d95e7c75cbd428b14a61 20241204062337-main-f8903a8c4021ba3e310bf097b07147892729341c 20241201142531-main-365f53f574ba5c6875b3389824a3c898c642ed2b 20241129112435-main-79ccae9d5df92c4e167547564b97bd8846b7ecb6 20241129111104-main-8e0cb45a86ec3ffd779723e17ede379081431c42 查看测试报告 香山昆明湖架构各个模块验证情况如上图中所示。总统计数据如下：\n总测试用例数（Total Cases）： - 测试用例通过数（Passed Cases）： - 测试用例通过率（Passed Rate）： - 测试用例未过数（Failed Cases）： - 测试用例跳过数（Skipped Cases）： - 测试用例跳过率（Skip Rate）： - 总功能覆盖点数（Function Coverage）： - 覆盖点已覆盖数（Covered Functions）： - 覆盖点已覆盖率（Covered Rate）： - 总代码行覆盖率（Total Lines）： - 总代码行覆盖数（Covered Lines）： - 总代码行覆盖率（Covered Rate）： - *总代码行会随着DUT的增加而不断增加，因此：总代码行覆盖率不是最终覆盖率\n其他内容快捷连接：\nDUT文档与功能 待确认bug列表 已发现bug列表 已修复bug列表 正在进行的任务列表 已完成的任务列表 香山昆明湖DUT验证进展 注：本文档中的统计信息根据测试结果自动生成\n数据自动更新日期：1970-01-01 00:00:00 ","categories":"","description":"","excerpt":" 当前版本： 20241223133801-main-2a8c1ab351e4ea786c55435dd18f60c0c523cc8a …","ref":"/UnityChipForXiangShan/docs/","tags":"","title":"进度概述"},{"body":" 子模块：F3PreDecoder模块简介 这个模块是从PreDecoder中时序优化出来的，负责判定CFI指令的类型\nF3PreDecoder功能介绍 CFI指令类型判定 要想确定CFI指令类型，只需要分别尝试匹配JAL、JALR、BR和他们的RVC版本即可，注意，RVC的EBREAK 不应该被视为CFI指令。在匹配的过程中，自然CFI指令的类型就被甄别出来了。在这一步中，我们将所有指令分到四类brType中。\nret、call判定 然后，我们需要判断是否为call或者ret，这可以通过rd和rs的取值来考察，具体来说，RISCV的RVI指令中，提供了对rd和rs取值的约定， 当二者取到link寄存器的序号（x1为标准的返回地址寄存器，x5为备用的link寄存器），分别对应着压栈和弹栈。详细的对应情况如下：\nF3PreDecoder子模块测试点和功能点 功能点1 CFI指令类型判定 要想确定CFI指令类型，只需要分别尝试匹配JAL、JALR、BR和他们的RVC版本即可，注意，RVC的EBREAK 不应该被视为CFI指令。\n序号 名称 描述 1.1 非CFI判定 对传入的非CFI指令（包括RVC.EBREAK），应该判定为类型0 1.2 BR判定 对传入的BR指令，应该判定为类型1 1.3 JAL判定 对传入的JAL指令，应该判定为类型2 1.4 JALR判定 对传入的JALR指令，应该判定为类型3 功能点2 ret、call判定 然后，需要判断是否为call或者ret，这可以通过rd和rs的取值来考察。当然，首先必须得满足无条件跳转指令。\n对于类型2，只有为RVC指令且目的寄存器rd为link寄存器（x1或x5）时，才为Call。\n对于类型3，当rd为link寄存器时，必为Call。当rs为link寄存器且rd不为时，必为Ret。\n序号 名称 描述 2.1 非CFI和BR不判定 对传入的非CFI和BR指令，都不应判定为call或者ret 2.2.1.1 RVC.JAL判定call 对传入的RVC.JAL指令，当rd设置为1或5，应当判定该指令为call 2.2.1.2 RVC.JAL例外 对传入的RVC.JAL指令，当rd设置为1和5之外的值，不应当判定该指令为call或ret 2.2.2 RVI.JAL不判定 对传入的RVI.JAL指令，无论什么情况都不能判定为call或ret 2.3 JALR和rd为link 传入JALR指令，并且rd为1或5，无论其他取值，都应判定为call 2.3 JALR且仅rs为link 传入JALR指令，rd不为1和5，rs为1或5，应判定为ret 2.3 JALR无link 对传入的JALR指令，若rd和rs均不为link，则不应判定为ret和cal 测试点汇总 序号 功能 名称 描述 1.1 CFI指令类型判定 非CFI判定 对传入的非CFI指令（包括RVC.EBREAK），应该判定为类型0 1.2 CFI指令类型判定 BR判定 对传入的BR指令，应该判定为类型1 1.3 CFI指令类型判定 JAL判定 对传入的JAL指令，应该判定为类型2 1.4 CFI指令类型判定 JALR判定 对传入的JALR指令，应该判定为类型3 2.1 ret、call判定 非CFI和BR不判定 对传入的非CFI和BR指令，都不应判定为call或者ret 2.2.1.1 ret、call判定 RVC.JAL判定call 对传入的RVC.JAL指令，当rd设置为1或5，应当判定该指令为call 2.2.1.2 ret、call判定 RVC.JAL例外 对传入的RVC.JAL指令，当rd设置为1和5之外的值，不应当判定该指令为call或ret 2.2.2 ret、call判定 RVI.JAL不判定 对传入的RVI.JAL指令，无论什么情况都不能判定为call或ret 2.3 ret、call判定 JALR和rd为link 传入JALR指令，并且rd为1或5，无论其他取值，都应判定为call 2.3 ret、call判定 JALR且仅rs为link 传入JALR指令，rd不为1和5，rs为1或5，应判定为ret 2.3 ret、call判定 JALR无link 对传入的JALR指令，若rd和rs均不为link，则不应判定为ret和call ","categories":"","description":"","excerpt":" 子模块：F3PreDecoder模块简介 这个模块是从PreDecoder中时序优化出来的，负责判定CFI …","ref":"/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/02_f3predecoder/","tags":"","title":"F3PreDecoder"},{"body":" FrontendTrigger子模块 该子模块的主要作用是在前端设置硬件断点和检查。\n该模块的输入pc有一个隐含条件，那就是这个pc是通过ftq传递的startAddr计算出来的。\nFrontendTrigger功能介绍 断点设置和断点检查 在IFU的FrontendTrigger模块里共4个Trigger，编号为0,1,6,8，每个Trigger的配置信息（断点类型、匹配地址等）保存在tdata寄存器中。\n当软件向CSR寄存器tselect、tdata1/2写入特定的值时，CSR会向IFU发送tUpdate请求，更新FrontendTrigger内的tdata寄存器中的配置信息。 目前前端的Trigger仅可以配置成PC断点（mcontrol(tdata1)寄存器的select位为0；当select=1时，该Trigger将永远不会命中，且不会产生异常）。\n在取指时，IFU的F3流水级会向FrontendTrigger模块发起查询并在同一周期得到结果。后者会对取指块内每一条指令在每一个Trigger上做检查， 当指令的PC和tdata2寄存器内容的关系满足mcontrol的match位所指示的关系（香山支持match位为0、2、3，对应等于、大于、小于）时， 该指令会被标记为Trigger命中，随着执行在后端产生断点异常，进入M-Mode或调试模式。\n链式断点 前端的0、6、8号Trigger支持Chain功能。 当它们对应的Chain位被置时，只有当该Trigger和编号在它后面一位的Trigger同时命中，且timing配置相同时，处理器才会产生异常。其中可以和6,8号trigger实现chain功能的7,9号trigger在后端访存部件中\nFrontEndTrigger测试点和功能点 功能点1 设置断点和断点检查 FrontEndTrigger目前仅支持设置PC断点，这通过设置断点的tdata1寄存器的select位为0实现。 同时，tdata2寄存器的mcontrol位负责设置指令PC和tdata2寄存器的地址需要满足的关系， 关系满足时，该指令会被标记为trigger命中。\n所以，基于以上功能描述，我们需要测试：\nselect位为1时，断点是否永远不会触发。\nselect位为0时，当PC和tdata2的数据的关系满足tdata2的match位时，是否会设置断点。\nselect位为0时，当PC和tdata2的数据的关系不满足tdata2的match位时，断点是否一定不会触发。\n综上所述，我们在这一功能点设计的测试点如下：\n序号 名称 描述 1.1 select1判定 给定tdata1的select位为1，随机构造其它输入，检查断点是否没有触发 1.2.1 select0关系匹配判定 给定tdata1的select位为0，构造PC与tdata2数据的关系同tdata2的match位匹配的输入，检查断点是否触发 1.2.2 select0关系不匹配判定 给定tdata1的select位为0，构造PC与tdata2数据的关系同tdata2的match位不匹配的输入，检查断点是否触发 功能点2 链式断点 当某一个trigger的chain位被置后，当其后的trigger的chain位未设置，且两个trigger均命中并且两个trigger的timing相同时，后一个trigger才会触发。\n对0号trigger，不需要考虑链式的情况\n由此，我们可以设置几种测试点：\n序号 名称 描述 2.1 chain位测试 对每个trigger，在满足PC断点触发条件的情况下，设置chain位，检查断点是否一定不触发。 2.2 timing测试 对两个trigger，仅设置前一个trigger的chain位，且两trigger的timing位不同，随机设置PC等，测试后一个trigger是否一定不触发。 2.3.1 未命中测试 对两个trigger，仅设置前一个trigger的chain位，且两trigger的timing位相同，设置后一个trigger命中而前一个未命中，检查后一个trigger是否一定不触发。 2.3.2 命中测试 对两个trigger，仅设置前一个trigger的chain位，且两trigger的timing位相同且均命中，检查后一个trigger是否触发。 测试点汇总 序号 功能 名称 描述 1.1 断点设置和检查 select1判定 给定tdata1的select位为1，随机构造其它输入，检查断点是否没有触发 1.2.1 断点设置和检查 select0关系匹配判定 给定tdata1的select位为0，构造PC与tdata2数据的关系同tdata2的match位匹配的输入，检查断点是否触发 1.2.2 断点设置和检查 select0关系不匹配判定 给定tdata1的select位为0，构造PC与tdata2数据的关系同tdata2的match位不匹配的输入，检查断点是否触发 2.1 链式断点 chain位测试 对每个trigger，在满足PC断点触发条件的情况下，设置chain位，检查断点是否一定不触发 2.2 链式断点 timing测试 对两个trigger，仅设置前一个trigger的chain位，且两trigger的timing位不同，随机设置PC等，测试后一个trigger是否一定不触发 2.3.1 链式断点 未命中测试 对两个trigger，仅设置前一个trigger的chain位，且两trigger的timing位相同，设置后一个trigger命中而前一个未命中，检查后一个trigger是否一定不触发 2.3.2 链式断点 命中测试 对两个trigger，仅设置前一个trigger的chain位，且两trigger的timing位相同且均命中，检查后一个trigger是否触发 ","categories":"","description":"","excerpt":" FrontendTrigger子模块 该子模块的主要作用是在前端设置硬件断点和检查。\n该模块的输入pc有一个隐含条件，那就是这个pc是通 …","ref":"/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/05_frontend_trigger/","tags":"","title":"FrontendTrigger"},{"body":"IFU简介 IFU(Instruction Fetch Unit)，取指令单元，负责从内存或ICache取出指令，经过预译码、扩展RVC和预检之后，将指令交给后续译码器进行进一步的译码。\nIFU的子模块包括PreDecode，F3PreDecoder，RVCExpander，PredChecker和FrontendTrigger。\n以下是IFU的架构简图：\nIFU功能介绍 XS_IFU流水级划分 香山的IFU一共分为5个阶段。\nF0阶段：接收FTQ请求，同时告诉FTQ自己已经ready了\nF1阶段：从FTQ请求中先计算出每个指令的pc，half_pc、cut_ptr（这是后续将icache返回的指令码进行切分的依据）\nF2阶段：从icache获取响应数据（缓存行）并校验，提取出异常信息（包括页错误、访问错误、mmio信息）；生成预测到的指令范围（但这并不是一个数字，而是一个用多位表示的bool数组，该位为1表示这一指令在预测块范围内）；从缓存行中，利用上一阶段求出的cut_ptr切分出17×2的初步指令码，最后进行预译码和指令扩展。\nF3阶段：这一阶段主要是对译码阶段的结果进行预检查，以及MMIO状态下的处理逻辑。\nWB（写回）阶段：将预检查的结果写回FTQ，并向IBuffer写指令码和前端信息。\n接收FTQ取指令请求（F0流水级） ​\t在F0流水级，IFU接收来自FTQ以预测块为单位的取指令请求。请求内容包括预测块起始地址、起始地址所在cache line的下一个cache line开始地址、下一个预测块的起始地址、该预测块在FTQ里的队列指针、该预测块有无taken的CFI指令（控制流指令）和该taken的CFI指令在预测块里的位置以及请求控制信号（请求是否有效和IFU是否ready）。每个预测块最多包含32字节指令码，最多为16条指令。IFU需要置位ready驱动FTQ向ICache发送请求。\n指令切分产生初始指令码（F1、F2流水级） F0流水级时，FTQ同时会向ICache发送取缓存行的指令。这是ICache在其S2流水级需要返回的，所以IFU在F2流水级才会得到ICache返回的缓存行。在此之前，IFU会在F1流水线先进行PC的计算，以及计算切分缓存行的指针。\n进入F2流水级，IFU将会针对每个指令，取出对应的异常信息、物理地址、客户物理地址等。同时，根据FTQ的taken信息，IFU将会计算该预测块在无跳转和跳转发生情况下的有效指令范围。无跳转情况下的指令有效范围ftr_range即当前预测块从起始地址到下一个预测块的起始地址的差值。有跳转情况下的指令有效范围jump_range即当前预测块的起始地址到预测块中第一个跳转指令地址的差值。\n最后，IFU需要从缓存行和上一流水级计算的指针，完成对17x2字节初始指令码的拼接。这里的拼接代码可能存在一些迷惑性\nval f2_cache_response_data = fromICache.map(_.bits.data) val f2_data_2_cacheline = Cat(f2_cache_response_data(0), f2_cache_response_data(0)) 在调用cut之前，我们先是从ICache获取了缓存行（ICache返回的缓存行种类已经在ICache中进行了分类讨论，IFU中直接使用即可），然后将第0个缓存数据进行了拼接， 这一操作的原因来自于ICache中对数据的细粒度拆分：\nfetch block可能跨缓存行，但是由于fetch block最大只有34B，如果将两个缓存行（2x64B）都传送给IFU则显得浪费，因此，fetch block的选择由ICache完成。\nICache返回给IFU的并不是直接的预测块，而是带有跨缓存行信息的64字节。\n我们将每个缓存行分为8份，如下所示：\ncacheline 0: |0-7|0-6|0-5|0-4|0-3|0-2|0-1|0-0| cacheline 1: |1-7|1-6|1-5|1-4|1-3|1-2|1-1|1-0| 如果fetch block的起始位置为0-1，则必定不跨缓存行。\n如果fetch block的起始位置为0-6，那么fetch block的位置为0-6~1-2，此时传送的缓存行结构如下：\ncacheline 0: |0-7|0-6|xx|xx|xx|1-2|1-1|1-0| 由此，只要将该缓存行复制一遍，即可获得拼接后的fetch block。\n综上所述，对这两种情况，我们都只需要把返回的cacheline复制一份拼接在一起，从中间截取就可以拿到数据。\n预译码（F2流水级，主要由PreDecode模块完成） 在F2流水级，我们需要将上一步完成切分的指令码交给PreDecode子模块,他的作用主要有二：\n其一是生成预译码信息，包括该指令是否是有效指令的开始、是否是RVC指令、是否是CFI指令、CFI指令类型（branch/jal/jalr/call/ret）、CFI指令的目标地址计算偏移等。输出的预译码信息中brType域的编码如下:\nCFI指令类型 brType类型编码 非CFI 00 branch指令 01 jal指令 10 jalr指令 11 （brType类型一览）\n其二是将初始指令码两两组合之后，得到16x4字节的指令码（从起始地址开始，2字节做地址递增，地址开始的4字节作为一条32位初始指令码）。\n此外，预译码阶段还需要分类讨论，得出两种指令有效向量（起始指令是不是RVI指令的后半部分），并交给IFU进行判断，可以参阅后面的跨预测块32位指令处理部分\n其他功能和详细内容参见PreDecode子模块的描述。\n指令扩展（F3流水级） 这一部分将从PreDecode返回的16条指令码分别送交指令扩展器进行32位指令扩展（RVI保持不变， RVC指令根据手册的规定进行扩充）。\n但是，如果指令非法，需要向IBuffer写入原始指令码。\n预测错误预检查（F3流水级，主要由PreChecker子模块完成） 这一功能是为了将一些不依赖于执行结果的预测错误在早期就发现出来。这一阶段检查五类错误：\njal类型错误：预测块的范围内有jal指令，但是预测器没有对这条指令预测跳转；\nret类型错误：预测块的范围内有ret指令，但是预测器没有对这条指令预测跳转；\n无效指令预测错误：预测器对一条无效的指令（不在预测块范围/是一条32位指令中间）进行了预测；\n非CFI指令预测错误：预测器对一条有效但是不是CFI的指令进行了预测；\n转移目标地址错误：预测器给出的转移目标地址不正确。\n在预检查的最后将会修正之前预测的各个指令的跳转情况。同时，如果存在jal或者ret类型预测错误，还将修正fixedRange——这是指令有效范围向量，可以看作一个bool数组，其中某一位为1也就是对应的指令在这一范围内。\n前端重定向（WB阶段） 如果在预测错误预检查的部分发现了上述的五类错误，那么需要在写回阶段产生一个前端重定向将F3以外的流水级进行冲刷， 从而让BPU能够从正确路径重新开始预测。\n还有一种情况下需要冲刷流水线。在下一节中，如果误判了当前预测块的最后2B为RVI指令的上半部分，则也需要冲刷当前预测块F3之前的流水级。\n跨预测块32位指令处理 因为预测块的长度有限制，因此存在一条RVI指令前后两字节分别在两个预测块的情况。IFU首先在第一个预测块里检查最后2字节是不是一条RVI指令的开始，如果是并且该预测块没有跳转，那么就设置一个标识寄存器f3_lastHalf_valid，告诉接下来的预测块含有后半条指令。在F2预译码时，会产生两种不同的指令有效向量：\n预测块起始地址开始即为一条指令的开始，以这种方式根据后续指令是RVC还是RVI产生指令有效向量\n预测块起始地址是一条RVI指令的中间，以起始地址 + 2位一条指令的开始产生有效向量\n在F3，根据是否有跨预测块RVI标识来决定选用哪种作为最终的指令有效向量，如果f3_lastHalf_valid为高则选择后一种（即这个预测块第一个2字节不是指令的开始）。IFU所做的处理只是把这条指令算在第一个预测块里，而把第二个预测块的起始地址位置的2字节通过改变指令有效向量来无效掉。\n将指令码和前端信息送入IBuffer（F3流水级） F3流水级最终得到经过扩展的32位指令码（或者对于非法指令直接传递原始指令码），以及16条指令中每条指令的例外信息、 预译码信息、FTQ队列中的指针位置、其他后端需要的信息（比如经过折叠的PC）等。IFU除了常规的valid-ready控制信号外， 还会给IBuffer两个特殊的信号：一个是16位的io_toIbuffer_bits_valid（因为我们最后组合出来的指令也是16条， 所以这里每一位刚好也对应一个指令的状态，为1说明是一条指令的开始，为0则是说明是一条指令的中间），标识预测块里有效的指令。 另一个是16位的io_toIbuffer_bits_enqEnable，这个在io_toIbuffer_bits_valid的基础上与上了被修正过的预测块的指令范围fixedRange。 enqEnable为1表示这个2字节指令码是一条指令的开始且在预测块表示的指令范围内。\n除此之外，异常信息也需要写给IBuffer。\n注意一个特例：当且仅当发生guest page fault时，后端需要gpaddr信息，为了节省面积，gpaddr不走正常通路进入ibuffer， 而是随ftqPtr被发送到gpaMem，后端需要时从gpaMem读出。IFU需要保证gpf发生时通向gpaMem的valid拉高、gpaddr正确。\n分支预测overriding冲刷流水线 当FTQ内未缓存足够预测块时，IFU可能直接使用简单分支预测器提供的预测地址进行取指，这种情况下，当精确预测器发现简单预测器错误时，需要通知IFU取消正在进行的取指请求。具体而言，当BPU的S2流水级发现错误时，需要冲刷IFU的F0流水级；当BPU的S3流水级发现错误时，需要冲刷IFU的F0/F1流水级（BPU的简单预测器在S1给出结果，最晚在S3进行overriding，因此IFU的F2/F3流水级一定是最好的预测，不需要冲刷；类似地，不存在BPU S2到IFU F1的冲刷）。\nIFU在收到BPU发送的冲刷请求时，会将F0Ff1流水级上取指请求的指针与BPU发送的冲刷请求的指针进行比较，若冲刷的指针在取指的指针之前，说明当前取指请求在错误的执行路径上，需要进行流水线冲刷；反之，IFU可以忽略BPU发送的这一冲刷请求。\n指令信息和误预测信息写回FTQ（WB阶段） 在F3的下一级WB级，IFU将指令PC、预译码信息、错误预测指令的位置、正确的跳转地址以及预测块的正确指令范围等信息写回FTQ，同时传递该预测块的FTQ指针用以区分不同请求。\n同时，正如前面提到的，IFU检测到预测错误时会进行前端冲刷，同样地，FTQ也需要据此进行冲刷，因此，这也是IFU写回错误信息的意义——可以辅助FTQ判断是否冲刷流水线。\nMMIO处理逻辑 在处理器上电复位时，内存还没有准备好，此时需要从Flash中取指令执行。 这种情况下需要IFU向MMIO总线发送宽度为64位的请求从flash地址空间取指令执行。同时IFU禁止对MMIO总线的推测执行，即IFU需要等到每一条指令执行完成得到准确的下一条指令地址之后才继续向总线发送请求。\n这之后，根据FTQ中的指令地址，决定是否MMIO取指令。\n以上是MMIO状态机的简图。在一开始，处于m_idle状态，如果处于mmio请求的场景，则转换到 m_waitLastCmt，之后只要之前所有的指令都已完成提交——或者这一指令就是第一条指令， 则进入m_sendReq状态将请求发送到InstrUncache模块，发送完成后进入m_waitResp状态。 接收请求后，由于MMIO总线的带宽限制为64位， 因此存在一条指令一次MMIO请求不能取得完整指令码的情况（这是由于MMIO并不支持非对齐访问，具体地说，如果RVI指令的起始地址的[2, 1]两位为b11，则64位总线无法一次传递所有指令），所以需要增加地址进行重发，进入m_sendTLB状态， 再次查询ITLB，如果tlb的pbmt状态和上一条的存在差别，则为访问异常，综合TLB自身的异常结果和根据pbmt判定的访问异常，如果存在异常，则直接把指令和异常信息发到Ibuffer，进入等待，否则进入m_sendPMP状态，向PMP发送请求， 这里需要查看pmp_recheck的结果，如果该请求的mmio状态和上一条的mmio状态不一致，那么说明可能存在访问错误，置为访问异常，否则根据PMP的回复结果决定是否存在PMP异常。 如果存在异常，则将报错信息发送给Ibuffer，直接进入等待。 一切正常的话，进入m_resendReq状态，重新发送请求到InstrUncache模块。 无论是否重发，最后获得完整数据之后，根据地址从64位数据中截取指令码。并以每个预测块一条指令的形式（相当于只有起始地址的指令）发送到IBuffer。 接下来进入m_waitCommit状态等待，直到ROB返回指令已提交的信号即进入m_commited状态，CFI指令由后端发送给FTQ进行冲刷，而顺序指令则由IFU复用前端重定向通路刷新流水线， 同时复用FTQ写回机制，把它当作一条错误预测的指令进行冲刷，重定向到该指令地址 + 2或者+4(根据这条指令是RVI还是RVC选择)\n对于跨缓存行预测块，他们的mmio和pbmt状态应当等同。不匹配的错误应当只在后一个缓存行报告。\nTrigger实现对于PC的硬件断点功能 该工作主要由FrontEndTrigger子模块完成。\nIFU功能点和测试点 功能点1 接收FTQ预测块请求 功能点1.1 F0流水级接收请求 向FTQ报告自己已ready。\n所以，我们只需要在发送请求后检查和ftq相关的的ready情况即可。\n序号 名称 描述 1 ready置位 IFU接收FTQ请求后，设置ready 功能点2 指令切分产生初始指令码 功能点2.1 F1流水级计算信息和切分指针 F1流水级也会计算PC。\n同时还需要生成17位的切分指针（也就是从拼接后的缓存行切出初始指令码的idx数组，在昆明湖架构中，计算方式为拼接00和startAddr[5:1]， 然后分别与0～16相加） 用于后续从缓存行提取初始指令码。\n所以，首先我们需要检查F1流水级生成的PC的正确与否。如果可能，也需要检查一下切分指针的生成。\n所以，可以总结出以下的测试点：\n序号 名称 描述 2.1.1 PC生成 IFU接收FTQ请求后，在F1流水级生成PC 2.1.2 切取指针生成 IFU接收FTQ请求后，在F1流水级生成后续切取缓存行的指针 功能点2.2 F2流水级获取指令信息 包括获取异常信息、物理地址、客户物理地址、是否在MMIO空间等。\n获取异常信息之后，还需要计算异常向量。ICache会为每个缓存行返回一个异常类型，只需要计算每个指令pc属于哪个缓存行， 然后将对应缓存行的异常类型赋给该位置即可。\n所以，只需要分别检查几种指令信息即可。\n序号 名称 描述 2.2.1 异常向量生成 IFU接收ICache内容后，会根据ICache的结果生成属于每个指令的异常向量 2.2.2 物理地址提取 IFU接收ICache内容后，会根据ICache的结果生成属于每个端口的物理地址。 2.2.3 客户物理地址提取 IFU接收ICache内容后，会根据ICache的结果生成0号端口的客户物理地址。 2.2.4 MMIO空间信息提取 IFU接收ICache内容后，会根据ICache的结果判断当前取指请求是否属于MMIO空间。 功能点2.3 F2流水级计算预测块有效指令范围 指令有效范围包括两种，无跳转和有跳转的\n无跳转的指令有效范围为当前预测块从起始地址到下一个预测块的起始地址的所有指令。\n有跳转的指令有效范围jump_range为当前预测块的起始地址到预测块中第一个跳转指令地址（包含第一个跳转指令地址）之间的所有指令。\n最终的指令有效范围是两者相与的结果。\n序号 名称 描述 2.3.1 无跳转指令有效范围生成 IFU根据FTQ请求，计算无跳转指令有效范围 2.3.2 有跳转指令有效范围生成 IFU根据FTQ请求，计算跳转指令有效范围 功能点2.4 提取初始指令码 IFU需要将ICache返回的缓存行复制一份并拼接。然后利用上一流水级计算的idx数组，从缓存行提取17x2字节的初始指令码。\n序号 名称 描述 2.4 切取初始指令码 IFU根据上一流水级的切取指针，从缓存行提取初始指令码。 功能点3 预译码 多数的功能都由preDecoder子模块完成，因此这里只罗列由IFU本身需要完成的功能。\n功能点3.1 F3流水级选取指令有效向量 由于存在跨缓存行的32位指令，IFU需要做的是，根据上一个预测块最后两字节是否为一条RVI指令的开始，从两种指令有效开始向量中，选择一种。\n序号 名称 描述 3.1.1 上一预测块结尾为RVC或RVI下半部分 上一预测块的最后2字节恰为RVC指令或RVI指令的后半部分，选择第一位为True的有效开始向量 3.1.2 上一预测块结尾为RVI上半部分 上一预测块的最后2字节为RVI，选择第一位为False的有效开始向量 功能点4 指令扩展 将PreDecode返回的16条指令码分别送交指令扩展其进行32位指令扩展，RVI保持不变。RVC指令根据手册规定进行扩展。 如果指令非法，则需要将原始指令填写到CSR（控制状态寄存器）中。IFU自身仅仅控制最后填写的是哪种指令。\n所以，我们对IFU模块，只关注最后写的指令是何种指令。注意，这里可以修改fsIsOff的入参，测试c.fp指令是否返回原始指令码\n序号 名称 描述 4.1 合法RVC指令写扩展指令码 对合法RVC指令，写扩展后的指令码 4.2 非法RVC指令写原始指令码 对非法RVC指令，写原始指令码 4.3 RVI指令不扩展 RVI指令直接写入原始指令即可 功能点5 预测错误预检 主要由PredChecker子模块完成。测试点和PredChecker子模块的测试点类似，IFU没有额外的测试点。预检可以和重定向一起测试。\n功能点6 前端重定向和流水线冲刷 功能点6.1 预测错误重定向 如果发现了预检阶段检出的错误，则需要产生前端重定向，将F3以外的流水级冲刷\n只需要构造有预测错误的预测请求，检查冲刷情况即可。\n序号 名称 描述 6.1.1 JAL预测错误冲刷 预测请求中存在JAL预测错误，需要冲刷流水线 6.1.2 RET预测错误冲刷 预测请求中存在RET预测错误，需要冲刷流水线 6.1.3 非CFI预测错误冲刷 预测请求中存在非CFI预测错误，需要冲刷流水线 6.1.4 无效指令预测错误冲刷 预测请求中存在无效指令预测错误，需要冲刷流水线 6.1.5 跳转目标错误冲刷 预测请求中存在跳转目标错误，需要冲刷流水线 功能点6.2 跨预测块32位指令处理 如果发现当前预测块的最后两个字节是一条RVI指令的开始，则设置一个标识f3_lastHalf_valid，告诉接下来的预测块含有后半条指令。\n我们没有办法直接观察到这个标识，但是可以通过下一预测块来判定：\n序号 名称 描述 6.2.1 跨预测块32位指令处理 连续传入两个预测块，其中有一条32位指令跨两个预测块，后一个预测块的指令开始向量的首位应该为False 但是，如果这一判断出现问题（比如当前预测块存在跳转），则需要进行流水线冲刷。\n这一功能需要PredChecker子模块“配合”（仅仅通过外部IO的修改很难触发这个防御机制），实现起来比较麻烦，但是还是列举一个测试点：\n序号 名称 描述 6.2.2 跨预测块指令误判 当IFU根据PredChecker修复的指令有效范围错判了跨预测块指令时，需要将F3以外的流水级全部冲刷 功能点7 将指令码和前端信息输出给IBuffer 功能点7.1 传送指令码和前端信息 传送给IBuffer的信息包括：经过扩展的32位指令码、16条指令中每条指令的例外信息、预译码信息、FTQ队列中的指针位置、其他后端需要的信息（经过折叠的PC）、 io_toIbuffer_bits_valid（表示指令是否是一条指令的开始）、io_toIbuffer_bits_enqEnable（前者与上被修正过的预测块指令范围， 从而还能表示指令是否在预测块表示的指令范围内）。\n这里要做的只是确认这些信息是否正确传递\n序号 名称 描述 7.1.1 指令码传送 IFU向IBuffer传送扩展后的指令码 7.1.2 异常信息传送 IFU向IBuffer传送每个指令的异常信息 7.1.3 预译码信息传送 IFU向IBuffer传递每个指令的预译码信息 7.1.4 FTQ指针传送 IFU向IBuffer传送FTQ预测块的指针 7.1.5 折叠PC传送 IFU向IBuffer传送折叠的PC 7.1.6 有效开始向量 IFU向IBuffer传送表示指令有效和指令是否为指令开始的向量 功能点7.2 客户页错误传送gpaddr信息 当且仅当发生guest page fault时，后端需要gpaddr信息，为了节省面积，gpaddr不走正常通路进入ibuffer， 而是随ftqPtr被发送到gpaMem，后端需要时从gpaMem读出。IFU需要保证gpf发生时通向gpaMem的valid拉高、gpaddr正确。\n这里我们只需要确保在客户页错误发生时通向gpaMem的valid为高，且gpaddr正确填入。\n序号 名称 描述 7.2 客户页错误 客户页错误发生时，IFU应将gpaMem的valid拉高且填入gpaddr 功能点8 分支预测冲刷流水线 当精确预测器发现简单预测器错误时，通知IFU取消正在进行的取指请求。\n功能点8.1 核验指针 IFU收到BPU冲刷请求后，会将F0/F1流水级上取指令请求的指针比较，冲刷的指针在取指之前，即当前取指令请求在错误的执行路径上，才需要 冲刷IFU。\n我们仍然需要从两个方向校验这个功能，即当冲刷指针在取指令的指针之前时，IFU能够对流水线进行冲刷。 然而，当冲刷指令在取指令的指针之后时，则不能对流水线进行冲刷。\n序号 名称 描述 8.1.1 错误执行路径 当冲刷指针在取指令的指针之前时，IFU能够对流水线进行冲刷。 8.1.2 执行路径无误 当冲刷指令在取指令的指针之后时，IFU不能对流水线进行冲刷。 功能点8.2 BPU S2流水级发现错误 BPU的S2流水级发现错误时，需冲刷IFU的F0流水级\n序号 名称 描述 测试点8.2 BPU S2流水级发现错误 当BPU的S2流水级出现错误，并且当前取指指针在错误执行路径上时，需要对IFU的F0流水级进行冲刷 功能点8.3 BPU S3流水级发现错误 BPU的S3流水级发现错误时，需要冲刷IFU的F0和F1流水级\n序号 名称 描述 8.3 BPU S3流水级发现错误 当BPU的S3流水级出现错误，并且当前取指指针在错误执行路径上时，需要对IFU的F0和F1流水级进行冲刷 功能点9 指令信息和误预测信息写回FTQ 功能点9.1 写回指令信息和误预测信息 将指令PC、预译码信息、错误预测指令的位置、正确的跳转地址以及预测块的正确指令范围等信息写回FTQ，并传递该预测块的FTQ指针。\n序号 名称 描述 9.1.1 写回指令PC IFU的WB流水级，需要向FTQ写回指令PC 9.1.2 写回预译码信息 IFU的WB流水级，需要向FTQ写回每个指令的预译码信息 9.1.3 写回误预测指令位置 IFU的WB流水级，需要向FTQ写回BPU错误预测的指令位置 9.1.4 写回正确跳转地址 IFU的WB流水级，需要向FTQ写回该预测块的正确跳转地址 9.1.5 写回正确指令范围 IFU的WB流水级，需要向FTQ写回预测块的正确指令范围 9.1.6 传递预测块FTQ指针 IFU的WB流水级，需要向FTQ传递预测块的FTQ指针 功能点10 MMIO处理 功能点10.1 上电复位处理 处理器上电复位时，IFU需向MMIO总线发送宽度为64位的请求从flash地址空间取指令，并禁止对MMIO总线的推测执行。\n上电的情况和正常情况其实没有任何区别，但是，上电时的MMIO请求没有任何差别，只是，第一条请求一定是MMIO，并且不需要等待。\n序号 名称 描述 10.1 第一条MMIO指令 IFU收到的第一条MMIO请求可以直接查询Instr Uncache 功能点10.2 向InstrUncache发送请求 在正常的处理逻辑下，如果请求地址处于MMIO地址空间，则IFU会向FTQ查询指令提交状态，IFU需要等待当前请求之前的所有请求（包括MMIO和非MMIO）提交完成， 才能向InstrUncache模块发送请求。\n这里需要和FTQ交互，可以让FTQ模拟请求提交情况，从而测试等待情况。 如果MMIO请求之前的请求都已经提交，则也不需要等待。反之，则需要一直等待直到查询结果表明前面的指令均已提交。故设计测试点如下：\n序号 名称 描述 10.2.1 阻塞等待提交 IFU收到MMIO请求后，查询FTQ，如果前面还有尚未提交的指令，持续等待 10.2.2 无阻塞发送请求 如果查到FTQ不再有未提交的指令，则IFU将指令发送给Instr Uncache 功能点10.3 跨总线请求处理 由于MMIO不支持非对齐访问，因此当检测到的RVI指令地址[2,1]两位为b11时，64位总线无法一次传递所有指令，所以需要增加地址进行重发，再次查询ITLB。\n序号 名称 描述 10.3.1 重发查询ITLB 遇到一次无法查询完毕的RVI指令时，需要向ITLB查询获得新增指令的物理地址 如果存在异常，则直接将指令和异常信息发送到IBuffer并等待，否则向PMP发送请求。\n序号 名称 描述 10.3.2.1 ITLB异常 IFU查询ITLB出现异常时，应当将异常信息发送到IBuffer，然后等待ROB提交完成 10.3.2.2 ITLB返回物理地址 IFU查询ITLB正常返回物理地址时，IFU继续向PMP请求检查 根据pmp_recheck的结果，如果和上一次请求状态不一致，则说明存在访问错误， 为访问异常，不然则根据PMP的回复结果决定是否存在异常。如存在异常（访问异常和其他异常），则将报错信息发送给IBuffer并等待。如无异常，重新向InstrUncache模块 发送请求。\n序号 名称 描述 10.3.3.1 请求状态不一致 IFU检查PMP之后如果发现重发请求状态和上一条请求状态不一致，是访问异常，需要将异常直接发送到IBuffer 10.3.3.2 PMP检查异常 PMP检查出现异常的情况下，也需要将异常直接发送到IBuffer并等待ROB提交。 10.3.3.3 Instr Cache请求重发 PMP检查若无异常，则向Instr Uncache发送请求获取指令码的后半部分。 功能点10.4 向IBuffer发送指令 IFU获得完整数据之后，根据地址从64位数据中截取指令码，并以每个预测块一条指令的形式发送到Ibuffer。等待ROB返回指令已提交的信号。\n序号 名称 描述 10.4 向IBuffer发送指令 IFU在获得完整数据后，截取获得指令码，以每个预测块一条指令的形式发送给IBuffer 功能点10.5 指令冲刷 CFI指令的冲刷由后端发送给FTQ完成。所以不需要在这里设置测试点。\n顺序指令由IFU复用前端重定向通路刷新流水线，并复用FTQ写回机制，将该指令当作误预测指令冲刷，重定向到+2或+4的位置。\n+2和+4是由RVC和RVI指令决定的，所以设置测试点如下：\n序号 名称 描述 10.5.1 RVI指令重定向 如果是RVI指令，传递给FTQ的冲刷请求应该重定向到PC+4 10.5.2 RVC指令重定向 如果是RVC指令，传递给FTQ的冲刷请求应该重定向到PC+2 功能点11 硬件断点 该功能主要由FrontEndTrigger子模块完成。不需要为这一功能额外设置测试点\n测试点汇总 序号 功能 名称 描述 1 接收FTQ预测块请求 ready置位 IFU接收FTQ请求后，设置ready 2.1.1 F1流水级计算信息和切分指针 PC生成 IFU接收FTQ请求后，在F1流水级生成PC 2.1.2 F1流水级计算信息和切分指针 切取指针生成 IFU接收FTQ请求后，在F1流水级生成后续切取缓存行的指针 2.2.1 F2流水级获取指令信息 异常向量生成 IFU接收ICache内容后，会根据ICache的结果生成属于每个指令的异常向量 2.2.2 F2流水级获取指令信息 物理地址提取 IFU接收ICache内容后，会根据ICache的结果生成属于每个端口的物理地址。 2.2.3 F2流水级获取指令信息 客户物理地址提取 IFU接收ICache内容后，会根据ICache的结果生成0号端口的客户物理地址。 2.2.4 F2流水级获取指令信息 MMIO空间信息提取 IFU接收ICache内容后，会根据ICache的结果判断当前取指请求是否属于MMIO空间。 2.3.1 F2流水级计算预测块有效指令范围 无跳转指令有效范围生成 IFU根据FTQ请求，计算无跳转指令有效范围 2.3.2 F2流水级计算预测块有效指令范围 有跳转指令有效范围生成 IFU根据FTQ请求，计算跳转指令有效范围 2.4 提取初始指令码 切取初始指令码 IFU根据上一流水级的切取指针，从缓存行提取初始指令码。 3.1.1 F3流水级选取指令有效向量 上一预测块结尾为RVC或RVI下半部分 上一预测块的最后2字节恰为RVC指令或RVI指令的后半部分，选择第一位为True的有效开始向量 3.1.2 F3流水级选取指令有效向量 上一预测块结尾为RVI上半部分 上一预测块的最后2字节为RVI，选择第一位为False的有效开始向量 4.1 指令扩展 合法RVC指令写扩展指令码 对合法RVC指令，写扩展后的指令码 4.2 指令扩展 非法RVC指令写原始指令码 对非法RVC指令，写原始指令码 4.3 指令扩展 RVI指令不扩展 RVI指令直接写入原始指令即可 6.1.1 预测错误重定向 JAL预测错误冲刷 预测请求中存在JAL预测错误，需要冲刷流水线 6.1.2 预测错误重定向 RET预测错误冲刷 预测请求中存在RET预测错误，需要冲刷流水线 6.1.3 预测错误重定向 非CFI预测错误冲刷 预测请求中存在非CFI预测错误，需要冲刷流水线 6.1.4 预测错误重定向 无效指令预测错误冲刷 预测请求中存在无效指令预测错误，需要冲刷流水线 6.1.5 预测错误重定向 跳转目标错误冲刷 预测请求中存在跳转目标错误，需要冲刷流水线 6.2.1 跨预测块32位指令处理 跨预测块32位指令处理 连续传入两个预测块，其中有一条32位指令跨两个预测块，后一个预测块的指令开始向量的首位应该为False 6.2.2 跨预测块32位指令处理 跨预测块指令误判 当IFU根据PredChecker修复的指令有效范围错判了跨预测块指令时，需要将F3以外的流水级全部冲刷 7.1.1 传送指令码和前端信息 指令码传送 IFU向IBuffer传送扩展后的指令码 7.1.2 传送指令码和前端信息 异常信息传送 IFU向IBuffer传送每个指令的异常信息 7.1.3 传送指令码和前端信息 预译码信息传送 IFU向IBuffer传递每个指令的预译码信息 7.1.4 传送指令码和前端信息 FTQ指针传送 IFU向IBuffer传送FTQ预测块的指针 7.1.5 传送指令码和前端信息 折叠PC传送 IFU向IBuffer传送折叠的PC 7.1.6 传送指令码和前端信息 有效开始向量 IFU向IBuffer传送表示指令有效和指令是否为指令开始的向量 7.2 客户页错误传送gpaddr信息 客户页错误 客户页错误发生时，IFU应将gpaMem的valid拉高且填入gpaddr 8.1.1 核验指针 错误执行路径 当冲刷指针在取指令的指针之前时，IFU能够对流水线进行冲刷。 8.1.2 核验指针 执行路径无误 当冲刷指令在取指令的指针之后时，IFU不能对流水线进行冲刷。 8.2 BPU S2流水级发现错误 BPU S2流水级发现错误 当BPU的S2流水级出现错误，并且当前取指指针在错误执行路径上时，需要对IFU的F0流水级进行冲刷 8.3 BPU S2流水级发现错误 BPU S3流水级发现错误 当BPU的S3流水级出现错误，并且当前取指指针在错误执行路径上时，需要对IFU的F0和F1流水级进行冲刷 9.1.1 写回指令信息和误预测信息 写回指令PC IFU的WB流水级，需要向FTQ写回指令PC 9.1.2 写回指令信息和误预测信息 写回预译码信息 IFU的WB流水级，需要向FTQ写回每个指令的预译码信息 9.1.3 写回指令信息和误预测信息 写回误预测指令位置 IFU的WB流水级，需要向FTQ写回BPU错误预测的指令位置 9.1.4 写回指令信息和误预测信息 写回正确跳转地址 IFU的WB流水级，需要向FTQ写回该预测块的正确跳转地址 9.1.5 写回指令信息和误预测信息 写回指令范围 IFU的WB流水级，需要向FTQ写回预测块的正确指令范围 9.1.6 写回指令信息和误预测信息 传递预测块FTQ指针 IFU的WB流水级，需要向FTQ传递预测块的FTQ指针 10.1 上电复位处理 第一条MMIO指令 IFU收到的第一条MMIO请求可以直接查询Instr Uncache 10.2.1 向InstrUncache发送请求 阻塞等待提交 IFU收到MMIO请求后，查询FTQ，如果前面还有尚未提交的指令，持续等待 10.2.2 向InstrUncache发送请求 无阻塞发送请求 如果查到FTQ不再有未提交的指令，则IFU将指令发送给Instr Uncache 10.3.1 跨总线请求处理 重发查询ITLB 遇到一次无法查询完毕的RVI指令时，需要向ITLB查询获得新增指令的物理地址 10.3.2.1 跨总线请求处理 ITLB异常 IFU查询ITLB出现异常时，应当将异常信息发送到IBuffer，然后等待ROB提交完成 10.3.2.2 跨总线请求处理 ITLB返回物理地址 IFU查询ITLB正常返回物理地址时，IFU继续向PMP请求检查 10.3.3.1 跨总线请求处理 请求状态不一致 IFU检查PMP之后如果发现重发请求状态和上一条请求状态不一致，是访问异常，需要将异常直接发送到IBuffer 10.3.3.2 跨总线请求处理 PMP检查异常 PMP检查出现异常的情况下，也需要将异常直接发送到IBuffer并等待ROB提交。 10.3.3.3 跨总线请求处理 Instr Cache请求重发 PMP检查若无异常，则向Instr Uncache发送请求获取指令码的后半部分。 10.4 向IBuffer发送指令 向IBuffer发送指令 IFU在获得完整数据后，截取获得指令码，以每个预测块一条指令的形式发送给IBuffer 10.5.1 指令冲刷 RVI指令重定向 如果是RVI指令，传递给FTQ的冲刷请求应该重定向到PC+4 10.5.2 指令冲刷 RVC指令重定向 如果是RVC指令，传递给FTQ的冲刷请求应该重定向到PC+2 ","categories":"","description":"","excerpt":"IFU简介 IFU(Instruction Fetch Unit)，取指令单元，负责从内存或ICache取出指令，经过预译码、扩展RVC和预 …","ref":"/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/","tags":"","title":"IFU"},{"body":" 子模块：PredChecker简介 分支预测检查器PredChecker接收来自IFU的预测块信息（包括预测跳转指令在预测块的位置、预测的跳转目标、预译码得到的指令信息、指令PC以及预译码得到的跳转目标偏移等），在模块内部检查五种类型的分支预测错误。模块内部分为两个流水线stage，分别输出信息，第一个stage输出给f3阶段，用于修正预测块的指令范围和预测结果。第二个stage输出给wb阶段，用于在发现分支预测错误时产生前端重定向以及写回给FTQ正确的预测信息。\nPredChecker功能介绍 JAL预测错误检查 jal指令预测错误的条件是，预测块中有一条jal指令（由预译码信息给出），但是要么这个预测块没有预测跳转，要么此预测块预测跳转的指令在这条jal指令之后（即这条jal指令没有被预测跳转）。\nRET预测错误检查 ret指令预测错误的条件是，预测块中有一条ret指令（由预译码信息给出），但是要么这个预测块没有预测跳转，要么此预测块预测跳转的指令在这条ret指令之后（即这条ret指令没有被预测跳转）。\n更新指令有效范围向量 PredChecker在检查出Jal/Ret指令预测错误时，需要重新生成指令有效范围向量，有效范围截取到Jal/Ret指令的位置，之后的bit全部置为0。 需要注意的是，jal和ret指令的错误检查都会导致指令有效范围的缩短， 所以需要重新生成指令有效范伟fixedRange，同时修复预测结果（即将原来的预测结果取消，把这个指令块的预测结果根据jal指令的位置重新生成）\n非CFI预测错误检查 非CFI预测错误的条件是被预测跳转的指令根据预译码信息显示不是一条CFI指令。\n无效指令预测错误检查 无效指令预测错误的条件是被预测的指令的位置根据预译码信息中的指令有效向量显示不是一条有效指令的开始。\n目标地址预测错误检查 目标地址预测错误的条件是，被预测的是一条有效的jal或者branch指令，同时预测的跳转目标地址和由指令码计算得到的跳转目标不一致。\n分级输出检查结果 以上PredChecker检查结果会分为两级分别输出，前面已经提到，Jal/Ret指令由于需要重新生成指令有效范围向量和重新指定预测位置， 所以需要在错误产生的当拍（F3）直接输出结果到Ibuffer用于及时更正进入后端的指令 。而由于时序的考虑，其他错误信息（比如五种错误的错误位置、正确的跳转地址等）则是等到下一拍（WB）阶段才返回给IFU做前端重定向。\nPredChecker测试点和功能点 功能点1 BPU预测信息的JAL预测错误检查 PredChecker会对传入的预测块进行JAL预测错误预检查并修正指令有效范围向量和预测的跳转指令。\n对这一模块的测试，我们分为两部分：正确的输入是否会误检和确有JAL检测错误的预测块输入能否检出。\n对于误检，我们设计如下的测试点:\n序号 名称 描述 1.1.1 误检测试1 预测块中没有JAL指令且最终预测信息也没有取用任何跳转指令的输入，检查PredChecker是否会误报JAL预测错误。 1.1.2 误检测试2 预测块中有JAL指令且最终预测信息取用的正是本条跳转指令的输入，检查PredChecker是否会误报JAL预测错误。 对于JAL预测错误的正确检验，我们设计如下的测试点：\n序号 名称 描述 1.2.1 存在JAL未预测 预测块中存在JAL指令，但是最终预测信息未预测跳转，检查PredChecker是否能检测出JAL预测错误。 1.2.2 预测的JAL并非第一条 预测块中存在JAL指令，但是最终预测信息取的跳转指令在第一条JAL指令之后，检查PredChecker是否能检测出JAL预测错误。 功能点2 BPU预测信息的RET预测错误检查 PredChecker会对传入的预测块进行RET预测错误预检查并修正指令有效范围向量和新的预测结果。\n和JAL预测错误类似，我们也按照误检和正检来构造。\n对于误检，我们设计如下的测试点：\n序号 名称 描述 2.1.1 误检测试1 预测块中没有RET指令且最终预测信息也没有取用任何跳转指令的输入，检查PredChecker是否会误报RET预测错误。 2.1.2 误检测试2 预测块中有RET指令且最终预测信息取用的正是本条跳转指令的输入，检查PredChecker是否会误报RET预测错误。 对于RET预测错误的正确检出，我们设计如下的测试点：\n序号 名称 描述 2.2.1 存在RET未预测 预测块中存在RET指令，但是最终预测信息未预测跳转，检查PredChecker是否能检测出RET预测错误。 2.2.2 预测的跳转并非第一条 预测块中存在RET指令，但是最终预测信息取的跳转指令在第一条RET指令之后，检查PredChecker是否能检测出RET预测错误。 功能点3 更新指令有效范围向量和预测跳转的指令 PredChecker在检查出Jal/Ret指令预测错误时，需要重新生成指令有效范围向量， 有效范围截取到Jal/Ret指令的位置，之后的bit全部置为0。 同时，还需要根据每条指令的预译码信息和最终的预测信息修复预测跳转的结果。\n所以，根据功能要求，我们可以划分出三类情况，分别是预测的有效范围和取用的跳转指令正确的情况， 由于RET和JAL预测错误引起的有效范围偏大和错判非跳转指令和无效指令引起的有效范围偏小。\n序号 名称 描述 3.1 有效范围无误 不存在任何错误的情况下，PredChecker应当保留之前的预测结果。 3.2 RET和JAL预测错误引起的范围偏大 如果检测到了JAL或RET类的预测错误，PredChecker应该将有效指令的范围修正为预测块开始至第一条跳转指令。同时，应该将预测跳转的指令位置修正为预测块中的第一条跳转指令。 3.3 非CFI和无效指令引起的预测范围偏小 如果出现了非控制流指令和无效指令的误预测，应该将预测跳转的指令重新修正到预测块中第一条跳转指令 功能点4 非CFI预测错误检查 非CFI预测错误的条件是被预测跳转的指令根据预译码信息显示不是一条CFI指令。\n要检验这一功能，我们仍然按误检和正确检验来设计测试点：\n序号 名称 描述 4.1.1 误检测试1 构造不存在CFI指令并且未预测跳转的预测信息作为输入，测试PredChecker是否会错检非CFI预测错误 4.1.2 误检测试2 构造存在CFI指令并且正确预测跳转的预测信息作为输入，测试PredChecker是否会错检非CFI预测错误 4.2 正确检测测试 构造不存在CFI指令但是预测了跳转的预测信息作为输入，测试PredChecker是否能检查出非CFI预测错误 功能点5 无效指令预测错误检查 无效指令预测错误的条件是被预测的指令的位置根据预译码信息中的指令有效向量显示不是一条有效指令的开始。\n要检验这一功能，我们按照误检和正确检测来设计测试点：\n序号 名称 描述 5.1.1 误检测试1 构造不存在跳转指令并且未预测跳转的预测信息作为输入，测试PredChecker是否会错检无效指令预测错误 5.1.2 误检测试2 构造存在无效跳转指令并且未预测跳转的预测信息作为输入，测试PredChecker是否会错检无效指令预测错误 5.1.3 误检测试3 构造存在有效跳转指令并且正确预测跳转的预测信息作为输入，测试PredChecker是否会错检无效指令预测错误 5.2 正确检测测试 构造无效指令但是预测了跳转的预测信息作为输入，测试PredChecker是否能检查出无效指令预测错误 功能点6 目标地址预测错误检查 目标地址预测错误的条件是，被预测的是一条有效的jal或者branch指令， 同时预测的跳转目标地址和由指令码计算得到的跳转目标不一致。\n和先前的思路一样，我们仍然按误检和检出两类组织测试点：\n序号 名称 描述 6.1.1 误检测试1 构造不存在跳转指令并且未预测跳转的预测信息作为输入，测试PredChecker是否会错检目标地址预测错误 6.1.2 误检测试2 构造存在有效跳转指令并且正确预测跳转的预测信息作为输入，测试PredChecker是否会错检目标地址预测错误 6.2 正确检测测试 构造存在有效跳转指令的预测块和预测跳转但跳转目标计算错误的预测信息作为输入，测试PredChecker能否检出目标地址预测错误 功能点7 生成跳转和顺序目标 PredChecker还需要负责生成跳转和顺序目标。\n我们通过随机生成译码信息进行测试\n序号 名称 描述 7.1 随机测试 随机提供译码信息，检测生成的跳转目标和顺序目标。 测试点汇总 综上所述，所有的测试点如下：\n序号 功能 名称 描述 1.1.1 BPU预测信息的JAL预测错误检查 误检测试1 预测块中没有JAL指令且最终预测信息也没有取用任何跳转指令的输入，检查PredChecker是否会误报JAL预测错误。 1.1.2 BPU预测信息的JAL预测错误检查 误检测试2 预测块中有JAL指令且最终预测信息取用的正是本条跳转指令的输入，检查PredChecker是否会误报JAL预测错误。 1.2.1 BPU预测信息的JAL预测错误检查 存在JAL未预测 预测块中存在JAL指令，但是最终预测信息未预测跳转，检查PredChecker是否能检测出JAL预测错误。 1.2.2 BPU预测信息的JAL预测错误检查 预测的JAL并非第一条 预测块中存在JAL指令，但是最终预测信息取的跳转指令在第一条JAL指令之后，检查PredChecker是否能检测出JAL预测错误。 2.1.1 BPU预测信息的RET预测错误检查 误检测试1 预测块中没有RET指令且最终预测信息也没有取用任何跳转指令的输入，检查PredChecker是否会误报RET预测错误。 2.1.2 BPU预测信息的RET预测错误检查 误检测试2 预测块中有RET指令且最终预测信息取用的正是本条跳转指令的输入，检查PredChecker是否会误报RET预测错误。 2.2.1 BPU预测信息的RET预测错误检查 存在RET未预测 预测块中存在RET指令，但是最终预测信息未预测跳转，检查PredChecker是否能检测出RET预测错误。 2.2.2 BPU预测信息的RET预测错误检查 预测的跳转并非第一条 预测块中存在RET指令，但是最终预测信息取的跳转指令在第一条RET指令之后，检查PredChecker是否能检测出RET预测错误。 3.1 更新指令有效范围向量和预测跳转的指令 有效范围无误 不存在任何错误的情况下，PredChecker应当保留之前的预测结果。 3.2 更新指令有效范围向量和预测跳转的指令 RET和JAL预测错误引起的范围偏大 如果检测到了JAL或RET类的预测错误，PredChecker应该将有效指令的范围修正为预测块开始至第一条跳转指令。同时，应该将预测跳转的指令位置修正为预测块中的第一条跳转指令。 3.3 更新指令有效范围向量和预测跳转的指令 非CFI和无效指令引起的预测范围偏小 如果出现了非控制流指令和无效指令的误预测，应该将预测跳转的指令重新修正到预测块中第一条跳转指令 4.1.1 非CFI预测错误检查 误检测试1 构造不存在CFI指令并且未预测跳转的预测信息作为输入，测试PredChecker是否会错检非CFI预测错误 4.1.2 非CFI预测错误检查 误检测试2 构造存在CFI指令并且正确预测跳转的预测信息作为输入，测试PredChecker是否会错检非CFI预测错误 4.2 非CFI预测错误检查 正确检测测试 构造不存在CFI指令但是预测了跳转的预测信息作为输入，测试PredChecker是否能检查出非CFI预测错误 5.1.1 无效指令预测错误检查 误检测试1 构造不存在跳转指令并且未预测跳转的预测信息作为输入，测试PredChecker是否会错检无效指令预测错误 5.1.2 无效指令预测错误检查 误检测试2 构造存在无效跳转指令并且未预测跳转的预测信息作为输入，测试PredChecker是否会错检无效指令预测错误 5.1.3 无效指令预测错误检查 误检测试3 构造存在有效跳转指令并且正确预测跳转的预测信息作为输入，测试PredChecker是否会错检无效指令预测错误 5.2 无效指令预测错误检查 正确检测测试 构造无效指令但是预测了跳转的预测信息作为输入，测试PredChecker是否能检查出无效指令预测错误 6.1.1 目标地址预测错误检查 误检测试1 构造不存在跳转指令并且未预测跳转的预测信息作输入，测试PredChecker是否会错检目标地址预测错误 6.1.2 目标地址预测错误检查 误检测试2 构造存在有效跳转指令并且正确预测跳转的预测信息作为输入，测试PredChecker是否会错检目标地址预测错误 6.2 目标地址预测错误检查 正确检测测试 构造存在有效跳转指令的预测块和预测跳转但跳转目标计算错误的预测信息作为输入，测试PredChecker能否检出目标地址预测错误 7.1 生成跳转和顺序目标 随机测试 随机提供译码信息，检测生成的跳转目标和顺序目标。 ","categories":"","description":"","excerpt":" 子模块：PredChecker简介 分支预测检查器PredChecker接收来自IFU的预测块信息（包括预测跳转指令在预测块的位置、预测的 …","ref":"/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/04_pred_checker/","tags":"","title":"PredChecker"},{"body":" 子模块：PreDecoder简介 预译码器PreDeocoder接受初始指令码并进行指令码拼接，拼接之后对每个指令码查询预译码表产生预译码信息，预译码信息包括该位置是否是有效指令开始、CFI指令类型、是否是RVC指令、是否是Call指令以及是否是Ret指令。预译码器会产生两种有效指令开始的向量，一种是默认第1个二字节必为有效指令开始，另一种是默认第2个二字节必为有效指令的开始，最终的选择在IFU端做。\n所以，预译码器接收的输入是： 17 x 2B的初始指令码，这个2字节的初始指令码要么是一条RVC指令，要么是一条RVI指令的前半或后半部分。\n预译码器的输出是：16x4B的拼接指令码；对每个4B指令码，该条指令是否为RVI或RVC指令（RVC指令只考虑该4B的低2B）；对每个4B指令码，该条指令的跳转偏移；两个16位的有效指令开始向量，其中第一种向量假定当前预测块的起始2字节为一条有效指令的开始，而第二种向量假定当前预测块的起始2字节为一条有效RVI指令的结束（但是由于第二种向量的前两位必然为0和1,所以编译优化后，第二种向量实际只有14个信号，表示2-15位；同理，第1种向量的第0位因为恒为1,所以也被优化）\n功能介绍 指令码生成 预译码器接受来自IFU完成指令切分的17 × 2字节的初始指令码，并以4字节为窗口，2字节为步进长度， 从第1个2字节开始，直到第16个2字节，选出总共16个4字节的指令码。\n预译码信息生成 预译码器根据指令码产生预译码信息，主要包括：是否是RVC指令、是否是CFI指令、 CFI指令类型（branch/jal/jalr/call/ret）、CFI指令的目标地址计算偏移。\n首先是判断是否是RVC指令，RVC指令的具体格式参阅RISCV手册的描述：\n其中，决定指令是否为RVC的部分在于指令的[1, 0]两位，不为3的情况下都是RVC指令。\n其余的指令性质判定功能（CFI类型、是否为call和ret）被时序优化到了F3PreDecoder中，不过也可以认为是PreDecoder的一部分。\n最后比较麻烦的是CFI指令的目标地址计算偏移，主要是对J和BR分支指令进行的计算，这需要综合RVI和RVC中jal和br指令的结构。 首先，是手册中对于C.J的描述\n这里对imm立即数的注解是，立即数的每一位最后对应到的是偏移的哪一位。\n所以，可以认为立即数是这么重组的：\ninstr(12) + instr(8) + instr(10, 9) + instr(6) + instr(7) + instr(2) + instr(11) +instr(5,3) + “0”\n而RVI中，对于JAL指令，是这么定义的：\n我们可以类似地计算立即数。\n同样的，我们可以查询手册，参考BR类指令的立即数计算RVC和RVI指令对应的偏移。\nPreDecoder测试点和功能点 功能点1 生成指令码 子模块：PreDecoder简介\n预译码器PreDeocoder接受初始指令码并进行指令码拼接，拼接之后对每个指令码查询预译码表产生预译码信息，预译码信息包括该位置是否是有效指令开始、CFI指令类型、是否是RVC指令、是否是Call指令以及是否是Ret指令。预译码器会产生两种有效指令开始的向量，一种是默认第1个二字节必为有效指令开始，另一种是默认第2个二字节必为有效指令的开始，最终的选择在IFU端做。\n所以，预译码器接收的输入是： 17 x 2B的初始指令码，这个2字节的初始指令码要么是一条RVC指令，要么是一条RVI指令的前半或后半部分。\n预译码器的输出是：16x4B的拼接指令码；对每个4B指令码，该条指令是否为RVI或RVC指令（RVC指令只考虑该4B的低2B）；对每个4B指令码，该条指令的跳转偏移；两个16位的有效指令开始向量，其中第一种向量假定当前预测块的起始2字节为一条有效指令的开始，而第二种向量假定当前预测块的起始2字节为一条有效RVI指令的结束（但是由于第二种向量的前两位必然为0和1,所以编译优化后，第二种向量实际只有14个信号，表示2-15位；同理，第1种向量的第0位因为恒为1,所以也被优化） 功能介绍 指令码生成\n预译码器接受来自IFU完成指令切分的17 × 2字节的初始指令码，并以4字节为窗口，2字节为步进长度， 从第1个2字节开始，直到第16个2字节，选出总共16个4字节的指令码。 预译码信息生成\n预译码器根据指令码产生预译码信息，主要包括：是否是RVC指令、是否是CFI指令、 CFI指令类型（branch/jal/jalr/call/ret）、CFI指令的目标地址计算偏移。\n预译码器从IFU接收完成指令切分的17 x 2 字节的初始指令码，以4字节为窗口，2字节为步进长度，选出16 x 4字节的指令码\n我们需要随机生成初始指令码，并测试拼接的结果。\n序号 名称 描述 1 拼接测试 随机生成17 x 2字节的初始指令码，检验PreDecoder拼接结果 功能点2 生成预译码信息 预译码器会根据指令码产生预译码信息，包括RVC指令的判定和CFI指令的目标地址计算偏移。\nCFI类型的判定则时序优化到了F3PreDecoder中。\n据此，我们可以设计下述测试点。\n首先是判定RVC指令，我们随机生成输入初始指令码，对返回的16位RVC判定结果进行检验。 具体来说，对每32位指令，考虑RVC和RVI两种情况。\n序号 名称 描述 2.1.1 RVC判定 传入RVC指令，应该判断为RVC 2.1.2 RVI判定 传入RVI指令，不应判断为RVC 然后，需要分别根据手册构造RVC和RVI扩展下的J指令和BR指令们，所以有如下的测试点：\n序号 名称 描述 2.2.1 RVC.J计算 对传入RVC扩展的J指令，检查计算的偏移 2.2.2 RVI.J计算 对传入RVI扩展的J指令，检查计算的偏移 2.2.3 RVC.BR计算 对传入RVC扩展的BR指令，检查计算的偏移 2.2.4 RVI.BR计算 对传入RVI扩展的BR指令，检查计算的偏移 测试点汇总 综上所述，对PredDecoder，所有的测试点为：\n序号 功能 名称 描述 1 拼接指令码 拼接测试 随机生成17 x 2字节的初始指令码，检验PreDecoder拼接结果 2.1.1 RVC判定 RVC判定 传入RVC指令，应该判断为RVC 2.1.2 RVC判定 RVI判定 传入RVI指令，不应判断为RVC 2.2.1 跳转目标计算 RVC.J计算 对传入RVC扩展的J指令，检查计算的偏移 2.2.2 跳转目标计算 RVI.J计算 对传入RVI扩展的J指令，检查计算的偏移 2.2.3 跳转目标计算 RVC.BR计算 对传入RVC扩展的BR指令，检查计算的偏移 2.2.4 跳转目标计算 RVI.BR计算 对传入RVI扩展的BR指令，检查计算的偏移 ","categories":"","description":"","excerpt":" 子模块：PreDecoder简介 预译码器PreDeocoder接受初始指令码并进行指令码拼接，拼接之后对每个指令码查询预译码表产生预译码 …","ref":"/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/01_predecode/","tags":"","title":"PreDecode"},{"body":" 子模块：RVCExpander简介 RVCExpander是IFU的子模块，负责对传入的指令进行指令扩展，并解码计算非法信息。\n该模块接收的输入量是两个：一条RVC指令或者RVI指令；CSR对fs.status的使能情况。\n输出量也是两个：输入指令对应的RVI指令；RVC指令是否非法。\n指令扩展 如果是RVI指令，则无需扩展。\n否则对RVC指令，按照手册的约定进行扩展。\n非法指令判断 RVI指令永远判断为合法。\n对于RVC指令的判定，详细内容参阅20240411的RISCV手册的26.8节表格列出的指令条件。\n功能点和测试点 功能点1 指令扩展 RVCExpander负责接收预译码器拼接的指令码，并进行指令扩展，如果是16位RVC指令，需要按照RISCV手册的约定完成扩展\n对此，我们需要随机生成RVI指令和RVC指令，送入预译码器：\n序号 名称 描述 1.1 RVI指令保留 构造RVI指令传入，检查保留情况 1.2 RVC指令扩展 构造RVC指令传入，按手册检查扩展结果 功能点2 非法指令判断 RVCExpander在解析指令时，如发现指令违反了手册的约定，则需要判定该指令非法\n对此，我们需要随机生成非法指令送入RVI中，并检测RVCExpander对合法位的校验；同时，我们还需要校验合法指令是否会被误判为非法指令：\n此外，需要判定C.fp指令在CSR未使能fs.status的情况下，能否将这类指令判定为非法。\n序号 名称 描述 2.1 常规非法指令测试 随机构造非法RVC指令传入，检查判断结果 2.2 合法指令测试 随机构造合法RVC指令传入，检查判断结果 2.3 C.fp指令测试 CSR未使能fs.status的情况下，C.fp指令应该为非法 测试点汇总 序号 功能 名称 描述 1.1 指令扩展 RVI指令保留 构造RVI指令传入，检查保留情况 1.2 指令扩展 RVC指令扩展 构造RVC指令传入，按手册检查扩展结果 2.1 非法指令判断 非法指令测试 随机构造非法RVC指令传入，检查判断结果 2.2 非法指令判断 合法指令测试 随机构造合法RVC指令传入，检查判断结果 2.3 C.fp指令测试 CSR未使能fs.status的情况下，C.fp指令应该为非法 RVC扩展辅助阅读材料 为方便参考模型的书写，在这里根据20240411版本的手册内容整理了部分指令扩展的思路。\n对于RVC指令来说，op = instr(1, 0)；funct = instr(15, 13)\nop\\funct 000 001 010 011 100 101 110 111 00 addi4spn fld lw ld lbu\nlhu;lh\nsb;sh fsd sw sd 01 addi addiw li lui\naddi16sp\nzcmop ARITHs\nzcb j beqz bnez 10 slli fldsp lwsp ldsp jr;mv\nebreak\njalr;add fsdsp fwsp sdsp 在开始阅读各指令的扩展规则时，需要了解一些RVC扩展的前置知识，比如：\nrd’, rs1’和rs2’寄存器：受限于16位指令的位宽限制，这几个寄存器只有3位来表示，他们对应到x8~x15寄存器。\nop = b'00' funct = b'000’: ADDI4SPN 该指令将一个0扩展的非0立即数加到栈指针寄存器x2上，并将结果写入rd'\n其中，nzuimm[5:4|9:6|2|3]的含义是：\n这条指令的第12至11位是立即数的5至4位，第10至7位是立即数的9至6位，第6位是立即数的第2位，第7位是立即数的第3位。\n这条指令最终扩展成为addi rd’, x2, nzuimm[9:2]\naddi的格式形如：| imm[11:0] | rs1 | 000 | rd | 0010011 |\n注意，该指令的立即数为0的时候，不合法。\nfunct = b'001’: fld 该指令从内存加载一个双精度浮点数到rd’寄存器。\noffset的低三位是0，高位进行了0扩展。\n这条指令最终扩展成为fld rd′,offset(rs1′)\nfld的格式形如： | imm[11:0] | rs1 | 011 | rd | 0000111 |\n注意：在昆明湖环境下，该指令要求CSR使能fs.status，也即入参fsIsOff为假。\nfunct = b'010’: lw 该指令从内存加载一个32位的值到rd’寄存器。\noffset的低两位是0，高位进行了0扩展。\n这条指令最终扩展成为lw rd′,offset(rs1′)\nlw的格式形如： | imm[11:0] | rs1 | 010 | rd | 0000011 |\nfunct = b'011’: ldsp 该指令从内存加载一个64位的值到rd’寄存器。\noffset的低两位是0，高位进行了0扩展。\n这条指令最终扩展成为ld rd′,offset(rs1′)\nld的格式形如： | imm[11:0] | rs1 | 011 | rd | 0000011 |\nfunct = b'100’: zcb extensions 1 在RVC指令中，这部分对应的是zcb扩展中的5条指令：lbu,lhu,lh,sb,sh\n在zcb扩展中，进一步地取instr[12:10]作为zcb扩展的指令码，我们记作funct_zcb\nfunct_zcb = b'000’: lbu | 100 | 000 | rs1’ | uimm[0|1] | rd’ | 00 |\n这个指令从rs1’+uimm的地址读取一字节，用0扩展并并加载到rd’中。\n最终翻译为 lb rd’, uimm(rs1')\nlb指令的格式形如：| imm[11:0] | rs1 | 000 | rd | 0000011 |\nfunct_zcb = b'001’, instr[6] =0 : lhu | 100 | 001 | rs1’ | 0 | uimm[1] | rd’ | 00 |\n这个指令从地址rs1’ + uimm读取半word，用0扩展加载到rd’中。\n最终翻译为 lhu rd’, uimm(rs1')\nlhu指令的格式形如：| imm[11:0] | rs1 | 101 | rd | 0000011 |\nfunct_zcb = b'001’, instr[6] =1 : lh | 100 | 001 | rs1’ | 1 | uimm[1] | rd’ | 00 |\n这个指令从地址rs1’ + uimm读取半word，符号扩展并加载到rd’中。\n最终翻译为 lh rd’, uimm(rs1')\nlh指令的格式形如：| imm[11:0] | rs1 | 001 | rd | 0000011 |\nfunct_zcb = b'010’： sb | 100 | 010 | rs1’ | uimm[0 | 1] | rd’ | 00 |\n这个指令把rs2’的低字节存储到地址rs1’ + uimm指示的内存地址中。\n最终翻译为 sb rs2, uimm(rs1')\nRVI中sb指令的格式形如：|imm[11:5] | rs2 | rs1 | 000 | imm[4:0] | 0100011 |\nfunct_zcb = b'011’: sh | 100 | 011 | rs1’ | 0 | uimm[1] | rd’ | 00 |\n这个指令把rs2’的低半字存储到地址rs1’ + uimmz指示的内存地址中。\n最终翻译为 sh rd’, uimm(rs1')\nsh指令的格式形如：|imm[11:5] | rs2 | rs1 | 001 | imm[4:0] | 0100011 |\nfunct = b'101’: fsd fsd将rs2’中的双精度浮点数存储到rs1’ + imm指示的内存区域\n该指令的立即数低3位为0，同时进行了0符号扩展。\n最终这个指令将被扩展为fsd rs2′, offset(rs1′)\nRVI的FSD格式形如：| imm[11:5]| rs2 | rs1 | 011 | imm[4:0] | 0100011 |\n注意：在昆明湖环境下，该指令要求CSR使能fs.status，也即入参fsIsOff为假。\nfunct = b'110’: sw sw将rs2’中的一个字存储到rs1’ + imm指示的内存区域\n该指令的立即数低2位为0，同时进行了0符号扩展。\n最终这个指令将被扩展为sw rs2′, offset(rs1′)\nRVI的SW格式形如：| imm[11:5]| rs2 | rs1 | 010 | imm[4:0] | 0100011 |\nfunct = b'111’: sd fsd将rs2’中的双字存储到rs1’ + imm指示的内存区域\n该指令的立即数低3位为0，同时进行了0符号扩展。\n最终这个指令将被扩展为sd rs2′, offset(rs1′)\nRVI的SD格式形如：| imm[11:5]| rs2 | rs1 | 011 | imm[4:0] | 0100111 |\nop = b'01' funct = b'000’: addi 该指令将一个符号扩展的非0立即数加到rd存储的数字上，并将结果写入rd。\n尽管手册规定立即数和rd不为0，但是立即数和rd为0的情况仍可视为合法。前者是HINT指令，而后者是NOP。\n这条指令最终扩展成为addi rd, rd, imm\naddi的格式形如：| imm[11:0] | rs1 | 000 | rd | 0010011 |\nfunct = b'001’: addiw 该指令的功能和addi类似，但是先计算得到32位数，然后再符号扩展至64位。\n该指令的rd为0时非法。\n当立即数不为0时，该指令最终扩展成为addiw, rd, rd, imm\naddiw的指令格式为| imm[11:0] | rs1 | 000 | rd | 0011011 |\n如果立即数为0,该指令将会扩展成为sext.w rd，不过和addiw的格式是一样的，因此可以将他们归为一类。\nfunct = b'010’: li 该指令将符号扩展的立即数加载到rd中。\n当立即数为0时，该指令为hint，可以看作合法。\n这条指令最终扩展成为addi rd, x0, imm\naddi的格式形如：| imm[11:0] | rs1 | 000 | rd | 0010011 |\nfunct = b'011’: lui/addi16sp/zcm 当rd不为0且不为2时，为lui指令，可以扩展为lui rd, imm\nlui指令的格式形如： | imm[31:12] | rd | 0110111 |\n当rd为0时，为hint，也可当作cli进行译码。\n当rd为2时，为addi16sp指令：\n扩展为addi x2, x2, nzimm[9:4]\naddi的格式形如：| imm[11:0] | rs1 | 000 | rd | 0010011 |\n对addi16sp，立即数为0时非法。\n此外，当第12至11位皆为0，第7位是1且第6至2位为0时，为zcmop，可以直接翻译为一个不起效的指令，比如与立即数0。\nfunct = b'100’: arith \u0026 zcb extension2 在RVC指令中，这部分对应的是数学运算指令和zcb扩展中的另一部分指令，数学计算指令的对应如下：\n其中SRLI64和SRAI64在昆明湖环境下可以不考虑。\nsrli 当funct2为00时，为srli。\n最终可翻译为srli rd′, rd′, 64\nsrli的格式形如：|0000000|shamt|rs1|101|rd|0010011|\nsrai 当funct2为01时，为srai。\n最终可翻译为srai rd′, rd′, 64\nSRAI的格式形如：|0100000|shamt|rs1|101|rd|0010011|\nandi 该指令最终扩展为andi rd′, rd′, imm\nandi的格式形如|imm[11:0]|rs1|111|rd|0010011|\nsub 这条指令最终可以扩展为：sub rd′, rd′, rs2′\nsub指令的格式形如：|0100000|rs2|rs1|000|rd|0110011|\nxor 这条指令最终可以扩展为：xor rd′, rd′, rs2′\nxor指令的格式形如：|0000000|rs2|rs1|100|rd|0110011|\nor 这条指令最终可以扩展为：or rd′, rd′, rs2′\nor指令的格式形如：|0000000|rs2|rs1|110|rd|0110011|\nand 这条指令最终可以扩展为：and rd′, rd′, rs2′\nand指令的格式形如：|0000000|rs2|rs1|111|rd|0110011|\nsubw 这条指令最终可以扩展为：subw rd′, rd′, rs2′\nsubw指令的格式形如：|0100000|rs2|rs1|000|rd|0111011|\naddw 这条指令最终可以扩展为：addw rd′, rd′, rs2′\naddw指令的格式形如：|0000000|rs2|rs1|000|rd|0111011|\nmul 从mul开始的一部分指令属于zcb扩展。\nzcb扩展中，当instr(12, 10) == “111”，且instr(6, 5)为\"10\"时，为mul指令。\nzcb扩展中，当instr(12, 10) == “111”，且instr(6, 5)为\"11\"时，根据instr(4,2)， 共有000的zext.b，001的sext.b，010的zext.h，011的sext.h，100的zext.w和101的not。\n该指令可扩展为mul rd, rd, rs2\nmul的格式为：|0000001|rs2|rs1|000|rd|0110011|\nzext.b 这条指令可以翻译为：andi rd’/rs1’, rd’/rs1’, 0xff\nandi的格式形如|imm[11:0]|rs1|111|rd|0010011|\nsext.b 该指令翻译为sext.b rd, rd\nsext.b指令在RVI下形如:\nzext.h 该指令翻译为zext.h rd, rd\nzext.h指令在RVI下形如:\nsext.h 该指令翻译为sext.h rd, rd\nsext.h指令在RVI下形如:\nzext.w 该指令等价为add.uw rd’/rs1’, rd’/rs1’, zero\nadd.uw指令在RVI下形如:\nnot 该指令等价为xori rd’/rs1’, rd’/rs1’, -1\nxori指令在RVI下形如： | imm[11:0] | rs1| 100 | rd | 0010011 |\nfunct = b'101’: j 最终这个指令将被扩展为jal x0, offset\njal的格式形如：| imm[20|10:1|11|19:12] | rd | 1101111 |\nfunct = b'110’: beqz 该指令可以扩展到beq rs1‘, x0, offset\nbeq指令形如： |imm[12|10:5]|rs2|rs1|000|imm[4:1|11]|1100011| imm[12|10:5]rs2rs1001imm[4:1|11]1100011BNE\nfunct = b'111’: bnez 最终这个指令将被扩展为bne rs1′, x0, offset\nbne指令形如：|imm[12|10:5]| rs2 | rs1 | 001 | imm[4:1|11] | 1100011|\nop = b'10' funct = b'000’: slli 该指令将一个符号扩展的非0立即数加到rd存储的数字上，并将结果写入rd。\n尽管手册规定立即数和rd不为0，但是立即数和rd为0的情况仍可视为合法。前者是HINT指令，而后者是NOP。\n这条指令最终扩展成为slli rd, rd, shamt[5:0]\nslli的格式形如：|000000|shamt|rs1|001|rd|0010011|\nfunct = b'001’: fldsp 该指令最终扩展成为fld rd, offset(x2)\nfld的格式形如： | imm[11:0] | rs1 | 011 | rd | 0000111 |\n该指令要求CSR使能fs.status\nfunct = b'010’: lwsp rd为0时非法。\n这条指令最终扩展成为lw rd, offset(x2)\nlw的格式形如： | imm[11:0] | rs1 | 010 | rd | 0000011 |\nfunct = b'011’: ldsp rd为0时非法。\n这条指令最终扩展成为ld rd, offset(x2)\nlw的格式形如： | imm[11:0] | rs1 | 011 | rd | 0000011 |\nfunct = b'100’: jr/mv/ebreak/jalr/add jr 当rd为0时，非法。\n该指令最终可以扩展为jalr x0, 0(rs1)\njalr指令的格式为：|imm[11:0]|rs1|000|rd|1100111|\nmv rd为0时，是hint指令。\n该指令最终可以扩展为add rd, x0, rs2\nadd指令形如：|0000000|rs2|rs1|000|rd|0110011|\nebreak 可以扩展为ebreak指令。\n形如：|00000000000100000000000001110011|\njalr 该指令最终可以扩展为jalr x1, 0(rs1)\njalr指令的格式为：|imm[11:0]|rs1|000|rd|1100111|\nadd 该指令最终可以扩展为add rd, rd, rs2\nadd指令形如：|0000000|rs2|rs1|000|rd|0110011|\nfunct = b'101’: fsdsp 这条指令最终扩展成为fsd rs2, offset(x2)\nRVI的FSD格式形如：| imm[11:5]| rs2 | rs1 | 011 | imm[4:0] | 0100011 |\n该指令要求CSR使能fs.status\nfunct = b'110’: swsp 这条指令最终扩展成为sw rs2, offset(x2)\nRVI的SW格式形如：| imm[11:5]| rs2 | rs1 | 010 | imm[4:0] | 0100011 |\nfunct = b'111’: sdsp 该指令最终扩展成为sd rd, offset(x2)\nRVI的SD格式形如：| imm[11:5]| rs2 | rs1 | 011 | imm[4:0] | 0100111 |\n","categories":"","description":"","excerpt":" 子模块：RVCExpander简介 RVCExpander是IFU的子模块，负责对传入的指令进行指令扩展，并解码计算非法信息。\n该模块接收 …","ref":"/UnityChipForXiangShan/docs/98_ut/01_frontend/01_ifu/03_ifu_rvc_exp/","tags":"","title":"RVCExpander"},{"body":" 当前版本： 20241223133801-main-2a8c1ab351e4ea786c55435dd18f60c0c523cc8a 20241220061304-main-187577e01df03a8ff7ffc828b79070bd5e582436 20241218062220-main-a866912fc3a6df3d17b857a1a898f6f9e5c5957c 20241217100236-main-53f30b46ed6e6eeb261894c4a71a60f69777ef8c 20241216044913-main-7d081626cef0910d9490d169053ee32a8e0c51db 20241213025923-main-d09f78a58caeeb64347ca2587f1f3f2b2a59e6a0 20241212091919-main-c54c0c2e590cf334b986f8ef3eacc53329f4ed1e 20241204085334-main-335e7e0d4ffc2c7a17f8d95e7c75cbd428b14a61 20241204062337-main-f8903a8c4021ba3e310bf097b07147892729341c 20241201142531-main-365f53f574ba5c6875b3389824a3c898c642ed2b 20241129112435-main-79ccae9d5df92c4e167547564b97bd8846b7ecb6 20241129111104-main-8e0cb45a86ec3ffd779723e17ede379081431c42 查看测试报告 上图共有-个模块，默认情况下模块为灰色，当模块中的测试用例数大于-时，该模块被完全点亮。目前已经完全点亮的模块为-个，待点亮的模块有-个。\n通用处理器模块简介 高性能处理器是现代计算设备的核心，它们通常由三个主要部分组成：前端、后端和访存系统。这些部分协同工作，以确保处理器能够高效地执行复杂的计算任务。\n前端：前端部分，也被称为指令获取和解码阶段，负责从内存中获取指令并将其解码成处理器可以理解的格式。这一阶段是处理器性能的关键，因为它直接影响到处理器可以多快地开始执行指令。前端通常包括指令缓存、分支预测单元和指令解码器。指令缓存用于存储最近访问过的指令，以减少对主内存的访问次数，从而提高处理速度。分支预测单元则尝试预测程序中的条件分支，以便提前获取和解码后续指令，这样可以减少等待分支结果的时间。\n后端：后端部分，也称为执行阶段，是处理器中负责实际执行指令的地方。这一阶段包括了算术逻辑单元（ALU）、浮点单元（FPU）和各种执行单元。这些单元负责进行算术运算、逻辑运算、数据传输和其他处理器操作。后端的设计通常非常复杂，因为它需要支持多种指令集架构（ISA）并优化性能。为了提高效率，现代处理器通常采用超标量架构，这意味着它们可以同时执行多条指令。\n访存：访存系统是处理器与内存之间交互的桥梁。它包括了数据缓存、内存控制器和高速缓存一致性协议。数据缓存用于存储处理器频繁访问的数据，以减少对主内存的访问次数。内存控制器负责管理处理器与内存之间的数据传输。高速缓存一致性协议确保在多处理器系统中，所有处理器看到的内存状态是一致的。\n高性能处理器的设计需要在这三个部分之间找到平衡，以实现最佳的性能。这通常涉及到复杂的微架构设计，以及对处理器流水线的优化。\n","categories":"","description":"","excerpt":" 当前版本： 20241223133801-main-2a8c1ab351e4ea786c55435dd18f60c0c523cc8a …","ref":"/UnityChipForXiangShan/docs/00_unitychip_for_xiangshan/","tags":"","title":"目标验证单元"},{"body":"基础环境需求 本项目基于Python编程语言进行UT验证，采用的工具和测试框架为picker和toffe，环境需求如下：\nLinux操作系统。建议WSL2下安装Ubuntu22.04。 Python。建议Python3.11。 picker。按照快速开始中的提示安装最新版本。 lcov 用于后续test阶段报告生成。使用包管理器即可下载：sudo apt install lcov 环境配置完成后，clone仓库：\ngit clone https://github.com/XS-MLVP/UnityChipForXiangShan.git cd UnityChipForXiangShan pip3 install -r requirements.txt # 安装python依赖（例如 toffee） 下载RTL代码： 默认从仓库https://github.com/XS-MLVP/UnityChipXiangShanRTLs中下载。用户也可以自行按照XiangShan文档编译生成RTL。\nmake rtl # 该命下载最新的rtl代码，并解压至rtl目录，并创建软连接 所有RTL下载包请在UnityChipXiangShanRTLs中查看。\nRTL压缩包的命名规范为：名称-微架构-Git标记-日期编号.tar.gz，例如openxiangshan-kmh-97e37a2237-24092701.tar.gz。在使用时，仓库代码会过滤掉git标记和后缀，例如通过 cfg.rtl.version 访问到的版本号为：openxiangshan-kmh-24092701。压缩包内的目录结构为：\nopenxiangshan-kmh-97e37a2237-24092701.tar.gz └── rtl # 目录 |-- *.sv # 所有sv文件 `-- *.v # 所有v文件 编译DUT 该过程的目的是将RTL通过picker工具打包为Python模块。可以通过make命令指定被打包DUT，也可以一次性打包所有DUT。\n如果想要自行打包某个dut，需要创建编写scripts目录中的build_ut_\u003cname\u003e.py脚本。这一脚本必须实现一个build方法，在打包时会被自动调用。此外还有一个line_coverage_files方法，用于指定行覆盖率参考的文件。\npicker的打包支持内部信号的加入，详见picker的--internal参数，传递给其一个自定义的yaml即可。\n# 调用scripts目录中的build_ut_\u003cname\u003e.py中的build方法，创建待验证的Python版DUT make dut DUTS=\u003cname\u003e # DUTS的值如果有多个，需要用逗号隔开，支持通配符。DUTS默认值为 \"*\"，编译所有DUT # 例如： make dut DUTS=backend_ctrl_block_decode 以make dut DUTS=backend_ctrl_block_decode为例，命令执行完成后，会在dut目录下生成对应的Python包：\ndut/ ├── __init__.py ├── DecodeStage ├── Predecode └── RVCExpander 完成转换后，在测试用例代码中可以import对应的DUT，例如：\nfrom dut.PreDecode import DUTPreDecode dut = DUTPreDecode() 编辑配置 运行rtl、dut、test等命令时，默认使用configs/_default.yaml中的配置项。\n当然，也可以使用自定义配置，方法如下：\n# 指定自定义CFG文件 make CFG=path/to/your_cfg.yaml 类似地，可以在命令行直接指定键值对传入。目前仅有test相关阶段支持命令行配置键值对：\n# 指定KV，传递命令行参数，键值对之间用空格隔开 make test KV=\"log.term-level=\\'debug\\' test.skip-tags=[\\'RARELY_USED\\']\" ","categories":"","description":"","excerpt":"基础环境需求 本项目基于Python编程语言进行UT验证，采用的工具和测试框架为picker和toffe，环境需求如下：\nLinux操作系 …","ref":"/UnityChipForXiangShan/docs/01_verfiy_env/","tags":"","title":"准备验证环境"},{"body":"本项目基于PyTest测试框架进行验证。运行测试时，PyTest框架自动搜索所有test_*.py文件，并自动执行其中所有以test_开头的测试用例（Test Case）。\n# 执行所有ut_*目录中的test case make test_all # 执行指定目录下的test case make test target=\u003cdir\u003e # 例如执行ut_backend/ctrl_block/decode目录中所有的test case make test target=ut_backend/ctrl_block/decode 可通过args参数传递Pytest的运行参数，例如启动x-dist插件的多核功能：\nmake test args=\"-n 4\" # 启用 4 个进程 make test args=\"-n auto\" # 让框架自动选择启用多少个进程 *注：x-dist可以在多节点上并发运行测试，可参考其文档\n运行完成后，默认在out/report目录会生成html版本的测试报告，其 html 文件可通过浏览器直接打开查看（VS Code IDE建议安装Open In Default Browser插件）。\n运行测试主要完成以下三部分内容：\n按要求运行Test Case，可通过cfg.tests中的选项进行配置 统计测试结果，输出测试报告。有toffee-report自动生成 (总测试报告，所有Test的结果合并在一起) 根据需要（cfg.doc_result.disable = True）在测试报告上进行进一步数据统计 ","categories":"","description":"","excerpt":"本项目基于PyTest测试框架进行验证。运行测试时，PyTest框架自动搜索所有test_*.py文件，并自动执行其中所有以test_开头的 …","ref":"/UnityChipForXiangShan/docs/02_run_test/","tags":"","title":"运行测试"},{"body":"添加一个全新的 DUT 测试用例，需要完成以下三部分内容(本节以前端的ifu下的rvc_expander为例)：\n添加编译脚本： 在scripts目录下使用python编写对应rtl的编译文件（例如build_ut_frontend_ifu_rvc_expander.py）。 构建测试环境： 在目录中创建目标测试 UT 目录（例如ut_frontend/ifu/rvc_expander）。如果有需要的话，可以在tools、comm等模块中添加该 DUT 测试需要的基础工具。 添加测试用例： 在测试 UT 目录，按PyTest 规范添加测试用例。 如果是在已有的 DUT 测试中增加内容，按原有目录结构添加即可。\n如何通过 picker 和 toffee 库进行 Python 芯片验证，请参考：https://open-verify.cc/mlvp/docs\n在测试时还需要关心以下内容：\nUT 模块说明: 在添加的模块顶层文件夹中，添加README.md说明，具体格式和要求请参考模板。 代码覆盖率：代码覆盖率是芯片验证的重要指标，一般需需要覆盖目标 DUT 的所有代码。 功能覆盖率：功能覆盖率即目标功能验证完成了多少，一般需要达到 100%。 在后续的文档中，我们将继续以rvc_expander模块为例，详细说明上述过程。\n*注：目录或文件名称需要合理，以便于能通过命名知晓其具体含义。\n","categories":"","description":"","excerpt":"添加一个全新的 DUT 测试用例，需要完成以下三部分内容(本节以前端的ifu下的rvc_expander为例)：\n添加编译脚本：  …","ref":"/UnityChipForXiangShan/docs/03_add_test/","tags":"","title":"添加测试"},{"body":"如何提交Bug 按 ISSUE 模板进行提交，标记上对应的标签（bug，bug等级等）\n对应模块的维护者进行检查，并修改他给出的标记和香山分支\n如何提交文档 本仓库文档以PR的形式在本仓库提交，DUT文档在仓库UnityChipForXiangShan/documents/content/zh-cn/docs/98_UT中进行提交。\n本项目欢迎任何人以ISSUE、DISCUSS、Fork、PR的方式参与。\n万众一芯QQ交流群：\n","categories":"","description":"","excerpt":"如何提交Bug 按 ISSUE 模板进行提交，标记上对应的标签（bug，bug等级等）\n对应模块的维护者进行检查，并修改他给出的标记和香山分 …","ref":"/UnityChipForXiangShan/docs/06_join_us/","tags":"","title":"如何参与本项目"},{"body":"# Description Please include a summary of the changes and the related issue. Please also include relevant motivation and context. List any dependencies that are required for this change. Fixes # (issue) ## Type of change Please delete options that are not relevant. - [ ] Bug fix (non-breaking change which fixes an issue) - [ ] New feature (non-breaking change which adds functionality) - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected) - [ ] This change requires a documentation update # How Has This Been Tested? Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration - [ ] Test A - [x] Test B **Test Configuration**: * Firmware version: * Hardware: * Toolchain: * SDK: # Checklist: - [ ] My code follows the style guidelines of this project - [ ] I have performed a self-review of my code - [ ] I have commented my code, particularly in hard-to-understand areas - [ ] I have made corresponding changes to the documentation - [ ] My changes generate no new warnings - [ ] I have added tests that prove my fix is effective or that my feature works - [ ] New and existing unit tests pass locally with my changes - [ ] Any dependent changes have been merged and published in downstream modules 展示效果如下：\nDescription Please include a summary of the changes and the related issue. Please also include relevant motivation and context. List any dependencies that are required for this change.\nFixes # (issue)\nType of change Please delete options that are not relevant.\nBug fix (non-breaking change which fixes an issue) New feature (non-breaking change which adds functionality) Breaking change (fix or feature that would cause existing functionality to not work as expected) This change requires a documentation update How Has This Been Tested? Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\nTest A Test B Test Configuration:\nFirmware version: Hardware: Toolchain: SDK: Checklist: My code follows the style guidelines of this project I have added the appropriate labels I have performed a self-review of my code I have commented my code, particularly in hard-to-understand areas I have made corresponding changes to the documentation My changes generate no new warnings I have added tests that prove my fix is effective or that my feature works New and existing unit tests pass locally with my changes Any dependent changes have been merged and published in downstream modules ","categories":"","description":"","excerpt":"# Description Please include a summary of the changes and the related …","ref":"/UnityChipForXiangShan/docs/08_template_pr/","tags":"","title":"模板-PR"},{"body":"后端模块验证文档\n","categories":"","description":"","excerpt":"后端模块验证文档\n","ref":"/UnityChipForXiangShan/docs/98_ut/02_backend/","tags":"","title":"Backend"},{"body":" 什么是BPU\n","categories":"","description":"","excerpt":" 什么是BPU\n","ref":"/UnityChipForXiangShan/en/docs/bpu/","tags":"","title":"分支预测器（Branch Prediction Unit, BPU）"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/en/docs/bpu/00_ftb/","tags":"","title":"FTB"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/en/docs/bpu/02_ittage/","tags":"","title":"ITTAGE"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/en/docs/bpu/01_tage/","tags":"","title":"TAGE"},{"body":"TBD\n","categories":"","description":"","excerpt":"TBD\n","ref":"/UnityChipForXiangShan/en/docs/","tags":"","title":"XiangShan UT"},{"body":"## Description A brief description of the issue. ## Steps to Reproduce 1. Describe the first step 2. Describe the second step 3. Describe the third step 4. ... ## Expected Result Describe what you expected to happen. ## Actual Result Describe what actually happened. ## Screenshots If applicable, add screenshots to help explain your problem. ## Environment - OS: [e.g. Windows 10, macOS 10.15, Ubuntu 20.04] - Browser: [e.g. Chrome 86, Firefox 82, Safari 14] - Version: [e.g. 1.0.0] ## Additional Information Add any other context about the problem here. 展示效果如下：\nDescription A brief description of the issue.\nSteps to Reproduce Describe the first step Describe the second step Describe the third step … Expected Result Describe what you expected to happen.\nActual Result Describe what actually happened.\nScreenshots If applicable, add screenshots to help explain your problem.\nEnvironment OS: [e.g. Windows 10, macOS 10.15, Ubuntu 20.04] Browser: [e.g. Chrome 86, Firefox 82, Safari 14] Version: [e.g. 1.0.0] Additional Information Add any other context about the problem here.\nChecklist I have searched the existing issues I have added the appropriate labels I have reproduced the issue with the latest version I have provided a detailed description of the bug I have provided steps to reproduce the issue I have included screenshots (if applicable) I have provided the environment details (OS, version, etc.) ","categories":"","description":"","excerpt":"## Description A brief description of the issue. ## Steps to Reproduce …","ref":"/UnityChipForXiangShan/docs/09_template_issue/","tags":"","title":"模板-ISSUE"},{"body":"# 模块名称 ## 测试目标 \u003c测试目标、测试方法描述\u003e ## 测试环境 \u003c测试环境描述，依赖描述\u003e ## 功能检测 \u003c给出目标待测功能与对应的检测方法\u003e |序号|所属模块|功能描述|检查点描述|检查标识|检查项| |-|-|-|-|-|-| |-|-|-|-|-|-| ## 验证接口 \u003c接口的描述\u003e ## 用例说明 #### 测试用例1 |步骤|操作内容|预期结果|覆盖功能点| |-|-|-|-| |-|-|-|-| #### 测试用例2 |步骤|操作内容|预期结果|覆盖功能点| |-|-|-|-| |-|-|-|-| ## 目录结构 \u003c对本模块的目录结构进行描述\u003e ## 检测列表 - [ ] 本文档符合指定[模板]()要求 - [ ] Env提供的API不包含任何DUT引脚和时序信息 - [ ] Env的API保持稳定（共有[ X ]个） - [ ] Env中对所支持的RTL版本（支持版本[ X ]）进行了检查 - [ ] 功能点（共有[ X ]个）与[设计文档]()一致 - [ ] 检查点（共有[ X ]个）覆盖所有功能点 - [ ] 检查点的输入不依赖任何DUT引脚，仅依赖Env的标准API - [ ] 所有测试用例（共有[ X ]个）都对功能检查点进行了反标 - [ ] 所有测试用例都是通过 assert 进行的结果判断 - [ ] 所有DUT或对应wrapper都是通过fixture创建 - [ ] 在上述fixture中对RTL版本进行了检查 - [ ] 创建DUT或对应wrapper的fixture进行了功能和代码行覆盖率统计 - [ ] 设置代码行覆盖率时对过滤需求进行了检查 展示效果如下：\n模块名称 测试目标 \u003c测试目标、测试方法描述\u003e\n测试环境 \u003c测试环境描述，依赖描述\u003e\n功能检测 \u003c给出目标待测功能与对应的检测方法\u003e\n序号 所属模块 功能描述 检查点描述 检查标识 检查项 - - - - - - 验证接口 \u003c接口的描述\u003e\n用例说明 测试用例1 步骤 操作内容 预期结果 覆盖功能点 - - - - 测试用例2 步骤 操作内容 预期结果 覆盖功能点 - - - - 目录结构 \u003c对本模块的目录结构进行描述\u003e\n检测列表 本文档符合指定模板要求 Env提供的API不包含任何DUT引脚和时序信息 Env的API保持稳定（共有[ X ]个） Env中对所支持的RTL版本（支持版本[ X ]）进行了检查 功能点（共有[ X ]个）与设计文档一致 检查点（共有[ X ]个）覆盖所有功能点 检查点的输入不依赖任何DUT引脚，仅依赖Env的标准API 所有测试用例（共有[ X ]个）都对功能检查点进行了反标 所有测试用例都是通过 assert 进行的结果判断 所有DUT或对应wrapper都是通过fixture创建 在上述fixture中对RTL版本进行了检查 创建DUT或对应wrapper的fixture进行了功能和代码行覆盖率统计 设置代码行覆盖率时对过滤需求进行了检查 ","categories":"","description":"","excerpt":"# 模块名称 ## 测试目标 \u003c测试目标、测试方法描述\u003e ## 测试环境 \u003c测试环境描述，依赖描述\u003e ## 功能检测 \u003c给出目标待测功能与对 …","ref":"/UnityChipForXiangShan/docs/10_template_ut_readme/","tags":"","title":"模板-UT-README"},{"body":"访存模块验证文档\n","categories":"","description":"","excerpt":"访存模块验证文档\n","ref":"/UnityChipForXiangShan/docs/98_ut/03_memblock/","tags":"","title":"Mem Block"},{"body":"其他模块验证文档\n","categories":"","description":"","excerpt":"其他模块验证文档\n","ref":"/UnityChipForXiangShan/docs/98_ut/04_misc/","tags":"","title":"Misc"},{"body":"comm 模块 在comm中提供了部分可公用的API，可通过以下方式进行调用：\n# import all from comm import * # or direct import functions you need from com import function_you_need # or access from module import comm comm.function_you_need() cfg 子模块 get_config(cfg=None) 获取当前的Config配置\n输入：如果cfg不为空，则返回cfg。否则则自动通过toffee获取全局Config。 返回：Config对象 import comm cfg = comm.get_config() print(cfg.rtl.version) cfg_as_str(cfg: CfgObject): 把config对象转换为字符类型\n输入：Config对象 返回：编码后的Config对象 import comm cfg_str = comm.cfg_as_str(comm.get_config()) cfg_from_str(cfg_str) 把字符类型的Config对象还原\n输入：编码后的Config对象 返回：Config对象 import comm cfg = comm.cfg_from_str(cfg_str) dump_cfg(cfg: CfgObject = None, cfg_file=None) 把config对象保持到文件\n输入： cfg 需要保存的config cfg_file 目标文件 import comm cfg = comm.get_config() comm.dump_cfg(cfg, \"config.yaml\") functions 子模块 get_log_dir(subdir=\"\", cfg=None) 获取日志目录\n输入： subdir： 子目录 cfg：配置文件 输出：日志目录 import comm my_log = comm.get_log_dir(\"my_log\") print(my_log) # /workspace/UnityChipForXiangShan/out/log/my_log get_out_dir(subdir=\"\", cfg=None) 获取输出目录\n输入： subdir： 子目录 cfg：配置文件 输出：输出目录 get_rtl_dir(subdir=\"\", cfg=None) 获取RTL目录\n输入： subdir： 子目录 cfg：配置文件 输出：RTL目录 get_root_dir(subdir=\"\") 获取根目录：\n输入：根目录下的子目录 输出：当前仓库的根目录 is_all_file_exist(files_to_check, dir) 判断文件是否在指定目录中都存在\n输入： files_to_check: 需要检查的文件列表 dir：目标目录 输出：是否都存在，只要有一个文件不存在都返回False time_format(seconds=None, fmt=\"%Y%m%d-%H%M%S\") 格式化时间\n输入： seconds：需要格式化的时间，为None表示当前时间 fmt：时间格式 返回：格式化之后的时间字符串 import comm import time print(time_format(time.time())) # 20241202-083726 base64_encode(input_str) base64编码：\n输入：需要编码的字符串 输出：编码之后的字符串 import comm print(comm.base64_encode(\"test\")) # dGVzdA== base64_decode(base64_str) base64解码：\n输入：bas64编码 输出：解码之后的原始字符串 import comm print(comm.base64_decode(\"dGVzdA==\")) # test exe_cmd(cmd, no_log=False) 执行操作系统命令：\n输入： cmd：需要执行的os命令 是否需要返回命令行输出 输出：success，stdout、sterr sucess：命令是否执行成功 命令标准输出字符串（no_log=True时，强制为空） 命令标准错误字符串（no_log=True时，强制为空） import comm su, st, er = exe_cmd(\"pwd\") print(st) get_git_commit() 获取当前仓库git commit号\nget_git_branch() 获取当前仓库git 分支名称\nUT_FCOV(group, ignore_prefix=“ut_”) 获取功能覆盖率分组\n输入： group 分组名称 ignore_prefix需要去掉的前缀 输出：带模块前缀的覆盖率分组名 例如，在ut_backend/ctrl_block/decode/env/decode_wrapper.py中调用：\nprint(UT_FCOV(\"../../INT\")) # out backend.ctrl_block.decode.INT get_version_checker(target_version) 获取版本检测函数\n输入：目标版本字符串 输出：检测函数 返回的检测函数，一般在fixture中进行版本判断。\nimport comm import pytest checker = comm.get_version_checker(\"openxiangshan-kmh-24092701+\") @pytest.fixture def fixture(): checker() ... module_name_with(names, prefix=None) 给names统一加上模块前缀\n输入： nanmes 需要添加前缀的字符列表 prefix 模块前缀 返回：添加完成后的字符串列表 例如在a/b/c/d/e.py文件中调用该方法：\nimport comm print(comm.module_name_with([\"X\", \"Y\"], ,\"../../x\")) # out [\"a.b.c.x.X\", \"a.b.c.x.Y\"] ","categories":"","description":"","excerpt":"comm 模块 在comm中提供了部分可公用的API，可通过以下方式进行调用：\n# import all from comm import …","ref":"/UnityChipForXiangShan/docs/95_api/","tags":"","title":"常用API"},{"body":"测试用例管理 如果测试用例和目标RTL版本紧密相关，RTL发生变化，之前的测试用例不一定适用。此外，不同场景下有不同需求，例如验证测试环境时，不运行耗时太长的用例等。因此需要对用例进行管理，让用户能在在特定场景下跳过某些用例。为了实现该目标，我们需要通过pytest.mark.toffee_tags对于每个用例进行tag和version标记。然后在配置文件中设置需要跳过哪些tag或者只运行哪些tag的测试。\n@pytest.mark.toffee_tags(\"my_tag\", \"version1 \u003c version13\") def test_case_1(): ... 例如上述test_case_1被标记上了标签my_tag，支持版本设置为version1到version13。因此可以在配置文件中指定test.skip-tags=[\"my_tag\"]，来表示运行过程中跳过该用例。\npytest.mark.toffee_tags的参数说明如下：\n@pytest.mark.toffee_tags( tag: Optional[list, str] = [] # 用例标签 version: Optional[list, str] = [], # 用例rtl版本需求 skip: callable = None, # 自定义是否调过该用例，skip(tag, version, item): (skip, reason) ) toffee_tags函数的参数tag支持str和list[str]类型。version参数也可以是str和list[str]类型，当为list类型时，进行精确匹配，如果为str则匹配规则如下：\nname-number1 \u003c namer-number2: 表示版本需要在number1和number2之间（包含边界，number表示数字，也可以为小数，eg 1.11） name-number1+：表示number1版本以及以后的版本 name-number1-：表示number1版本以及以前的版本 如果不存在上述情况，且有*或者?表示通配符类型。其他情况为精确匹配。\n预定义标签，可以在comm/constants.py中查看，例如：\n# Predefined tags for test cases TAG_LONG_TIME_RUN = \"LONG_TIME_RUN\" # 运行时间长 TAG_SMOKE = \"SMOKE\" # 冒烟测试 TAG_RARELY_USED = \"RARELY_USED\" # 非常少用 TAG_REGRESSION = \"REGRESSION\" # 回归测试 TAG_PERFORMANCE = \"PERFORMANCE\" # 性能测试 TAG_STABILITY = \"STABILITY\" # 稳定测试 TAG_SECURITY = \"SECURITY\" # 安全测试 TAG_COMPATIBILITY = \"COMPATIBILITY\" # 兼容测试 TAG_OTHER = \"OTHER\" # 其他 TAG_CI = \"CI\" # 集成测试 TAG_DEBUG = \"DEBUG\" # 测试 TAG_DEMO = \"DEMO\" # demo 在默认配置中(config/_default.yaml)，会过滤掉：LONG_TIME_RUN、REGRESSION、RARELY_USED、CI 标记的测试。\n可以通过@pytest.mark.toffee_tags可以为每个用例添加标签，也可以在模块中定义如下变量，实现对整个模块的所有测试用例添加标签。\ntoffee_tags_default_tag = [] # 对应 tag 参数 toffee_tags_default_version = [] # 对应 version 参数 toffee_tags_default_skip = None # 对应 skip 参数 *注：本环境中的版本号会自动过滤掉git标记，例如下载的RTL名称为openxiangshan-kmh-97e37a2237-24092701.tar.gz，则其版本号在本项目中为：openxiangshan-kmh-24092701, 可通过cfg.rtl.version或者comm.get_config().rtl.version获得。\n版本检查 除了可以用标签toffee_tags自动检查版本外，还可以通过get_version_checker主动进行检查。一个单元测试通常由测试环境（Test Env）和测试用例组成（Test Case），Env对RTL引脚和功能进行封装，然后向Case提供稳定API，因此在Env中需要进行RTL版本判断，判断是否需要跳过使用本环境的所有测试用例。例如在Env中：\n... from comm import get_version_checker version_check = get_version_checker(\"openxiangshan-kmh-*\") # 获取RTL版本检查器，同toffee_tags中的veriosn参数 @pytest.fixture() def my_fixture(request): version_check() # 在 fixture 中主动检查 .... yield dut ... 在上述例子中，Env在名称为my_fixture的fixture中主动进行了版本检查。因此，在测试用例每次调用它时都会进行版本检查，如果检查不满足要求，则会跳过该用例的执行。\n仓库目录说明 UnityChipForXiangShan ├── LICENSE # 开源协议 ├── Makefile # Makefile主文件 ├── README.en.md # 英文readme ├── README.zh.md # 中文readme ├── __init__.py # Python模块文件，可以把整个UnityChipForXiangShan当成一个模块进行import ├── pytest.ini # PyTest 配置文件 ├── comm # 公用组件：日志，函数，配置等 ├── configs # 配置文件目录 ├── documents # 文档 ├── dut # dut生成目录 ├── out # log，report等生成目录 ├── requirements.txt # python依赖 ├── rtl # rtl缓存 ├── run.py # 主python入口文件 ├── scripts # dut编译脚本 ├── tools # 公共工具模块 ├── ut_backend # 后端测试用例 ├── ut_frontend # 前端测试用例 ├── ut_mem_block # 访存测试用例 └── ut_misc # 其他测试用例 配置文件说明 默认配置与说明如下：\n# 默认配置文件 # 配置加载顺序: _default.yaml -\u003e 用户指定的 *.yaml -\u003e 命令行参数 eg: log.term-level='debug' # RTL 配置 rtl: # RLT下载地址，从该地址获取所有*.gz.tar文件当成目标RTL base-url: https://\u003cyour_rtl_download_address\u003e # 需要下载的RTL版本 eg: openxiangshan-kmh-97e37a2237-24092701 version: latest # 需要存储RTL的目录，相对于当前配置文件的路径 cache-dir: \"../rtl\" # 测试用例配置（tag和case支持通配符） test: # 跳过标签，所有带有该标签的测试用例都会被跳过 skip-tags: [\"LONG_TIME_RUN\", \"RARELY_USED\", \"REGRESSION\", \"CI\"] # 目标标签，只有带有该标签的测试用例才会被执行（skip-tags会覆盖run-tags） run-tags: [] # 跳过的测试用例，所有带有该名字（或者模块名）的测试用例都会被跳过。 skip-cases: [] # 目标测试用例，只有带有该名字（或者模块名）的测试用例才会被执行（skip-cases会覆盖run-cases）。 run-cases: [] # 跳过异常，所有抛出该异常的测试用例都会被跳过 skip-exceptions: [] # 输出配置 output: # 输出目录，相对于当前配置文件的路径 out-dir: \"../out\" # 测试报告配置 report: # 报告生成目录，相对于output.out-dir report-dir: \"report\" # 报告名称，支持变量替换：%{host} 主机名，%{pid} 进程ID，%{time} 当前时间 report-name: \"%{host}-%{pid}-%{time}/index.html\" # 报告内容 information: # 报告标题 title: \"XiangShan KMH Test Report\" # 报告用户信息 user: name: \"User\" email: \"User@example.email.com\" # 目标行覆盖率 eg: 90 表示 90% line_grate: 99 # 其他需要展示的信息，key为标题，value为内容 meta: Version: \"1.0\" # 日志配置 log: # 根输出级别 root-level: \"debug\" # 终端输出级别 term-level: \"info\" # 文件日志输出级别 file-dir: \"log\" # 文件日志名称，支持变量替换：%{host} 主机名，%{pid} 进程ID，%{time} 当前时间 file-name: \"%{host}-%{pid}-%{time}.log\" # 文件日志输出级别 file-level: \"info\" # 测试结果配置（该数据用于填充documents中的统计图等，原始数据来源于toffee-test生成的report） # 运行完测试后，可通过 `make doc` 查看结果 doc-result: # 是否开测试结果后处理 disable: False # 目标DUT的组织结构配置 dutree: \"%{root}/configs/dutree/xiangshan-kmh.yaml\" # 结果名称，将会保存到输出的report目录 result-name: \"ut_data_progress.json\" # 创建的测试报告的软连接到 hugo report-link: \"%{root}/documents/static/data/reports\" 可在上述配置文件中添加自定义参数，通过cfg = comm.get_config()获取全局配置信息，然后通过cfg.your_key进行访问。cfg信息为只读信息，默认情况下不能进行修改。\n","categories":"","description":"","excerpt":"测试用例管理 如果测试用例和目标RTL版本紧密相关，RTL发生变化，之前的测试用例不一定适用。此外，不同场景下有不同需求，例如验证测试环境 …","ref":"/UnityChipForXiangShan/docs/96_others/","tags":"","title":"其他"},{"body":"为了方便将所有人的贡献集合在一起，需要在编码、环境、文档编写等方面采用相同的“规范”。\n环境要求 python： 在python编码过程中，尽可能的采用标准库，采用兼容Python3大部分版本的通用语法（尽可能的在Python3.6 - Python3.12中通用），不要使用过旧或者过新的语法。 操作系统： 建议Ubuntu 22.04，windows下，建议使用WSL2环境。 hugo 建议版本 0.124.1（版本过旧不支持软连接） 少依赖 尽可能少的使用第三方C++/C库 picker 建议使用wheel安装picker工具和xspcomm库 测试用例 代码风格 建议采用 PEP 8 规范 build脚本 需要按DUT的命名结构进行规范命名，不然无法正确收集验证结果。例如backend.ctrl_block.decodeUT在scripts目录中对应的build文件名称应该为build_ut_backend_ctrl_block_decode.py(以固定前缀build_ut_开始，点.用下划线_进行替换)。在脚本中实现 build(cfg) -\u003e bool 和 line_coverage_files(cfg) -\u003e list[str] 方法。build用于编译DUT为python模块，line_coverage_files方法用于返回需要统计的代码行覆盖率文件。 用例标签 如果用例无法做到版本通用，需要用pytest.mark.toffee_tags标记支持的版本。 用例抽象 编写的测试用例输入不能出现DUT的具体引脚等强耦合内容，只能调用基于DUT之上的函数封装。例如对于加法器 adder，需要把dut的目标功能封装为 dut_wrapper.add(a: int, b: int) -\u003e int, bool，在test_case中仅仅调用 sum, c = add(a, b)进行测试。 覆盖抽象 在编写功能覆盖率时，其检查点函数的输入也不能有DUT引脚。 环境抽象 对于一个验证，通常分为2部分：Test Case 和 Env （用例以外的都统一称为Env，它包含DUT、驱动、监控等），其中Env需要提供对外的功能抽象接口，不能对外呈现出太多细节。 测试说明 在每个DUT的验证环境中，需要通过README.md对该环境进行说明，例如需要对Env提供给Case的接口进行说明，目录结构说明等。 PR编写 标题 简洁明了，能概括PR的主要内容。 详细描述 详细说明PR的目的，修改的内容以及相关背景信息。入解决已有的问题需要给出链接（例如Issue）。 关联问题 在描述中关联相关问题，例如 Fixes #123，以便在合并PR时关闭关联问题。 测试 需要进行测试，并对测试结果进行描述 文档 PR涉及到的文档需要同步修改 分解 当PR涉及到的修改很多时，需要判断是否拆分成多个PR 检查清单 检查编译是否通过、代码风格是否合理、是否测试通过、是否有必要的注释等 模板 以及提供的PR模块请参考链接。 ISSUE编写 要求同上\n","categories":"","description":"","excerpt":"为了方便将所有人的贡献集合在一起，需要在编码、环境、文档编写等方面采用相同的“规范”。\n环境要求 python： 在python编码过程中， …","ref":"/UnityChipForXiangShan/docs/97_constraint/","tags":"","title":"必要规范"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/docs/98_ut/","tags":"","title":"验证文档"},{"body":"在提交 issue、pull request、discussion 时，如果指定对应模块的 maintainer 能更及时的得到响应。目前已有的维护人员如下（首字母排名）：\n验证工具：\npicker：Makiras, SFangYy, yaozhicheng toffee/toffe-test：Miical, yaozhicheng 主UT模块：\nfrontend：Gao-Zeyu backend: TBD mem_block: TBD misc: TBD 子UT模块：\nfrontend.bpu.ftb\t: TBD frontend.bpu.uftb\t: TBD frontend.bpu.ittage\t: TBD frontend.bpu.tagesc\t: FrankOu2001 frontend.bpu.ras\t: TBD frontend.ftq\t: TBD frontend.ibuffer\t: TBD frontend.icache\t: TBD frontend.ifu\t: TBD frontend.instr_uncache\t: TBD frontend.itlb\t: TBD frontend.pmp\t: TBD backend.ctrl_block.decode\t: my-mayfly, TheKiteRunner24 backend.ctrl_block.rename.*: TBD backend.ctrl_block.dispatch*: TBD backend.ctrl_block.mem_ctrl: TBD backend.ctrl_block.redirect_gen: TBD backend.ctrl_block.rob: TBD backend.ctrl_block.pc_gpa_mem: TBD backend.data_path: TBD backend.scheduler.*: TBD backend.exu_block.*: TBD backend.og2_for_vector: TBD backend.pc_target_mem: TBD backend.wb_data_path: TBD backend.wb_fu_busy_table: TBD backend.bypass_network: TBD mem_block.lsq.*: TBD mem_block.dtlb: TBD mem_block.load_store_unit: TBD mem_block.dcache: TBD mem_block.pmp: TBD mem_block.prefetcher: TBD mem_block.v_mem.*: TBD mem_block.ptw: TBD mem_block.uncache: TBD mem_block.sbuffer: TBD misc.l2_cache: TBD misc.mmio: TBD *其他维护者陆续更新中\n如果您对本项目感兴趣，欢迎申请成为本项目中的维护者。\n","categories":"","description":"","excerpt":"在提交 issue、pull request、discussion 时，如果指定对应模块的 maintainer 能更及时的得到响应。目前已 …","ref":"/UnityChipForXiangShan/docs/99_maintain/","tags":"","title":"维护者"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/en/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/en/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/en/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/tags/","tags":"","title":"Tags"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/UnityChipForXiangShan/en/","tags":"","title":"XiangShan UT Docs"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/UnityChipForXiangShan/","tags":"","title":"XiangShan UT Docs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/UnityChipForXiangShan/search/","tags":"","title":"搜索结果"}]