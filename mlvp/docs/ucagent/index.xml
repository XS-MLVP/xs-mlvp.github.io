<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>验证智能体 on 开放验证平台学习资源</title>
    <link>https://open-verify.cc/mlvp/docs/ucagent/</link>
    <description>Recent content in 验证智能体 on 开放验证平台学习资源</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://open-verify.cc/mlvp/docs/ucagent/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>工具介绍</title>
      <link>https://open-verify.cc/mlvp/docs/ucagent/introduce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/docs/ucagent/introduce/</guid>
      <description>&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;&#xA;&lt;p&gt;随着芯片设计的愈发复杂，其验证难度和耗时也成倍增长，而近年来大语言模型的能力突飞猛进。于是我们推出了 UCAgent——一个基于大语言模型的自动化硬件验证 AI 代理，专注于芯片设计的单元测试(Unit Test)验证工作。&#xA;接下来我将从介绍、安装、使用、工作流、高级这五个方面来说明 UCAgent。&lt;/p&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;&#xA;&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;芯片验证时间已经占据了芯片开发时间的 50-60%，并且设计工程师也将 49%的时间投入了硬件验证工作，但是 2024 年首次流片成功率仅有 14%。&lt;/li&gt;&#xA;&lt;li&gt;随着 LLM 与编程类 Agent 兴起，将“硬件验证”抽象为“软件测试问题”可实现高比例自动化。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;ucagent-是什么&#34;&gt;UCAgent 是什么&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;面向芯片设计单元测试(Unit Test)的 AI Agent，基于 LLM 驱动，围绕“阶段化工作流 + 工具编排”自动/半自动完成需求理解、测试生成、执行与报告产出。&lt;/li&gt;&#xA;&lt;li&gt;以用户为主导，LLM 为助理的协作式交互 Agent&lt;/li&gt;&#xA;&lt;li&gt;以 Picker &amp;amp; Toffee 为基础，DUT 以 Python 包形式被测试；可与 OpenHands/Copilot/Claude Code/Gemini-CLI/Qwen Code/ 等通过 MCP 协议深度协作。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;能力与目标&#34;&gt;能力与目标&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自动/半自动：生成/完善测试代码与文档、运行用例、汇总报告&lt;/li&gt;&#xA;&lt;li&gt;完整：功能覆盖率、代码行覆盖率与文档一致性&lt;/li&gt;&#xA;&lt;li&gt;可集成：支持标准 CLI、TUI；提供 MCP server 接口便于外部 Code Agent 接入&lt;/li&gt;&#xA;&lt;li&gt;目标：有效减少用户在验证过程中的重复工作&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;&#xA;&lt;h3 id=&#34;系统要求&#34;&gt;系统要求&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Python 版本： 3.11+&lt;/li&gt;&#xA;&lt;li&gt;操作系统：Linux / macOS&lt;/li&gt;&#xA;&lt;li&gt;API 需求：可访问 OpenAI 兼容 API&lt;/li&gt;&#xA;&lt;li&gt;内存：建议 4GB+&lt;/li&gt;&#xA;&lt;li&gt;依赖：&lt;a href=&#34;https://github.com/XS-MLVP/picker&#34;&gt;picker&lt;/a&gt;（将 Verilog DUT 导出为 Python 包）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;安装方式&#34;&gt;安装方式&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;方式一：克隆仓库并安装依赖&lt;/p&gt;</description>
    </item>
    <item>
      <title>工作流</title>
      <link>https://open-verify.cc/mlvp/docs/ucagent/workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/docs/ucagent/workflow/</guid>
      <description>&lt;p&gt;整体采用“按阶段渐进推进”的方式，每个阶段都有明确目标、产出与通过标准；完成后用工具 Check 验证并用 Complete 进入下一阶段。若阶段包含子阶段，需按顺序 逐一完成子阶段并各自通过 Check。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;顶层阶段总数：11（见 &lt;code&gt;vagent/lang/zh/config/default.yaml&lt;/code&gt;）&lt;/li&gt;&#xA;&lt;li&gt;推进原则：未通过的阶段不可跳转；可用工具 CurrentTips 获取当前阶段详细指导；需要回补时可用 GotoStage 回到指定阶段；命令行也可用 &amp;ndash;skip/--unskip 控制阶段索引。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;整体流程概览11-个阶段&#34;&gt;整体流程概览（11 个阶段）&lt;/h2&gt;&#xA;&lt;p&gt;目前的流程包含：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;需求分析与验证规划 → 2) {DUT} 功能理解 → 3) 功能规格分析与测试点定义 → 4) 测试平台基础架构设计 → 5) 功能覆盖率模型实现 → 6) 基础 API 实现 → 7) 基础 API 功能测试 → 8) 测试框架脚手架 → 9) 全面验证执行与缺陷分析 → 10) 代码行覆盖率分析与提升（默认跳过，可启用）→ 11) 验证审查与总结&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;以实际的工作流为准，下图仅供参考。&#xA;&lt;img src=&#34;workflow.png&#34; alt=&#34;工作流图&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;说明：以下路径中的 &lt;OUT&gt; 默认为工作目录下的输出目录名（默认 unity_test）。例如文档输出到 &lt;code&gt;&amp;lt;workspace&amp;gt;/unity_test/&lt;/code&gt;。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;阶段 1：需求分析与验证规划&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;目标：理解任务、明确验证范围与策略。&lt;/li&gt;&#xA;&lt;li&gt;怎么做：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;阅读 &lt;code&gt;{DUT}/README.md&lt;/code&gt;，梳理“需要测哪些功能/输入输出/边界与风险”。&lt;/li&gt;&#xA;&lt;li&gt;形成可执行的验证计划与目标清单。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;产出：&lt;code&gt;&amp;lt;OUT&amp;gt;/{DUT}_verification_needs_and_plan.md&lt;/code&gt;（中文撰写）。&lt;/li&gt;&#xA;&lt;li&gt;通过标准：文档存在、结构规范（自动检查 markdown_file_check）。&lt;/li&gt;&#xA;&lt;li&gt;检查器：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;UnityChipCheckerMarkdownFileFormat&#xA;&lt;ul&gt;&#xA;&lt;li&gt;作用：校验 Markdown 文件存在与格式，禁止把换行写成字面量“\n”。&lt;/li&gt;&#xA;&lt;li&gt;参数：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;markdown_file_list (str | List[str]): 待检查的 MD 文件路径或路径列表。示例：&lt;code&gt;{OUT}/{DUT}_verification_needs_and_plan.md&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;no_line_break (bool): 是否禁止把换行写成字面量 &amp;ldquo;\n&amp;rdquo;；true 表示禁止。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;阶段 2：{DUT} 功能理解&lt;/p&gt;</description>
    </item>
    <item>
      <title>定制功能</title>
      <link>https://open-verify.cc/mlvp/docs/ucagent/customize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/docs/ucagent/customize/</guid>
      <description>&lt;h2 id=&#34;添加工具与-mcp-server-工具&#34;&gt;添加工具与 MCP Server 工具&lt;/h2&gt;&#xA;&lt;p&gt;面向可修改本仓库代码的高级用户，以下说明如何：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;添加一个新工具（供本地/Agent 内调用）&lt;/li&gt;&#xA;&lt;li&gt;将工具暴露为 MCP Server 工具（供外部 IDE/客户端调用）&lt;/li&gt;&#xA;&lt;li&gt;控制选择哪些工具被暴露与如何调用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;涉及关键位置：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;vagent/tools/uctool.py&lt;/code&gt;：工具基类 UCTool、to_fastmcp（LangChain Tool → FastMCP Tool）&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;vagent/util/functions.py&lt;/code&gt;：&lt;code&gt;import_and_instance_tools&lt;/code&gt;（按名称导入实例）、&lt;code&gt;create_verify_mcps&lt;/code&gt;（启动 FastMCP）&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;vagent/verify_agent.py&lt;/code&gt;：装配工具清单，&lt;code&gt;start_mcps&lt;/code&gt; 组合并启动 Server&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;vagent/cli.py&lt;/code&gt; / &lt;code&gt;vagent/verify_pdb.py&lt;/code&gt;：命令行与 TUI 内的 MCP 启动命令&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;1-工具体系与装配&#34;&gt;1) 工具体系与装配&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;工具基类 UCTool：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;继承 LangChain BaseTool，内置：call_count 计数、call_time_out 超时、流式/阻塞提示、MCP Context 注入（ctx.info）、防重入等。&lt;/li&gt;&#xA;&lt;li&gt;推荐自定义工具继承 UCTool，获得更好的 MCP 行为与调试体验。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;运行期装配（VerifyAgent 初始化）：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基础工具：RoleInfo、ReadTextFile&lt;/li&gt;&#xA;&lt;li&gt;嵌入工具：参考检索与记忆（除非 &lt;code&gt;--no-embed-tools&lt;/code&gt;）&lt;/li&gt;&#xA;&lt;li&gt;文件工具：读/写/查找/路径等（可在 MCP 无文件工具模式下剔除）&lt;/li&gt;&#xA;&lt;li&gt;阶段工具：由 StageManager 按工作流动态提供&lt;/li&gt;&#xA;&lt;li&gt;外部工具：来自配置项 &lt;code&gt;ex_tools&lt;/code&gt; 与 CLI &lt;code&gt;--ex-tools&lt;/code&gt;（通过 &lt;code&gt;import_and_instance_tools&lt;/code&gt; 零参实例化）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;名称解析：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;短名：类/工厂函数需在 &lt;code&gt;vagent/tools/__init__.py&lt;/code&gt; 导出（例如 &lt;code&gt;from .mytool import HelloTool&lt;/code&gt;），即可在 &lt;code&gt;ex_tools&lt;/code&gt; 写 &lt;code&gt;HelloTool&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;全路径：&lt;code&gt;mypkg.mytools.HelloTool&lt;/code&gt; / &lt;code&gt;mypkg.mytools.Factory&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2-添加一个新工具本地agent-内&#34;&gt;2) 添加一个新工具（本地/Agent 内）&lt;/h3&gt;&#xA;&lt;p&gt;规范要求：&lt;/p&gt;</description>
    </item>
    <item>
      <title>工具列表</title>
      <link>https://open-verify.cc/mlvp/docs/ucagent/tool_list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/docs/ucagent/tool_list/</guid>
      <description>&lt;p&gt;以下为当前仓库内内置工具（UCTool 家族）的概览，按功能类别归纳：名称（调用名）、用途与参数说明（字段: 类型 — 含义）。&lt;/p&gt;&#xA;&lt;p&gt;提示：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;带有“文件写”能力的工具仅在本地/允许写模式下可用；MCP 无文件工具模式不会暴露写类工具。&lt;/li&gt;&#xA;&lt;li&gt;各工具均基于 args_schema 校验参数，MCP 客户端将根据 schema 生成参数表单。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;基础信息类&#34;&gt;基础/信息类&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;RoleInfo（RoleInfo）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用途：返回当前代理的角色信息（可在启动时自定义 role_info）。&lt;/li&gt;&#xA;&lt;li&gt;参数：无&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;HumanHelp（HumanHelp）&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用途：向人类请求帮助（仅在确实卡住时使用）。&lt;/li&gt;&#xA;&lt;li&gt;参数：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;message: str — 求助信息&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;规划todo-类&#34;&gt;规划/ToDo 类&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CreateToDo&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用途：创建 ToDo（覆盖旧 ToDo）。&lt;/li&gt;&#xA;&lt;li&gt;参数：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;task_description: str — 任务描述&lt;/li&gt;&#xA;&lt;li&gt;steps: List[str] — 步骤（1–20 步）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;CompleteToDoSteps&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用途：将指定步骤标记为完成，可附加备注。&lt;/li&gt;&#xA;&lt;li&gt;参数：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;completed_steps: List[int] — 完成的步骤序号（1-based）&lt;/li&gt;&#xA;&lt;li&gt;notes: str — 备注&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;UndoToDoSteps&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用途：撤销步骤完成状态，可附加备注。&lt;/li&gt;&#xA;&lt;li&gt;参数：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;steps: List[int] — 撤销的步骤序号（1-based）&lt;/li&gt;&#xA;&lt;li&gt;notes: str — 备注&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ResetToDo&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用途：重置/清空当前 ToDo。&lt;/li&gt;&#xA;&lt;li&gt;参数：无&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;GetToDoSummary / ToDoState&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用途：获取 ToDo 摘要 / 看板状态短语。&lt;/li&gt;&#xA;&lt;li&gt;参数：无&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;记忆检索类&#34;&gt;记忆/检索类&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;SemanticSearchInGuidDoc（SemanticSearchInGuidDoc）&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
