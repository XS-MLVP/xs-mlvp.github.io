<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编写测试用例 on 开放验证平台学习资源</title>
    <link>https://open-verify.cc/mlvp/docs/mlvp/cases/</link>
    <description>Recent content in 编写测试用例 on 开放验证平台学习资源</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="https://open-verify.cc/mlvp/docs/mlvp/cases/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何使用测试环境接口进行驱动</title>
      <link>https://open-verify.cc/mlvp/docs/mlvp/cases/executor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/docs/mlvp/cases/executor/</guid>
      <description>如何同时调用多个驱动函数 当验证环境搭建完成后，可以通过验证环境提供的接口来编写测试用例。然而，通过普通的串行代码，往往无法完成两个驱动函数的同时调用。在多个接口需要同时驱动的情况下，这种情况变得尤为重要，toffee 为这种场景提供了简便的调用方式。&#xA;同时调用多个不同类别的驱动函数 例如目前的 Env 结构如下：&#xA;DualPortStackEnv - port1_agent - @driver_method push - @driver_method pop - port2_agent - @driver_method push - @driver_method pop 我们期望在测试用例中同时调用 port1_agent 和 port2_agent 的 push 函数，以便同时驱动两个接口。&#xA;在 toffee 中，可以通过 Executor 来完成。&#xA;from toffee import Executor def test_push(env): async with Executor() as exec: exec(env.port1_agent.push(1)) exec(env.port2_agent.push(2)) print(&amp;#34;result&amp;#34;, exec.get_results()) 我们使用 async with 来创建一个 Executor 对象，并建立一个执行块，通过直接调用 exec 可以添加需要执行的驱动函数。当 Executor 对象退出作用域时，会将所有添加的驱动函数同时执行。Executor 会自动等待所有驱动函数执行完毕。&#xA;如果需要获取驱动函数的返回值，可以通过 get_results 方法来获取，get_results 会以字典的形式返回所有驱动函数的返回值，其中键为驱动函数的名称，值为一个列表，列表中存放了对应驱动函数的返回值。&#xA;同一驱动函数被多次调用 如果在在执行块中多次调用同一驱动函数，Executor 会自动将这些调用串行执行。&#xA;from toffee import Executor def test_push(env): async with Executor() as exec: for i in range(5): exec(env.</description>
    </item>
    <item>
      <title>如何使用 Pytest 管理测试用例</title>
      <link>https://open-verify.cc/mlvp/docs/mlvp/cases/pytest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/docs/mlvp/cases/pytest/</guid>
      <description>编写测试用例 在 toffee 中，测试用例是通过 pytest 来管理的。pytest 是一个功能强大的 Python 测试框架，如果你不熟悉 pytest，可以查看 pytest 官方文档。&#xA;编写第一个测试用例 首先，我们需要创建一个测试用例文件，例如 test_adder.py，该文件需要以 test_ 开头，或以 _test.py 结尾，以便 pytest 能够识别。接着可以在其中编写我们的第一个测试用例。&#xA;# test_adder.py async def my_test(): env = AdderEnv() env.add_agent.exec_add(1, 2, 0) def test_adder(): toffee.run(my_test()) pytest 并不能直接运行协程测试用例，因此我们需要在测试用例中调用 toffee.run 来运行异步测试用例。&#xA;用例编写完成后，我们可以在终端中运行 pytest。&#xA;pytest pytest 会查找当前目录下所有以 test_ 开头或以 _test.py 结尾的文件，并运行其中以 test_ 开头的函数，每一个函数被视作一个测试用例。&#xA;运行协程测试用例 为了使 pytest 能够直接运行协程测试用例，toffee 提供了 toffee_async 标记来标记异步测试用例。&#xA;# test_adder.py @pytest.mark.toffee_async async def test_adder(): env = AdderEnv(DUTAdder()) await env.add_agent.exec_add(1, 2, 0) 如图所示，我们只需要在测试用例函数上添加 @pytest.</description>
    </item>
    <item>
      <title>功能检查点（功能覆盖率）</title>
      <link>https://open-verify.cc/mlvp/docs/mlvp/cases/cov/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/docs/mlvp/cases/cov/</guid>
      <description>什么是功能检查点 在 toffee 中，功能检查点(Cover Point) 是指对设计的某个功能进行验证的最小单元，判断该功能是否满足设计目标。测试组(Cover Croup) 是一类检查点的集合。&#xA;定义一个检查点，需要指定检查点的名称及检查点的触发条件（触发条件可以有多个，最终的检查结果为所有条件取“逻辑与”，触发条件称为Cover Bin）。例如，可以定义了一个检查点，“当加法器运算结果不为 0 时，结果运算正确”，此时，检查点的触发条件可以为 “加法器的 sum 信号不为零”。&#xA;当检查点的所有触发条件都满足时，检查点被触发，此时，验证报告将会记录下该检查点的触发。并会提升验证的功能覆盖率。当所有检查点都被触发时，验证的功能覆盖率达到 100%。&#xA;如何编写检查点 编写检查点前，首先需要创建一个测试组，并指定测试组的名称&#xA;import toffee.funcov as fc g = fc.CovGroup(&amp;#34;Group-A&amp;#34;) 接着，需要往这个测试组中添加检查点。一般情况下，一个功能点对应一个或多个检查点，用来检查是否满足该功能。例如我们需要检查Adder的cout是否有0出现，我们可以通过如下方式添加：&#xA;g.add_watch_point(adder.io_cout, {&amp;#34;io_cout is 0&amp;#34;: fc.Eq(0)}, name=&amp;#34;cover_point_1&amp;#34;) 在上述检查点中，需要观察的数据为io_cout引脚，检查条件(Cover Bin)的名称为io_cout is 0，检查点名称为cover_point_1。函数add_watch_point的参数说明如下：&#xA;def add_watch_point(target, bins: dict, name: str = &amp;#34;&amp;#34;, once=None): &amp;#34;&amp;#34;&amp;#34; @param target: 检查目标，可以是一个引脚，也可以是一个DUT对象 @param bins: 检查条件，dict格式，key为条件名称，value为具体检查方法或者检查方法的数组。 @param name: 检查点名称 @param once，如果once=True，表明只检查一次，一旦该检查点满足要求后就不再进行重复条件判断。 通常情况下，target为DUT引脚，bins中的检查函数来检查target的value是否满足预定义条件。funcov模块内存了部分检查函数，例如Eq(x), Gt(x), Lt(x), Ge(x), Le(x), Ne(x), In(list), NotIn(list), isInRange([low,high])等。当内置检查函数不满足要求时，也可以自定义，例如需要跨时钟周期进行检查等。自定义检查函数的输入参数为target，返回值为bool。例如：&#xA;g.add_watch_point(adder.io_cout, { &amp;#34;io_cout is 0&amp;#34;: lambda x: x.</description>
    </item>
  </channel>
</rss>
