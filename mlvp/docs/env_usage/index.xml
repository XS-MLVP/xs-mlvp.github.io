<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基础工具 on 开放验证平台学习资源</title>
    <link>https://xs-mlvp.github.io/mlvp/docs/env_usage/</link>
    <description>Recent content in 基础工具 on 开放验证平台学习资源</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="https://xs-mlvp.github.io/mlvp/docs/env_usage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>工具介绍</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/env_usage/picker_usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/env_usage/picker_usage/</guid>
      <description>为满足开放验证的环境要求，我们开发了 Picker 工具，用于将 RTL 设计转换为多语言接口，并在此基础上进行验证，我们将会使用 Picker 工具生成的环境作为基础的验证环境。接下来我们将介绍 Picker 工具，及其基础的使用方法。&#xA;Picker 简介 picker 是一个芯片验证辅助工具，具有两个主要功能：&#xA;打包RTL设计验证模块： picker 可以将 RTL 设计验证模块（.v/.scala/.sv）打包成动态库，并提供多种高级语言（目前支持 C++、Python、Java、Scala、Golang）的编程接口来驱动电路。 UVM-TLM代码自动生成： picker 能够基于用户提供的 UVM sequence_item 进行自动化的 TLM 代码封装，提供 UVM 与其他高级语言（如 Python）的通信接口。 该工具允许用户基于现有的软件测试框架，例如 pytest、junit、TestNG、go test 等，进行芯片单元测试。 基于 Picker 进行验证的优点:&#xA;不泄露 RTL 设计：经过 Picker 转换后，原始的设计文件（.v）被转化成了二进制文件（.so），脱离原始设计文件后，依旧可进行验证，且验证者无法获取 RTL 源代码。 减少编译时间：当 DUT（设计待测）稳定时，只需要编译一次（打包成 .so 文件）。 用户范围广：提供的编程接口多，覆盖不同语言的开发者。 使用丰富的软件生态：支持 Python3、Java、Golang 等生态系统。 自动化的 UVM 事务封装：通过自动化封装 UVM 事务，实现 UVM 和 Python 的通信。 Picker 目前支持的 RTL 仿真器：&#xA;Verilator Synopsys VCS Picker的工作原理</description>
    </item>
    <item>
      <title>波形生成</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/env_usage/wave/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/env_usage/wave/</guid>
      <description>使用方法 在使用 Picker 工具封装 DUT 时，使用选项-w [wave_file]指定需要保存的波形文件。 针对不同的后端仿真器，支持不同的波形文件类型，具体如下：&#xA;Verilator .vcd格式的波形文件。 .fst格式的波形文件，更高效的压缩文件。 VCS .fsdb格式的波形文件，更高效的压缩文件。 需要注意的是，如果你选择自行生成 libDPI_____.so 文件，那么波形文件格式不受上述约束的限制。因为波形文件是在仿真器构建 libDPI.so 时决定的，如果你自行生成，那么波形文件格式也需要自行用对应仿真器的配置指定。&#xA;Python 示例 正常情况下，dut需要被显式地声明完成任务，以通知进行模拟器的后处理工作（写入波形、覆盖率等文件）。 在Python中，需要在完成所有测试后，调用dut的.finalize()方法以通知模拟器任务已完成，进而将文件flush到磁盘。&#xA;以加法器为例，以下为测试程序：&#xA;from UT_Adder import * if __name__ == &amp;#34;__main__&amp;#34;: dut = DUTAdder() for i in range(10): dut.a.value = i * 2 dut.b.value = int(i / 4) dut.Step(1) print(dut.sum.value, dut.cout.value) dut.finalize() # flush the wave file to disk 运行结束后即可生成指定文件名的波形文件。&#xA;查看结果 GTKWave 使用 GTKWave 打开 fst 或 vcd 波形文件，即可查看波形图。&#xA;Verdi 使用 Verdi 打开 fsdb 或 vcd 波形文件，即可查看波形图。</description>
    </item>
    <item>
      <title>多文件输入</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/env_usage/multifile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/env_usage/multifile/</guid>
      <description>多文件输入输出 在许多情况中，某文件下的某个模块会例化其他文件下的模块，在这种情况下您可以使用Picker工具的-f选项处理多个verilog源文件。例如，假设您有Cache.sv, CacheStage.sv以及CacheMeta.sv三个源文件：&#xA;文件列表 Cache.sv // In module Cache( ... ); CacheStage s1( ... ); CacheStage s2( ... ); CacheStage s3( ... ); CacheMeta cachemeta( ... ); endmodule CacheStage.sv // In CacheStage.sv module CacheStage( ... ); ... endmodule CacheMeta.sv // In CacheMeta.sv module CacheMeta( ... ); ... endmodule 应用方式 其中，待测模块为Cache，位于Cache.sv中，则您可以通过以下命令生成DUT：&#xA;命令行指定 picker export Cache.sv --fs CacheStage.sv,CacheMeta.sv --sname Cache 通过文件列表文件指定 您也可以通过传入.txt文件的方式来实现多文件输入：&#xA;picker export Cache.sv --fs src.txt --sname Cache 其中src.txt的内容为:&#xA;CacheStage.sv CacheMeta.sv 注意事项 需要注意的是，使用多文件输入时仍需要指定待测顶层模块所在的文件，例如上文中所示的Cache.</description>
    </item>
    <item>
      <title>覆盖率统计</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/env_usage/coverage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/env_usage/coverage/</guid>
      <description>Picker 工具支持生成代码行覆盖率报告，toffee-test（https://github.com/XS-MLVP/toffee-test） 项目支持生成功能覆盖率报告。&#xA;代码行覆盖率 目前 Picker 工具支持基于 Verilator 仿真器生成的代码行覆盖率报告。&#xA;Verilator Verilator 仿真器提供了覆盖率支持功能。&#xA;该功能的实现方式是：&#xA;利用 verilator_coverage 工具处理或合并覆盖率数据库，最终针对多个 DUT 生成一个 coverage.info 文件。 利用 lcov 工具的 genhtml 命令基于coverage.info和 RTL 代码源文件，生成完整的代码覆盖率报告。 使用时的流程如下：&#xA;使用 Picker 生成 dut 时，使能 COVERAGE 功能 （添加-c选项）。 仿真器运行完成后，dut.finalize() 之后会生成覆盖率数据库文件 V{DUT_NAME}.dat。 基于 verilator_coverage 的 write-info 功能将其转换成 .info文件。 基于 lcov 的 genhtml 功能，使用.info文件和文件中指定的rtl 源文件，生成 html 报告。 注意： 文件中指定的rtl 源文件是指在生成的DUT时使用的源文件路径，需要保证这些路径在当前环境下是有效的。简单来说，需要编译时用到的所有.sv/.v文件都需要在当前环境下存在，并且目录不变。&#xA;verilator_coverage verilator_coverage 工具用于处理 DUT 运行后生成的 .dat 的覆盖率数据。该工具可以处理并合并多个 .dat 文件，同时具有两类功能：&#xA;基于 .dat 文件生成 .info 文件，用于后续生成网页报告。</description>
    </item>
  </channel>
</rss>
