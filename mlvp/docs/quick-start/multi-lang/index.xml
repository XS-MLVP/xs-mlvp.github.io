<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenVerify Courses – 多语言</title>
    <link>https://xs-mlvp.github.io/mlvp/docs/quick-start/multi-lang/</link>
    <description>Recent content in 多语言 on OpenVerify Courses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	  <atom:link href="https://xs-mlvp.github.io/mlvp/docs/quick-start/multi-lang/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: C&#43;&#43;</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/quick-start/multi-lang/cpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/mlvp/docs/quick-start/multi-lang/cpp/</guid>
      <description>
        
        
        &lt;h2 id=&#34;流程介绍&#34;&gt;流程介绍&lt;/h2&gt;
&lt;h3 id=&#34;基础库&#34;&gt;基础库&lt;/h3&gt;
&lt;p&gt;在本章节中，我们将介绍如何使用Picker将RTL代码编译为C++ Class，并编译为动态库。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，Picker工具会解析RTL代码，根据指定的 Top Module ，创建一个新的 Module 封装该模块的&lt;strong&gt;输入输出端口&lt;/strong&gt;，并导出&lt;code&gt;DPI/API&lt;/code&gt;以操作输入端口、读取输出端口。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;工具通过指定Top Module所在的文件和 Module Name来确定需要封装的模块。此时可以将 Top 理解为软件编程中的main。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;其次，Picker工具会使用指定的 &lt;strong&gt;仿真器&lt;/strong&gt; 编译RTL代码，并生成一个&lt;strong&gt;DPI库文件&lt;/strong&gt;。该库文件内包含模拟运行RTL代码所需要的逻辑（即为&lt;strong&gt;硬件模拟器&lt;/strong&gt;）。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;对于VCS，该库文件为.so（动态库）文件，对于Verilator，该库文件为.a（静态库）文件。&lt;/em&gt;&lt;br&gt;
&lt;em&gt;DPI的含义是 &lt;a href=&#34;https://www.chipverify.com/systemverilog/systemverilog-dpi&#34;&gt;Direct Programming Interface&lt;/a&gt;，可以理解为一种API规范。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;接下来，Picker工具会根据配置参数，渲染源代码中定义的基类，生成用于对接仿真器并&lt;strong&gt;隐藏仿真器细节&lt;/strong&gt;的基类（wrapper）。然后链接基类与DPI库文件，生成一个 &lt;strong&gt;UT动态库文件&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;此时，该&lt;strong&gt;UT库文件&lt;/strong&gt;使用了Picker工具模板中提供的统一API，相比于&lt;strong&gt;DPI库文件&lt;/strong&gt;中与仿真器强相关的API，UT库文件为仿真器生成的硬件模拟器，提供了&lt;strong&gt;统一的API接口&lt;/strong&gt;。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;截至这一步生成&lt;strong&gt;UT库文件&lt;/strong&gt;在不同语言中是&lt;strong&gt;通用&lt;/strong&gt;的！如果没有另行说明，其他高级语言均会通过&lt;strong&gt;调用UT动态库&lt;/strong&gt;以实现对硬件模拟器的操作。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;最后，Picker工具会根据配置参数和解析的RTL代码，生成一段 &lt;strong&gt;C++ Class&lt;/strong&gt; 的源码。这段源码即是 RTL 硬件模块在软件中的&lt;strong&gt;定义 (.hpp)&lt;/strong&gt; 及&lt;strong&gt;实现 (.cpp)&lt;/strong&gt; 。实例化该类即相当于创建了一个硬件模块。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;该类继承自&lt;strong&gt;基类&lt;/strong&gt;，并实现了基类中的纯虚函数，以用软件方式实例化硬件。&lt;/em&gt;&lt;br&gt;
&lt;em&gt;不将&lt;strong&gt;类的实现&lt;/strong&gt;这一步也封装进动态库的原因有两点：&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;由于&lt;strong&gt;UT库文件&lt;/strong&gt;需要在不同语言中&lt;strong&gt;通用&lt;/strong&gt;，而不同语言实现类的方式不同。为了通用性，不将&lt;code&gt;类的实现&lt;/code&gt;封装进动态库。&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;为了&lt;strong&gt;便于调试&lt;/strong&gt;，提升代码可读性，方便用户进行二次封装和修改。&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;生成可执行文件&#34;&gt;生成可执行文件&lt;/h3&gt;
&lt;p&gt;在本章节中，我们将介绍如何基于上一章节生成的基础库（包含动态库，类的声明及定义），编写测试用例，生成可执行文件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先，用户需要编写测试用例，即实例化上一章节生成的类，并调用类中的方法，以实现对硬件模块的操作。&lt;br&gt;
详情可以参考&lt;a href=&#34;docs/quick-start/examples/rmg/#%E9%85%8D%E7%BD%AE%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81&#34;&gt;随机数生成器验证-配置测试代码&lt;/a&gt;中实例化及初始化的过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其次，用户需要根据基础库所应用的&lt;strong&gt;不同仿真器&lt;/strong&gt;，应用不同的链接参数以生成可执行文件。对应的参数在&lt;code&gt;template/cpp/cmake/*.cmake&lt;/code&gt;中有定义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最终根据配置的链接参数，编译器会链接基础库，生成可执行文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;以 &lt;a href=&#34;docs/quick-start/examples/adder/#%E5%B0%86rtl%E6%9E%84%E5%BB%BA%E4%B8%BAc-class&#34;&gt;加法器验证&lt;/a&gt; 为例，&lt;code&gt;picker_out_adder/cpp/cmake/*.cmake&lt;/code&gt;即是上述表项2所述模板的拷贝。&lt;br&gt;
&lt;code&gt;vcs.cmake&lt;/code&gt;定义了使用VCS仿真器生成的基础库的链接参数，&lt;code&gt;verilator.cmake&lt;/code&gt;定义了使用Verilator仿真器生成的基础库的链接参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;使用方案&#34;&gt;使用方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;参数 &lt;code&gt;--language cpp&lt;/code&gt; 或 &lt;code&gt;-l cpp&lt;/code&gt; 用于指定生成C++基础库。&lt;/li&gt;
&lt;li&gt;参数 &lt;code&gt;-e&lt;/code&gt; 用于生成包含示例项目的可执行文件。&lt;/li&gt;
&lt;li&gt;参数 &lt;code&gt;-v&lt;/code&gt; 用于保留生成项目时的中间文件。&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Python</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/quick-start/multi-lang/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/mlvp/docs/quick-start/multi-lang/python/</guid>
      <description>
        
        
        
      </description>
    </item>
    
  </channel>
</rss>
