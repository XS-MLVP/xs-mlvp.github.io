<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开放验证平台学习资源 – 多语言支持</title>
    <link>https://xs-mlvp.github.io/mlvp/docs/multi-lang/</link>
    <description>Recent content in 多语言支持 on 开放验证平台学习资源</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	  <atom:link href="https://xs-mlvp.github.io/mlvp/docs/multi-lang/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 验证接口</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/multi-lang/interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/mlvp/docs/multi-lang/interface/</guid>
      <description>
        
        
        &lt;h2 id=&#34;生成库文件&#34;&gt;生成库文件&lt;/h2&gt;
&lt;p&gt;picker可以通过参数&lt;code&gt;--lang&lt;/code&gt;指定转换的对应语言（参数已支持cpp、python、java、scala、golang），由于不同编程语言对应的“库”不同，因此生成的库文件有所区别，例如java生成的是jar包，python生成的为文件夹。picker导出对应编程语言的库，需要xcomm的支持，可以通过&lt;code&gt;picker --check&lt;/code&gt;查看支持情况：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;$picker&lt;/span&gt; --check
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;OK &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; Version: 0.9.0---dirty
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;OK &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; Exec path: /home/yaozhicheng/mambaforge/lib/python3.11/site-packages/picker/bin/picker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;OK &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; Template path: /home/yaozhicheng/mambaforge/lib/python3.11/site-packages/picker/share/picker/template
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;OK &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; Support    Cpp &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;find: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;/home/yaozhicheng/mambaforge/lib/python3.11/site-packages/picker/share/picker/include&amp;#39;&lt;/span&gt; success&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;Err&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; Support   Java &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;find: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;java/xspcomm-java.jar&amp;#39;&lt;/span&gt; fail&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;Err&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; Support  Scala &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;find: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;scala/xspcomm-scala.jar&amp;#39;&lt;/span&gt; fail&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;OK &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; Support Python &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;find: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;/home/yaozhicheng/mambaforge/lib/python3.11/site-packages/picker/share/picker/python&amp;#39;&lt;/span&gt; success&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[&lt;/span&gt;Err&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;]&lt;/span&gt; Support Golang &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;(&lt;/span&gt;find: &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#39;golang&amp;#39;&lt;/span&gt; fail&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出显示success表示支持，fail表示不支持。&lt;/p&gt;
&lt;h3 id=&#34;c&#34;&gt;C++&lt;/h3&gt;
&lt;p&gt;对于C++语言，picker生成的为so动态链接库，和对应的头文件。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UT_Adder/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── UT_Adder.cpp       &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# DUT 文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── UT_Adder.hpp       &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# DUT 头文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── UT_Adder_dpi.hpp   &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# DPI 头文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── dut_base.hpp       &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# DUT base 头文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── libDPIAdder.a      &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# DPI 静态库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── libUTAdder.so      &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# DUT 动态库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在使用时，设置好LD路径，然后再测试代码中&lt;code&gt;#include UT_Adder.hpp&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;p&gt;Python语言生成的为目录（Python module以目录的方式表示）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UT_Adder/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── _UT_Adder.so
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── __init__.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── libUTAdder.so
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── libUT_Adder.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置PYTHONPATH后，可以在test中&lt;code&gt;import UT_Adder&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;javascala&#34;&gt;Java/scala&lt;/h3&gt;
&lt;p&gt;对于Java和scala基于JVM的编程语言，picker生成的为对应的jar包。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UT_Adder/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── UT_Adder-scala.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── UT_Adder-java.jar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;go&#34;&gt;go&lt;/h3&gt;
&lt;p&gt;go语言生成的为目录（类似python）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UT_Adder/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── golang
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └── src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        └── UT_Adder
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ├── UT_Adder.go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ├── UT_Adder.so
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ├── UT_Adder_Wrapper.go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ├── go.mod
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            └── libUTAdder.so
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置GOPATH后，可直接进行import&lt;/p&gt;
&lt;h2 id=&#34;验证接口&#34;&gt;验证接口&lt;/h2&gt;
&lt;p&gt;DUT验证接口可以参考连接：&lt;a href=&#34;https://github.com/XS-MLVP/picker/blob/master/doc/API.zh.md&#34;&gt;https://github.com/XS-MLVP/picker/blob/master/doc/API.zh.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;xspcomm库接口请参考连接：&lt;a href=&#34;https://github.com/XS-MLVP/xcomm/blob/master/docs/APIs.cn.md&#34;&gt;https://github.com/XS-MLVP/xcomm/blob/master/docs/APIs.cn.md&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 验证案例</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/multi-lang/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/mlvp/docs/multi-lang/examples/</guid>
      <description>
        
        
        &lt;p&gt;以Adder为例，各语言的验证代码和注释如下：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
    
    &lt;div style=&#34;background-color: #f0f0f0; display: flex; justify-content: flex-end; gap: 5px; padding-right: 5px&#34;&gt;
        
            &lt;a name=&#34;multi-lang-toggle&#34; style=&#34;font-size: 12px;&#34; lang=&#39;cpp&#39; href=&#34;javascript://&#34;&gt;Cpp&lt;/a&gt;
        
            &lt;a name=&#34;multi-lang-toggle&#34; style=&#34;font-size: 12px;&#34; lang=&#39;java&#39; href=&#34;javascript://&#34;&gt;Java&lt;/a&gt;
        
            &lt;a name=&#34;multi-lang-toggle&#34; style=&#34;font-size: 12px;&#34; lang=&#39;scala&#39; href=&#34;javascript://&#34;&gt;Scala&lt;/a&gt;
        
            &lt;a name=&#34;multi-lang-toggle&#34; style=&#34;font-size: 12px;&#34; lang=&#39;python&#39; href=&#34;javascript://&#34;&gt;Python&lt;/a&gt;
        
            &lt;a name=&#34;multi-lang-toggle&#34; style=&#34;font-size: 12px;&#34; lang=&#39;go&#39; href=&#34;javascript://&#34;&gt;Go&lt;/a&gt;
        
    &lt;/div&gt;
    




  
  


&lt;pre name=&#34;group-lang-code-cpp&#34; class=&#34;language-cpp line-numbers&#34; style=&#34;display:true;&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &#34;UT_Adder.hpp&#34;

int64_t random_int64()
{
    static std::random_device rd;
    static std::mt19937_64 generator(rd());
    static std::uniform_int_distribution&lt;int64_t&gt; distribution(INT64_MIN,
                                                               INT64_MAX);
    return distribution(generator);
}

int main()
{
    UTAdder *dut = new UTAdder();
    dut-&gt;Step(1);
    printf(&#34;Initialized UTAdder\n&#34;);

    struct input_t {
        uint64_t a;
        uint64_t b;
        uint64_t cin;
    };

    struct output_t {
        uint64_t sum;
        uint64_t cout;
    };

    for (int c = 0; c &lt; 114514; c++) {
        input_t i;
        output_t o_dut, o_ref;

        i.a   = random_int64();
        i.b   = random_int64();
        i.cin = random_int64() &amp; 1;

        auto dut_cal = [&amp;]() {
            dut-&gt;a   = i.a;
            dut-&gt;b   = i.b;
            dut-&gt;cin = i.cin;
            dut-&gt;Step(1);
            o_dut.sum  = (uint64_t)dut-&gt;sum;
            o_dut.cout = (uint64_t)dut-&gt;cout;
        };

        auto ref_cal = [&amp;]() {
            uint64_t sum = i.a + i.b;
            bool carry   = sum &lt; i.a;

            sum += i.cin;
            carry = carry || sum &lt; i.cin;

            o_ref.sum  = sum;
            o_ref.cout = carry ;
        };

        dut_cal();
        ref_cal();
        printf(&#34;[cycle %lu] a=0x%lx, b=0x%lx, cin=0x%lx\n&#34;, dut-&gt;xclock.clk, i.a,
               i.b, i.cin);
        printf(&#34;DUT: sum=0x%lx, cout=0x%lx\n&#34;, o_dut.sum, o_dut.cout);
        printf(&#34;REF: sum=0x%lx, cout=0x%lx\n&#34;, o_ref.sum, o_ref.cout);
        Assert(o_dut.sum == o_ref.sum, &#34;sum mismatch&#34;);
    }

    dut-&gt;Finish();
    printf(&#34;Test Passed, destory UTAdder\n&#34;);
    return 0;
}&lt;/code&gt;&lt;/pre&gt;





  
  


&lt;pre name=&#34;group-lang-code-java&#34; class=&#34;language-java line-numbers&#34; style=&#34;display:none;&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;package com.ut;

import java.math.BigInteger;

// import the generated UT class
import com.ut.UT_Adder;

public class example {
    static public void main(String[] args){
        UT_Adder adder = new UT_Adder();
        for(int i=0; i&lt;10000; i++){
            int N = 1000000;
            long a = (long) (Math.random() * N);
            long b = (long) (Math.random() * N);
            long c = (long) (Math.random() * N) &gt; 50 ? 1 : 0;
            // set inputs
            adder.a.Set(a);
            adder.b.Set(b);
            adder.cin.Set(c);
            // step
            adder.Step();
            // reference model
            long sum = a + b;
            boolean carry = sum &lt; a ? true : false;
            sum += c;
            carry = carry || sum &lt; c;
            // assert
            assert adder.sum.U().longValue() == sum : &#34;sum mismatch: &#34; + adder.sum.U() + &#34; != &#34; + sum;
            assert adder.cout.U().intValue() == (carry ? 1 : 0) : &#34;carry mismatch: &#34; + adder.cout.U() + &#34; != &#34; + carry;
        }
        System.out.println(&#34;Java tests passed&#34;);
        adder.Finish();
    }
}&lt;/code&gt;&lt;/pre&gt;





  
  


&lt;pre name=&#34;group-lang-code-scala&#34; class=&#34;language-scala line-numbers&#34; style=&#34;display:none;&#34;&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.ut

import java.lang.Math
import com.ut.UT_Adder

object example {
    def main(args: Array[String]): Unit = {
      val adder = new UT_Adder()
      for (i &lt;- 0 until 10000) {
        val N = 1000000
        val a = (Math.random() * N).toLong
        val b = (Math.random() * N).toLong
        val c = if ((Math.random() * N).toLong &gt; 50) 1 else 0

        // set inputs
        adder.a.Set(a)
        adder.b.Set(b)
        adder.cin.Set(c)

        // step
        adder.Step()

        // reference model
        var sum = a + b
        var carry = if (sum &lt; a) true else false
        sum += c
        carry = carry || (sum &lt; c)

        // assert
        assert(adder.sum.U().longValue() == sum, s&#34;sum mismatch: ${adder.sum.U()} != $sum&#34;)
        assert(adder.cout.U().intValue() == (if (carry) 1 else 0), s&#34;carry mismatch: ${adder.cout.U()} != $carry&#34;)
        println(s&#34;[cycle ${adder.xclock.getClk().intValue()}] a=${adder.a.U64()}, b=${adder.b.U64()}, cin=${adder.cin.U64()}&#34;)
      }
      println(&#34;Scala tests passed&#34;)
      adder.Finish()
    }
}&lt;/code&gt;&lt;/pre&gt;





  
  


&lt;pre name=&#34;group-lang-code-python&#34; class=&#34;language-python line-numbers&#34; style=&#34;display:none;&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;from UT_Adder import *

import random

class input_t:
    def __init__(self, a, b, cin):
        self.a = a
        self.b = b
        self.cin = cin

class output_t:
    def __init__(self):
        self.sum = 0
        self.cout = 0

def random_int():
    return random.randint(-(2**127), 2**127 - 1) &amp; ((1 &lt;&lt; 128) - 1)

def as_uint(x, nbits):
    return x &amp; ((1 &lt;&lt; nbits) - 1)

def main():
    dut = DUTAdder()  # Assuming USE_VERILATOR
    
    print(&#34;Initialized UTAdder&#34;)
    
    for c in range(11451):
        i = input_t(random_int(), random_int(), random_int() &amp; 1)
        o_dut, o_ref = output_t(), output_t()
        
        def dut_cal():
            dut.a.value, dut.b.value, dut.cin.value = i.a, i.b, i.cin
            dut.Step(1)
            o_dut.sum = dut.sum.value
            o_dut.cout = dut.cout.value
        
        def ref_cal():
            sum = as_uint( i.a + i.b + i.cin, 128+1)
            o_ref.sum = as_uint(sum, 128)
            o_ref.cout = as_uint(sum &gt;&gt; 128, 1)
        
        dut_cal()
        ref_cal()
        
        print(f&#34;[cycle {dut.xclock.clk}] a=0x{i.a:x}, b=0x{i.b:x}, cin=0x{i.cin:x}&#34;)
        print(f&#34;DUT: sum=0x{o_dut.sum:x}, cout=0x{o_dut.cout:x}&#34;)
        print(f&#34;REF: sum=0x{o_ref.sum:x}, cout=0x{o_ref.cout:x}&#34;)
        
        assert o_dut.sum == o_ref.sum, &#34;sum mismatch&#34;

    dut.Finish()
    
    print(&#34;Test Passed, destroy UTAdder&#34;)

if __name__ == &#34;__main__&#34;:
    main()&lt;/code&gt;&lt;/pre&gt;





  
  


&lt;pre name=&#34;group-lang-code-go&#34; class=&#34;language-go line-numbers&#34; style=&#34;display:none;&#34;&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&#34;fmt&#34;
    &#34;time&#34;
    &#34;math/rand&#34;
    ut &#34;UT_Adder&#34;
)

func assert(cond bool, msg string) {
    if !cond {
        panic(msg)
    }
}

func main() {
    adder := ut.NewUT_Adder()
    rand.Seed(time.Now().UnixNano())
    for i := 0; i &lt; 10000; i++ {
        N := 1000000
        a := rand.Int63n(int64(N))
        b := rand.Int63n(int64(N))
        var c int64
        if rand.Int63n(int64(N)) &gt; 50 {
            c = 1
        } else {
            c = 0
        }

        adder.A.Set(a)
        adder.B.Set(b)
        adder.Cin.Set(c)

        adder.Step()

        // reflerence model
        sum := a + b
        carry := sum &lt; a
        sum += c
        carry = carry || sum &lt; c

        // assert
        assert(adder.Sum.U64() == uint64(sum), fmt.Sprintf(&#34;sum mismatch: %d != %d\n&#34;, adder.Sum.U64(), uint64(sum)))
        
        var carry_bool uint64
        if carry {
            carry_bool = 1
        } else {
            carry_bool = 0
        }
        assert(adder.Cout.U64() == carry_bool, fmt.Sprintf(&#34;carry mismatch: %d != %t\n&#34;, adder.Cout.U().Int64(), carry))
    }
    adder.Finish();
    fmt.Println(&#34;Golang tests passed&#34;)
}&lt;/code&gt;&lt;/pre&gt;




&lt;/div&gt;


      </description>
    </item>
    
  </channel>
</rss>
