<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开放验证平台学习资源 – 验证案例</title>
    <link>https://xs-mlvp.github.io/mlvp/docs/multi-lang/examples/</link>
    <description>Recent content in 验证案例 on 开放验证平台学习资源</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	  <atom:link href="https://xs-mlvp.github.io/mlvp/docs/multi-lang/examples/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 加法器</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/multi-lang/examples/adder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/mlvp/docs/multi-lang/examples/adder/</guid>
      <description>
        
        
        &lt;p&gt;以Adder为例，各语言的验证代码和注释如下：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
    
    &lt;div style=&#34;background-color: #f0f0f0; display: flex; justify-content: flex-end; gap: 5px; padding-right: 5px&#34;&gt;
        
            &lt;a name=&#34;multi-lang-toggle&#34; style=&#34;font-size: 12px;&#34; lang=&#39;cpp&#39; href=&#34;javascript://&#34;&gt;Cpp&lt;/a&gt;
        
            &lt;a name=&#34;multi-lang-toggle&#34; style=&#34;font-size: 12px;&#34; lang=&#39;java&#39; href=&#34;javascript://&#34;&gt;Java&lt;/a&gt;
        
            &lt;a name=&#34;multi-lang-toggle&#34; style=&#34;font-size: 12px;&#34; lang=&#39;scala&#39; href=&#34;javascript://&#34;&gt;Scala&lt;/a&gt;
        
            &lt;a name=&#34;multi-lang-toggle&#34; style=&#34;font-size: 12px;&#34; lang=&#39;python&#39; href=&#34;javascript://&#34;&gt;Python&lt;/a&gt;
        
            &lt;a name=&#34;multi-lang-toggle&#34; style=&#34;font-size: 12px;&#34; lang=&#39;go&#39; href=&#34;javascript://&#34;&gt;Go&lt;/a&gt;
        
    &lt;/div&gt;
    




  
  


&lt;pre name=&#34;group-lang-code-cpp&#34; class=&#34;language-cpp line-numbers&#34; style=&#34;display:true;&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &#34;UT_Adder.hpp&#34;

int64_t random_int64()
{
    static std::random_device rd;
    static std::mt19937_64 generator(rd());
    static std::uniform_int_distribution&lt;int64_t&gt; distribution(INT64_MIN,
                                                               INT64_MAX);
    return distribution(generator);
}

int main()
{
    UTAdder *dut = new UTAdder();
    dut-&gt;Step(1);
    printf(&#34;Initialized UTAdder\n&#34;);

    struct input_t {
        uint64_t a;
        uint64_t b;
        uint64_t cin;
    };

    struct output_t {
        uint64_t sum;
        uint64_t cout;
    };

    for (int c = 0; c &lt; 114514; c++) {
        input_t i;
        output_t o_dut, o_ref;

        i.a   = random_int64();
        i.b   = random_int64();
        i.cin = random_int64() &amp; 1;

        auto dut_cal = [&amp;]() {
            dut-&gt;a   = i.a;
            dut-&gt;b   = i.b;
            dut-&gt;cin = i.cin;
            dut-&gt;Step(1);
            o_dut.sum  = (uint64_t)dut-&gt;sum;
            o_dut.cout = (uint64_t)dut-&gt;cout;
        };

        auto ref_cal = [&amp;]() {
            uint64_t sum = i.a + i.b;
            bool carry   = sum &lt; i.a;

            sum += i.cin;
            carry = carry || sum &lt; i.cin;

            o_ref.sum  = sum;
            o_ref.cout = carry ;
        };

        dut_cal();
        ref_cal();
        printf(&#34;[cycle %lu] a=0x%lx, b=0x%lx, cin=0x%lx\n&#34;, dut-&gt;xclock.clk, i.a,
               i.b, i.cin);
        printf(&#34;DUT: sum=0x%lx, cout=0x%lx\n&#34;, o_dut.sum, o_dut.cout);
        printf(&#34;REF: sum=0x%lx, cout=0x%lx\n&#34;, o_ref.sum, o_ref.cout);
        Assert(o_dut.sum == o_ref.sum, &#34;sum mismatch&#34;);
    }

    dut-&gt;Finish();
    printf(&#34;Test Passed, destory UTAdder\n&#34;);
    return 0;
}&lt;/code&gt;&lt;/pre&gt;





  
  


&lt;pre name=&#34;group-lang-code-java&#34; class=&#34;language-java line-numbers&#34; style=&#34;display:none;&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;package com.ut;

import java.math.BigInteger;

// import the generated UT class
import com.ut.UT_Adder;

public class example {
    static public void main(String[] args){
        UT_Adder adder = new UT_Adder();
        for(int i=0; i&lt;10000; i++){
            int N = 1000000;
            long a = (long) (Math.random() * N);
            long b = (long) (Math.random() * N);
            long c = (long) (Math.random() * N) &gt; 50 ? 1 : 0;
            // set inputs
            adder.a.Set(a);
            adder.b.Set(b);
            adder.cin.Set(c);
            // step
            adder.Step();
            // reference model
            long sum = a + b;
            boolean carry = sum &lt; a ? true : false;
            sum += c;
            carry = carry || sum &lt; c;
            // assert
            assert adder.sum.U().longValue() == sum : &#34;sum mismatch: &#34; + adder.sum.U() + &#34; != &#34; + sum;
            assert adder.cout.U().intValue() == (carry ? 1 : 0) : &#34;carry mismatch: &#34; + adder.cout.U() + &#34; != &#34; + carry;
        }
        System.out.println(&#34;Java tests passed&#34;);
        adder.Finish();
    }
}&lt;/code&gt;&lt;/pre&gt;





  
  


&lt;pre name=&#34;group-lang-code-scala&#34; class=&#34;language-scala line-numbers&#34; style=&#34;display:none;&#34;&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.ut

import java.lang.Math
import com.ut.UT_Adder

object example {
    def main(args: Array[String]): Unit = {
      val adder = new UT_Adder()
      for (i &lt;- 0 until 10000) {
        val N = 1000000
        val a = (Math.random() * N).toLong
        val b = (Math.random() * N).toLong
        val c = if ((Math.random() * N).toLong &gt; 50) 1 else 0

        // set inputs
        adder.a.Set(a)
        adder.b.Set(b)
        adder.cin.Set(c)

        // step
        adder.Step()

        // reference model
        var sum = a + b
        var carry = if (sum &lt; a) true else false
        sum += c
        carry = carry || (sum &lt; c)

        // assert
        assert(adder.sum.U().longValue() == sum, s&#34;sum mismatch: ${adder.sum.U()} != $sum&#34;)
        assert(adder.cout.U().intValue() == (if (carry) 1 else 0), s&#34;carry mismatch: ${adder.cout.U()} != $carry&#34;)
        println(s&#34;[cycle ${adder.xclock.getClk().intValue()}] a=${adder.a.U64()}, b=${adder.b.U64()}, cin=${adder.cin.U64()}&#34;)
      }
      println(&#34;Scala tests passed&#34;)
      adder.Finish()
    }
}&lt;/code&gt;&lt;/pre&gt;





  
  


&lt;pre name=&#34;group-lang-code-python&#34; class=&#34;language-python line-numbers&#34; style=&#34;display:none;&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;from UT_Adder import *

import random

class input_t:
    def __init__(self, a, b, cin):
        self.a = a
        self.b = b
        self.cin = cin

class output_t:
    def __init__(self):
        self.sum = 0
        self.cout = 0

def random_int():
    return random.randint(-(2**127), 2**127 - 1) &amp; ((1 &lt;&lt; 128) - 1)

def as_uint(x, nbits):
    return x &amp; ((1 &lt;&lt; nbits) - 1)

def main():
    dut = DUTAdder()  # Assuming USE_VERILATOR
    
    print(&#34;Initialized UTAdder&#34;)
    
    for c in range(11451):
        i = input_t(random_int(), random_int(), random_int() &amp; 1)
        o_dut, o_ref = output_t(), output_t()
        
        def dut_cal():
            dut.a.value, dut.b.value, dut.cin.value = i.a, i.b, i.cin
            dut.Step(1)
            o_dut.sum = dut.sum.value
            o_dut.cout = dut.cout.value
        
        def ref_cal():
            sum = as_uint( i.a + i.b + i.cin, 128+1)
            o_ref.sum = as_uint(sum, 128)
            o_ref.cout = as_uint(sum &gt;&gt; 128, 1)
        
        dut_cal()
        ref_cal()
        
        print(f&#34;[cycle {dut.xclock.clk}] a=0x{i.a:x}, b=0x{i.b:x}, cin=0x{i.cin:x}&#34;)
        print(f&#34;DUT: sum=0x{o_dut.sum:x}, cout=0x{o_dut.cout:x}&#34;)
        print(f&#34;REF: sum=0x{o_ref.sum:x}, cout=0x{o_ref.cout:x}&#34;)
        
        assert o_dut.sum == o_ref.sum, &#34;sum mismatch&#34;

    dut.Finish()
    
    print(&#34;Test Passed, destroy UTAdder&#34;)

if __name__ == &#34;__main__&#34;:
    main()&lt;/code&gt;&lt;/pre&gt;





  
  


&lt;pre name=&#34;group-lang-code-go&#34; class=&#34;language-go line-numbers&#34; style=&#34;display:none;&#34;&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&#34;fmt&#34;
    &#34;time&#34;
    &#34;math/rand&#34;
    ut &#34;UT_Adder&#34;
)

func assert(cond bool, msg string) {
    if !cond {
        panic(msg)
    }
}

func main() {
    adder := ut.NewUT_Adder()
    rand.Seed(time.Now().UnixNano())
    for i := 0; i &lt; 10000; i++ {
        N := 1000000
        a := rand.Int63n(int64(N))
        b := rand.Int63n(int64(N))
        var c int64
        if rand.Int63n(int64(N)) &gt; 50 {
            c = 1
        } else {
            c = 0
        }

        adder.A.Set(a)
        adder.B.Set(b)
        adder.Cin.Set(c)

        adder.Step()

        // reflerence model
        sum := a + b
        carry := sum &lt; a
        sum += c
        carry = carry || sum &lt; c

        // assert
        assert(adder.Sum.U64() == uint64(sum), fmt.Sprintf(&#34;sum mismatch: %d != %d\n&#34;, adder.Sum.U64(), uint64(sum)))
        
        var carry_bool uint64
        if carry {
            carry_bool = 1
        } else {
            carry_bool = 0
        }
        assert(adder.Cout.U64() == carry_bool, fmt.Sprintf(&#34;carry mismatch: %d != %t\n&#34;, adder.Cout.U().Int64(), carry))
    }
    adder.Finish();
    fmt.Println(&#34;Golang tests passed&#34;)
}&lt;/code&gt;&lt;/pre&gt;




&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: CoupledL2</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/multi-lang/examples/coupledl2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/mlvp/docs/multi-lang/examples/coupledl2/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;CoupledL2&lt;/code&gt;是一个非阻塞的&lt;a href=&#34;https://github.com/OpenXiangShan/CoupledL2&#34;&gt;L2 Cache&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面的代码会对&lt;code&gt;CoupledL2&lt;/code&gt;进行简单的验证，并使用数组作为参考模型，验证过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成随机的地址&lt;code&gt;addr&lt;/code&gt;、执行&lt;code&gt;AcquireBlock&lt;/code&gt;，请求读取&lt;code&gt;addr&lt;/code&gt;的数据。&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;GrantData&lt;/code&gt;，接收&lt;code&gt;DUT&lt;/code&gt;响应的数据。&lt;/li&gt;
&lt;li&gt;把接收到的数据和参考模型的内容进行比较，验证行为是否一致。&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;GrantAck&lt;/code&gt;，响应&lt;code&gt;DUT&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;ReleaseData&lt;/code&gt;，向&lt;code&gt;DUT&lt;/code&gt;请求在&lt;code&gt;addr&lt;/code&gt;写入随机数据&lt;code&gt;data&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;同步参考模型，把&lt;code&gt;addr&lt;/code&gt;的数据更新为&lt;code&gt;data&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;ReleaseAck&lt;/code&gt;，接收&lt;code&gt;DUT&lt;/code&gt;的写入响应。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述步骤会重复4000次。&lt;/p&gt;
&lt;p&gt;验证代码：&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;
    
    &lt;div style=&#34;background-color: #f0f0f0; display: flex; justify-content: flex-end; gap: 5px; padding-right: 5px&#34;&gt;
        
            &lt;a name=&#34;multi-lang-toggle&#34; style=&#34;font-size: 12px;&#34; lang=&#39;cpp&#39; href=&#34;javascript://&#34;&gt;Cpp&lt;/a&gt;
        
            &lt;a name=&#34;multi-lang-toggle&#34; style=&#34;font-size: 12px;&#34; lang=&#39;java&#39; href=&#34;javascript://&#34;&gt;Java&lt;/a&gt;
        
            &lt;a name=&#34;multi-lang-toggle&#34; style=&#34;font-size: 12px;&#34; lang=&#39;python&#39; href=&#34;javascript://&#34;&gt;Python&lt;/a&gt;
        
    &lt;/div&gt;
    




  
  


&lt;pre name=&#34;group-lang-code-cpp&#34; class=&#34;language-cpp line-numbers&#34; style=&#34;display:true;&#34;&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &#34;UT_CoupledL2.hpp&#34;
using TLDataArray = std::array&lt;uint64_t, 2&gt;;

enum class OpcodeA : uint32_t {
  PutFullData = 0x0,
  PutPartialData = 0x1,
  ArithmeticData = 0x2,
  LogicalData = 0x3,
  Get = 0x4,
  Hint = 0x5,
  AcquireBlock = 0x6,
  AcquirePerm = 0x7,
};

enum class OpcodeB : uint32_t { ProbeBlock = 0x6, ProbePerm = 0x7 };

enum class OpcodeC : uint32_t { ProbeAck = 0x4, ProbeAckData = 0x5, Release = 0x6, ReleaseData = 0x7 };

enum class OpcodeD : uint32_t { AccessAck, AccessAckData, HintAck, Grant = 0x4, GrantData = 0x5, ReleaseAck = 0x6 };

enum class OpcodeE : uint32_t { GrantAck = 0x4 };

constexpr std::initializer_list&lt;const char *&gt; ARGS = {&#34;+verilator+rand+reset+0&#34;};
auto dut = UTCoupledL2(ARGS);
auto &amp;clk = dut.xclock;

void sendA(OpcodeA opcode, uint32_t size, uint32_t address) {
  const auto &amp;valid = dut.master_port_0_0_a_valid;
  const auto &amp;ready = dut.master_port_0_0_a_ready;
  while (ready.value == 0x0) clk.Step();
  valid.value = 1;
  dut.master_port_0_0_a_bits_opcode.value = opcode;
  dut.master_port_0_0_a_bits_size.value = size;
  dut.master_port_0_0_a_bits_address.value = address;
  clk.Step();
  valid.value = 0;
}

void getB() {
  assert(false);
  const auto &amp;valid = dut.master_port_0_0_b_valid;
  const auto &amp;ready = dut.master_port_0_0_b_ready;
  ready.value = 1;
  while (valid.value == 0)
    clk.Step();
  dut.master_port_0_0_b_bits_opcode = 0x0;
  dut.master_port_0_0_b_bits_param = 0x0;
  dut.master_port_0_0_b_bits_size = 0x0;
  dut.master_port_0_0_b_bits_source = 0x0;
  dut.master_port_0_0_b_bits_address = 0x0;
  dut.master_port_0_0_b_bits_mask = 0x0;
  dut.master_port_0_0_b_bits_data = 0x0;
  dut.master_port_0_0_b_bits_corrupt = 0x0;
  clk.Step();
  ready.value = 0;
}

void sendC(OpcodeC opcode, uint32_t size, uint32_t address, uint64_t data) {
  const auto &amp;valid = dut.master_port_0_0_c_valid;
  const auto &amp;ready = dut.master_port_0_0_c_ready;

  while (ready.value == 0) clk.Step();
  valid.value = 1;
  dut.master_port_0_0_c_bits_opcode.value = opcode;
  dut.master_port_0_0_c_bits_size.value = size;
  dut.master_port_0_0_c_bits_address.value = address;
  dut.master_port_0_0_c_bits_data.value = data;
  clk.Step();
  valid.value = 0;
}

void getD() {
  const auto &amp;valid = dut.master_port_0_0_d_valid;
  const auto &amp;ready = dut.master_port_0_0_d_ready;
  ready.value = 1;
  clk.Step();
  while (valid.value == 0) clk.Step();
  ready.value = 0;
}

void sendE(uint32_t sink) {
  const auto &amp;valid = dut.master_port_0_0_e_valid;
  const auto &amp;ready = dut.master_port_0_0_e_ready;
  while (ready.value == 0) clk.Step();
  valid.value = 1;
  dut.master_port_0_0_e_bits_sink.value = sink;
  clk.Step();
  valid.value = 0;
}

void AcquireBlock(uint32_t address) { sendA(OpcodeA::AcquireBlock, 0x6, address); }

void GrantData(TLDataArray &amp;r_data) {
  const auto &amp;opcode = dut.master_port_0_0_d_bits_opcode;
  const auto &amp;data = dut.master_port_0_0_d_bits_data;

  for (int i = 0; i &lt; 2; i++) {
    do { getD(); } while (opcode.value != OpcodeD::GrantData);
    r_data[i] = data.value;
  }
}

void GrantAck(uint32_t sink) { sendE(sink); }

void ReleaseData(uint32_t address, const TLDataArray &amp;data) {
  for (int i = 0; i &lt; 2; i++)
    sendC(OpcodeC::ReleaseData, 0x6, address, data[i]);
}

void ReleaseAck() {
  const auto &amp;opcode = dut.master_port_0_0_d_bits_opcode;
  do { getD(); } while (opcode.value != OpcodeD::ReleaseAck);
}

int main() {
  TLDataArray ref_data[16] = {};
  /* Random generator */
  std::random_device rd;
  std::mt19937_64 gen_rand(rd());
  std::uniform_int_distribution&lt;uint32_t&gt; distrib(0, 0xf - 1);

  /* DUT init */
  dut.InitClock(&#34;clock&#34;);
  dut.reset.SetWriteMode(xspcomm::WriteMode::Imme);
  dut.reset.value = 1;
  clk.Step();
  dut.reset.value = 0;
  for (int i = 0; i &lt; 100; i++) clk.Step();

  /* Test loop */
  for (int test_loop = 0; test_loop &lt; 4000; test_loop++) {
    uint32_t d_sink;
    TLDataArray data{}, r_data{};
    /* Generate random */
    const auto address = distrib(gen_rand) &lt;&lt; 6;
    for (auto &amp;i : data)
      i = gen_rand();

    printf(&#34;[CoupledL2 Test\t%d]: At address(0x%03x), &#34;, test_loop + 1, address);
    /* Read */
    AcquireBlock(address);
    GrantData(r_data);

    // Print read result
    printf(&#34;Read: &#34;);
    for (const auto &amp;x : r_data)
      printf(&#34;%08lx&#34;, x);

    d_sink = dut.master_port_0_0_d_bits_sink.value;
    assert ((r_data == ref_data[address &gt;&gt; 6]) &amp;&amp; &#34;Read Failed&#34;);
    GrantAck(d_sink);

    /* Write */
    ReleaseData(address, data);
    ref_data[address &gt;&gt; 6] = data;
    ReleaseAck();

    // Print write data
    printf(&#34;, Write: &#34;);
    for (const auto &amp;x : data)
      printf(&#34;%08lx&#34;, x);
    printf(&#34;.\n&#34;);
  }

  return 0;
}&lt;/code&gt;&lt;/pre&gt;






  
  


&lt;pre name=&#34;group-lang-code-java&#34; class=&#34;language-java line-numbers&#34; style=&#34;display:none;&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;import com.ut.UT_CoupledL2;
import com.xspcomm.WriteMode;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Random;
import java.util.random.RandomGenerator;

class Opcode {
    public enum A {
        PutFullData(0x0),
        PutPartialData(0x1),
        ArithmeticData(0x2),
        LogicalData(0x3),
        Get(0x4),
        Hint(0x5),
        AcquireBlock(0x6),
        AcquirePerm(0x7);

        private final int value;
    
        A(int value) {
            this.value = value;
        }
    
        public int getValue() {
            return value;
        }
    }
    
    public enum B {
        ProbeBlock(0x6), ProbePerm(0x7);
    
        private final int value;
    
        B(int value) {
            this.value = value;
        }
    
        public int getValue() {
            return value;
        }
    }
    
    public enum C {
        ProbeAck(0x4), ProbeAckData(0x5), Release(0x6), ReleaseData(0x7);
    
        private final int value;
    
        C(int value) {
            this.value = value;
        }
    
        public int getValue() {
            return value;
        }
    }
    
    public enum D {
        AccessAck(0x0), AccessAckData(0x1), HintAck(0x2), Grant(0x4), GrantData(0x5), ReleaseAck(0x6);
    
        private final int value;
    
        D(int value) {
            this.value = value;
        }
    
        public int getValue() {
            return value;
        }
    }
    
    public enum E {
        GrantAck(0x4);
    
        private final int value;
    
        E(int value) {
            this.value = value;
        }
    
        public int getValue() {
            return value;
        }
    }
}

public class TestCoupledL2 {
    static PrintWriter pwOut = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
    static UT_CoupledL2 dut;

    static void sendA(int opcode, int size, int address) {
        var valid = dut.master_port_0_0_a_valid;
        var ready = dut.master_port_0_0_a_ready;
        while (!ready.B()) dut.xclock.Step();
        valid.Set(1);
        dut.master_port_0_0_a_bits_opcode.Set(opcode);
        dut.master_port_0_0_a_bits_size.Set(size);
        dut.master_port_0_0_a_bits_address.Set(address);
        dut.xclock.Step();
        valid.Set(0);
    }
    
    static void getB() {
        var valid = dut.master_port_0_0_b_valid;
        var ready = dut.master_port_0_0_b_ready;
        ready.Set(1);
        while (!valid.B()) dut.xclock.Step();
        ready.Set(0);
    }
    
    static void sendC(int opcode, int size, int address, long data) {
        var valid = dut.master_port_0_0_c_valid;
        var ready = dut.master_port_0_0_c_ready;
    
        while (!ready.B()) dut.xclock.Step();
        valid.Set(1);
        dut.master_port_0_0_c_bits_opcode.Set(opcode);
        dut.master_port_0_0_c_bits_size.Set(size);
        dut.master_port_0_0_c_bits_address.Set(address);
        dut.master_port_0_0_c_bits_data.Set(data);
        dut.xclock.Step();
        valid.Set(0);
    }
    
    static void getD() {
        var valid = dut.master_port_0_0_d_valid;
        var ready = dut.master_port_0_0_d_ready;
        ready.Set(1);
        dut.xclock.Step();
        while (!valid.B()) dut.xclock.Step();
        ready.Set(0);
    }
    
    static void sendE(int sink) {
        var valid = dut.master_port_0_0_e_valid;
        var ready = dut.master_port_0_0_e_ready;
        while (!ready.B()) dut.xclock.Step();
        valid.Set(1);
        dut.master_port_0_0_e_bits_sink.Set(sink);
        dut.xclock.Step();
        valid.Set(0);
    }
    
    static void AcquireBlock(int address) {
        sendA(Opcode.A.AcquireBlock.getValue(), 0x6, address);
    }
    
    static BigInteger GrantData() {
        var opcode = dut.master_port_0_0_d_bits_opcode;
        var data = dut.master_port_0_0_d_bits_data;
    
        do {
            getD();
        } while (opcode.Get().intValue() != Opcode.D.GrantData.getValue());
        var r_data = data.U64().shiftLeft(64);
        do {
            getD();
        } while (opcode.Get().intValue() != Opcode.D.GrantData.getValue());
        return r_data.or(data.U64());
    }
    
    static void GrantAck(int sink) {
        sendE(sink);
    }
    
    static void ReleaseData(int address, BigInteger data) {
        sendC(Opcode.C.ReleaseData.getValue(), 0x6, address, data.longValue());
        sendC(Opcode.C.ReleaseData.getValue(), 0x6, address, data.shiftRight(64).longValue());
    }
    
    static void ReleaseAck() {
        var opcode = dut.master_port_0_0_d_bits_opcode;
        do {
            getD();
        } while (opcode.Get().intValue() != Opcode.D.ReleaseAck.getValue());
    }
    
    public static void main(String[] args) throws IOException {
        /* Random Generator */
        var gen_rand = RandomGenerator.getDefault();
        /* DUT init */
        final String[] ARGS = {&#34;+verilator+rand+reset+0&#34;};
        dut = new UT_CoupledL2(ARGS);
        dut.InitClock(&#34;clock&#34;);
        dut.reset.SetWriteMode(WriteMode.Imme);
        dut.reset.Set(1);
        dut.xclock.Step();
        dut.reset.Set(0);
        for (int i = 0; i &lt; 100; i++) dut.xclock.Step();
        dut.xclock.Step();
    
        /* Ref */
        BigInteger[] ref_data = new BigInteger[16];
        Arrays.fill(ref_data, BigInteger.ZERO);
    
        /* Test loop */
        for (int test_loop = 0; test_loop &lt; 4000; test_loop++) {
            var address = gen_rand.nextInt(0xf) &lt;&lt; 6;
            var data = new BigInteger(128, Random.from(gen_rand));
    
            pwOut.print(&#34;[CoupledL2 Test%d]: At address(%#03x), &#34;.formatted(test_loop + 1, address));
            /* Read */
            AcquireBlock(address);
            var r_data = GrantData();
            assert (r_data.equals(ref_data[address &gt;&gt; 6]));
    
            var sink = dut.master_port_0_0_d_bits_sink.Get().intValue();
            GrantAck(sink);


            /* Write */
            ReleaseData(address, data);
            ref_data[address &gt;&gt; 6] = data;
            ReleaseAck();
    
            pwOut.println(&#34;Read: %s, Write: %s&#34;.formatted(r_data.toString(), data.toString()));
            pwOut.flush();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;





  
  


&lt;pre name=&#34;group-lang-code-python&#34; class=&#34;language-python line-numbers&#34; style=&#34;display:none;&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;################ bundle.py ################
from toffee import Bundle, Signals, Signal

class DecoupledBundle(Bundle):
    ready, valid = Signals(2)

class TileLinkBundleA(DecoupledBundle):
    opcode, param, size, source, address, user_alias, mask, data, corrupt = Signals(9)

class TileLinkBundleB(DecoupledBundle):
    opcode, param, size, source, address, mask, data, corrupt = Signals(8)

class TileLinkBundleC(DecoupledBundle):
    opcode, param, size, source, address, user_alias, data, corrupt = Signals(8)

class TileLinkBundleD(DecoupledBundle):
    opcode, param, size, source, sink, denied, data, corrupt = Signals(8)

class TileLinkBundleE(DecoupledBundle):
    sink = Signal()

class TileLinkBundle(Bundle):
    a = TileLinkBundleA.from_regex(r&#34;a_(?:(valid|ready)|bits_(.*))&#34;)
    b = TileLinkBundleB.from_regex(r&#34;b_(?:(valid|ready)|bits_(.*))&#34;)
    c = TileLinkBundleC.from_regex(r&#34;c_(?:(valid|ready)|bits_(.*))&#34;)
    d = TileLinkBundleD.from_regex(r&#34;d_(?:(valid|ready)|bits_(.*))&#34;)
    e = TileLinkBundleE.from_regex(r&#34;e_(?:(valid|ready)|bits_(.*))&#34;)&lt;/code&gt;&lt;/pre&gt;







  
  


&lt;pre name=&#34;group-lang-code-python&#34; class=&#34;language-python line-numbers&#34; style=&#34;display:none;&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;################ agent.py ################
from toffee import Agent, driver_method
from toffee.triggers import Value
from bundle import TileLinkBundle


class TilelinkOPCodes:
    class A:
        PutFullData = 0x0
        PutPartialData = 0x1
        ArithmeticData = 0x2
        LogicalData = 0x3
        Get = 0x4
        Hint = 0x5
        AcquireBlock = 0x6
        AcquirePerm = 0x7

    class B:
        Probe = 0x8

    class C:
        ProbeAck = 0x4
        ProbeAckData = 0x5
        Release = 0x6
        ReleaseData = 0x7

    class D:
        AccessAck = 0x0
        AccessAckData = 0x1
        HintAck = 0x2
        Grant = 0x4
        GrantData = 0x5
        ReleaseAck = 0x6

    class E:
        GrantAck = 0x4


class TileLinkAgent(Agent):
    def __init__(self, tlbundle: TileLinkBundle):
        super().__init__(tlbundle.step)

        self.tlbundle = tlbundle

    @driver_method()
    async def put_a(self, dict):
        dict[&#34;valid&#34;] = 1
        self.tlbundle.a.assign(dict)
        await Value(self.tlbundle.a.ready, 1)
        self.tlbundle.a.valid.value = 0

    @driver_method()
    async def get_d(self):
        self.tlbundle.d.ready.value = 1
        await Value(self.tlbundle.d.valid, 1)
        result = self.tlbundle.d.as_dict()
        self.tlbundle.d.ready.value = 0
        return result

    @driver_method()
    async def get_b(self):
        self.tlbundle.b.ready.value = 1
        await Value(self.tlbundle.b.valid, 1)
        result = self.tlbundle.b.as_dict()
        self.tlbundle.b.ready.value = 0
        return result

    @driver_method()
    async def put_c(self, dict):
        dict[&#34;valid&#34;] = 1
        self.tlbundle.c.assign(dict)
        await Value(self.tlbundle.c.ready, 1)
        self.tlbundle.c.valid.value = 0

    @driver_method()
    async def put_e(self, dict):
        dict[&#34;valid&#34;] = 1
        self.tlbundle.e.assign(dict)
        await Value(self.tlbundle.e.ready, 1)
        self.tlbundle.e.valid.value = 0

    ################################

    async def aquire_block(self, address):
        await self.put_a(
            {
                &#34;*&#34;: 0,
                &#34;size&#34;: 0x6,
                &#34;opcode&#34;: TilelinkOPCodes.A.AcquireBlock,
                &#34;address&#34;: address,
            }
        )

        data = 0x0
        for i in range(2):
            ret = await self.get_d()
            while ret[&#34;opcode&#34;] != TilelinkOPCodes.D.GrantData:
                ret = await self.get_d()
            data = (ret[&#34;data&#34;] &lt;&lt; (256 * i)) | data

        await self.put_e({&#34;sink&#34;: ret[&#34;sink&#34;]})

        return data

    async def release_data(self, address, data):
        for _ in range(2):
            await self.put_c(
                {
                    &#34;*&#34;: 0,
                    &#34;size&#34;: 0x6,
                    &#34;opcode&#34;: TilelinkOPCodes.C.ReleaseData,
                    &#34;address&#34;: address,
                    &#34;data&#34;: data % (2**256),
                }
            )
            data = data &gt;&gt; 256

        x = await self.get_d()
        while x[&#34;opcode&#34;] != TilelinkOPCodes.D.ReleaseAck:
            x = await self.get_d()&lt;/code&gt;&lt;/pre&gt;




  
  


&lt;pre name=&#34;group-lang-code-python&#34; class=&#34;language-python line-numbers&#34; style=&#34;display:none;&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;################ test.py ################
import toffee
import random
from toffee.triggers import ClockCycles
from UT_CoupledL2 import DUTCoupledL2
from bundle import TileLinkBundle
from agent import TileLinkAgent


async def test_top(dut: DUTCoupledL2):
    toffee.start_clock(dut)

    dut.reset.value = 1
    await ClockCycles(dut, 100)
    dut.reset.value = 0

    tlbundle = TileLinkBundle.from_prefix(&#34;master_port_0_0_&#34;).bind(dut)
    tlbundle.set_all(0)
    tlagent = TileLinkAgent(tlbundle)

    await ClockCycles(dut, 20)
    ref_data = [0] * 0x10

    for _ in range(4000):
        # Read
        address = random.randint(0, 0xF) &lt;&lt; 6
        r_data = await tlagent.aquire_block(address)
        print(f&#34;Read {address} = {hex(r_data)}&#34;)
        assert r_data == ref_data[address &gt;&gt; 6]

        # Write
        send_data = random.randint(0, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)
        await tlagent.release_data(address, send_data)
        ref_data[address &gt;&gt; 6] = send_data
        print(f&#34;Write {address} = {hex(send_data)}&#34;)


if __name__ == &#34;__main__&#34;:
    toffee.setup_logging(toffee.INFO)
    dut = DUTCoupledL2([&#34;+verilator+rand+reset+0&#34;])
    dut.InitClock(&#34;clock&#34;)
    dut.reset.AsImmWrite()

    toffee.run(test_top(dut))

    dut.Finish()&lt;/code&gt;&lt;/pre&gt;



&lt;/div&gt;


      </description>
    </item>
    
  </channel>
</rss>
