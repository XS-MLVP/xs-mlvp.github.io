<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习材料 on 开放验证平台学习资源</title>
    <link>https://open-verify.cc/mlvp/categories/%E5%AD%A6%E4%B9%A0%E6%9D%90%E6%96%99/</link>
    <description>Recent content in 学习材料 on 开放验证平台学习资源</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="https://open-verify.cc/mlvp/categories/%E5%AD%A6%E4%B9%A0%E6%9D%90%E6%96%99/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>创建DUT</title>
      <link>https://open-verify.cc/mlvp/docs/basic/create_dut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/docs/basic/create_dut/</guid>
      <description>以果壳cache为例，介绍如何创建基于Chisel的DUT&#xA;在本文档中，DUT（Design Under Test）是指在芯片验证过程中，被验证的对象电路或系统。DUT是验证的主体，在基于picker工具创建DUT时，需要考虑被测对象的功能、性能要求和验证目标，例如是需要更快的执行速度，还是需要更详细的测试信息。通常情况下DUT，即RTL编写的源码，与外围环境一起构成验证环境（test_env），然后基于该验证环境编写测试用例。在本项目中，DUT是需要测试的Python模块，需要通过RTL进行转换。传统的RTL语言包括Verilog、System Verilog、VHDL等，然而作为新兴的RTL设计语言，Chisel（https://www.chisel-lang.org/）也以其面向对象的特征和便捷性，逐渐在RTL设计中扮演越来越重要的角色。本章以果壳处理器-NutShell中的cache源代码到Python模块的转换为例进行介绍如何创建DUT。&#xA;Chisel与果壳 准确来说，Chisel是基于Scala语言的高级硬件构造（HCL）语言。传统HDL是描述电路，而HCL则是生成电路，更加抽象和高级。同时Chisel中提供的Stage包则可以将HCL设计转化成Verilog、System Verilog等传统的HDL语言设计。配合上Mill、Sbt等Scala工具则可以实现自动化的开发。&#xA;果壳是使用 Chisel 语言模块化设计的、基于 RISC-V RV64 开放指令集的顺序单发射处理器实现。果壳更详细的介绍请参考链接：https://oscpu.github.io/NutShell-doc/&#xA;果壳 cache 果壳cache（Nutshell Cache）是果壳处理器中使用的缓存模块。其采用三级流水设计，当第三级流水检出当前请求为MMIO或者发生重填（refill）时，会阻塞流水线。同时，果壳cache采用可定制的模块化设计，通过改变参数可以生成存储空间大小不同的一级cache（L1 Cache）或者二级cache（L2 Cache）。此外，果壳cache留有一致性（coherence）接口，可以处理一致性相关的请求。&#xA;Chisel 转 Verilog Chisel中的stage库可以帮助由Chisel代码生成Verilog、System Verilog等传统的HDL代码。以下将简单介绍如何由基于Chisel的cache实现转换成对应的Verilog电路描述。&#xA;初始化果壳环境 首先从源仓库下载整个果壳源代码，并进行初始化：&#xA;mkdir cache-ut cd cache-ut git clone https://github.com/OSCPU/NutShell.git cd NutShell &amp;amp;&amp;amp; git checkout 97a025d make init 创建scala编译配置 在cache-ut目录下创建build.sc，其中内容如下：&#xA;import $file.NutShell.build import mill._, scalalib._ import coursier.maven.MavenRepository import mill.scalalib.TestModule._ // 指定Nutshell的依赖 object difftest extends NutShell.build.CommonNS { override def millSourcePath = os.pwd / &amp;#34;NutShell&amp;#34; / &amp;#34;difftest&amp;#34; } // Nutshell 配置 object NtShell extends NutShell.</description>
    </item>
    <item>
      <title>DUT验证</title>
      <link>https://open-verify.cc/mlvp/docs/basic/test_dut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/docs/basic/test_dut/</guid>
      <description>本节介绍基于Picker验证DUT的一般流程&#xA;开放验证平台的目标是功能性验证，其一般有以下步骤：&#xA;1. 确定验证对象和目标 通常来说，同时交付给验证工程师的还有DUT的设计文档。此时您需要阅读文档或者源代码，了解验证对象的基本功能、主体结构以及预期功能。&#xA;2. 构建基本验证环境 充分了解设计之后，您需要构建验证的基本环境。例如，除了由Picker生成的DUT外，您可能还需要搭建用于比对的参考模型，也可能需要为后续功能点的评测搭建信号的监听平台。&#xA;3. 功能点与测试点分解 在正式开始验证之前，您还需要提取功能点，并将其进一步分解成测试点。提取和分解方法可以参考：CSDN:芯片验证系列——Testpoints分解&#xA;4. 构造测试用例 有了测试点之后，您需要构造测试用例来覆盖相应的测试点。一个用例可能覆盖多个测试点。&#xA;5. 收集测试结果 运行完所有的测试用例之后，您需要汇总所有的测试结果。一般来说包括代码行覆盖率以及功能覆盖率。前者可以通过Picker工具提供的覆盖率功能获得，后者则需要您通过监听DUT的行为判断某功能是否被用例覆盖到。&#xA;6. 评估测试结果 最后您需要评估得到的结果，如是否存在错误的设计、某功能是否无法被触发、设计文档表述是否与DUT行为一致、设计文档是否表述清晰等。&#xA;接下来我们以果壳Cache的MMIO读写为例，介绍一般验证流程：&#xA;1 确定验证对象和目标：&#xA;果壳Cache的MMIO读写功能。MMIO是一类特殊的IO映射，其支持通过访问内存地址的方式访问IO设备寄存器。由于IO设备的寄存器状态是随时可能改变的，因此不适合将其缓存在cache中。当收到MMIO请求时，果壳cache不会在普通的cache行中查询命中/缺失情况，而是会直接访问MMIO的内存区域来读取或者写入数据。&#xA;2 构建基本验证环境：&#xA;我们可以将验证环境大致分为五个部分：&#xA;1. Testcase Driver：负责由用例产生相应的信号驱动&#xA;2. Monitor：监听信号，判断功能是否被覆盖以及功能是否正确&#xA;3. Ref Cache：一个简单的参考模型&#xA;4. Memory/MMIO Ram：外围设备的模拟，用于模拟相应cache的请求&#xA;5. Nutshell Cache Dut：由Picker生成的DUT&#xA;此外，您可能还需要对DUT的接口做进一步封装以实现更方便的读写请求操作，具体可以参考Nutshll cachewrapper。&#xA;3 功能点与测试点分解：&#xA;果壳cache可以响应MMIO请求，进一步分解可以得到一下测试点：&#xA;测试点1：MMIO请求会被转发到MMIO端口上&#xA;测试点2：cache响应MMIO请求时，不会发出突发传输（Burst Transfer）的请求&#xA;测试点3：cache响应MMIO请求时，会阻塞流水线&#xA;4 构造测试用例： 测试用例的构造是简单的，已知通过创建DUT得到的Nutshell cache的MMIO地址范围是0x30000000~0x7fffffff，则我们只需访问这段内存区间，应当就能获得MMIO的预期结果。需要注意的是，为了触发阻塞流水线的测试点，您可能需要连续地发起请求。&#xA;以下是一个简单的测试用例：&#xA;# import CacheWrapper here def mmio_test(cache: CacheWrapper): mmio_lb&#x9;= 0x30000000 mmio_rb&#x9;= 0x30001000 print(&amp;#34;\n[MMIO Test]: Start MMIO Serial Test&amp;#34;) for addr in range(mmio_lb, mmio_rb, 16): addr &amp;amp;= ~(0xf) addr1 = addr addr2 = addr + 4 addr3 = addr + 8 cache.</description>
    </item>
    <item>
      <title>验证报告</title>
      <link>https://open-verify.cc/mlvp/docs/basic/report/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/docs/basic/report/</guid>
      <description>在我们完成DUT验证后，编写验证报告是至关重要的一环。本节将从整体角度概述验证报告的结构以及报告所需覆盖的内容。&#xA;验证报告是对整个验证过程的回顾，是验证合理与否的重要支持文件。一般情况下，验证报告需要包含以下内容：&#xA;文档基本信息（作者、日志、版本等） 验证对象（验证目标） 功能点介绍 验证方案 测试点分解 测试用例 测试环境 结果分析 缺陷分析 测试结论 以下内容对列表进行进一步解释，具体示例可以参考nutshell_cache_report_demo.pdf&#xA;1. 基本信息 应当包括作者、日志、版本、日期等。&#xA;2. 验证对象（验证目标） 需要对您的验证对象做必要的介绍，可以包括其结构、基本功能、接口信息等。&#xA;3. 功能点介绍 通过阅读设计文档或者源码，您需要总结DUT的目标功能，并将其细化为各功能点。&#xA;4. 验证方案 应当包括您计划的验证流程以及验证框架。同时，您也应当接受您的框架各部分是如何协同工作的。&#xA;5. 测试点分解 针对功能点提出的测试方法。具体可以包括在怎样的信号输入下应当观测到怎样的信号输出。&#xA;6. 测试用例 测试点的具体实现。一个测试用例可以包括多个测试点。&#xA;7. 测试环境 包括硬件信息、软件版本信息等。&#xA;8. 结果分析 结果分析一般指覆盖率分析。通常来说应当考虑两类覆盖率：&#xA;1. 行覆盖率： 在测试用例中有多少RTL行代码被执行。一般来说我们要求行覆盖率在98%以上。&#xA;2. 功能覆盖率：根据相应的信号判断您提取的功能点是否被覆盖且被正确触发。一般我们要求测试用例覆盖每个功能点。&#xA;9. 缺陷分析 对DUT存在的缺陷进行分析。可以包括设计文档的规范性和详细性、DUT功能的正确性（是否存在bug）、DUT功能是否能被触发等方面。&#xA;10. 验证结论 验证结论是在完成芯片验证过程后得出的最终结论，是对以上内容的总结。</description>
    </item>
  </channel>
</rss>
