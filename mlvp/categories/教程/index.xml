<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>教程 on 开放验证平台学习资源</title>
    <link>https://xs-mlvp.github.io/mlvp/categories/%E6%95%99%E7%A8%8B/</link>
    <description>Recent content in 教程 on 开放验证平台学习资源</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 23 Dec 2024 10:53:43 +0800</lastBuildDate>
    <atom:link href="https://xs-mlvp.github.io/mlvp/categories/%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>搭建验证环境</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/quick-start/installer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/quick-start/installer/</guid>
      <description>源码安装Picker工具 依赖安装 cmake ( &amp;gt;=3.11 ) gcc ( 支持c++20,至少为gcc版本10, 建议11及以上 ) python3 ( &amp;gt;=3.8 ) verilator ( ==4.218 ) verible-verilog-format ( &amp;gt;=0.0-3428-gcfcbb82b ) swig ( &amp;gt;=4.2.0, 用于多语言支持 ) 请注意，请确保verible-verilog-format等工具的路径已经添加到环境变量$PATH中，可以直接命令行调用。&#xA;下载源码 git clone https://github.com/XS-MLVP/picker.git --depth=1 cd picker make init 构建并安装 cd picker make # 可通过 make BUILD_XSPCOMM_SWIG=python,java,scala,golang 开启其他语言支持。 # 各语言需要自己的开发环境，需要自行配置，例如javac等 sudo -E make install 默认的安装的目标路径是 /usr/local， 二进制文件被置于 /usr/local/bin，模板文件被置于 /usr/local/share/picker。 如果需要修改安装目录，可以通过指定ARGS给cmake传递参数，例如make ARGS=&amp;quot;-DCMAKE_INSTALL_PREFIX=your_instal_dir&amp;quot; 安装时会自动安装 xspcomm基础库（https://github.com/XS-MLVP/xcomm），该基础库是用于封装 RTL 模块的基础类型，位于 /usr/local/lib/libxspcomm.so。 可能需要手动设置编译时的链接目录参数(-L)&#xA;如果开启了Java等语言支持，还会安装 xspcomm 对应的多语言软件包。&#xA;picker也可以编译为wheel文件，通过pip安装</description>
    </item>
    <item>
      <title>工具介绍</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/env_usage/picker_usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/env_usage/picker_usage/</guid>
      <description>为满足开放验证的环境要求，我们开发了 Picker 工具，用于将 RTL 设计转换为多语言接口，并在此基础上进行验证，我们将会使用 Picker 工具生成的环境作为基础的验证环境。接下来我们将介绍 Picker 工具，及其基础的使用方法。&#xA;Picker 简介 picker 是一个芯片验证辅助工具，具有两个主要功能：&#xA;打包RTL设计验证模块： picker 可以将 RTL 设计验证模块（.v/.scala/.sv）打包成动态库，并提供多种高级语言（目前支持 C++、Python、Java、Scala、Golang）的编程接口来驱动电路。 UVM-TLM代码自动生成： picker 能够基于用户提供的 UVM sequence_item 进行自动化的 TLM 代码封装，提供 UVM 与其他高级语言（如 Python）的通信接口。 该工具允许用户基于现有的软件测试框架，例如 pytest、junit、TestNG、go test 等，进行芯片单元测试。 基于 Picker 进行验证的优点:&#xA;不泄露 RTL 设计：经过 Picker 转换后，原始的设计文件（.v）被转化成了二进制文件（.so），脱离原始设计文件后，依旧可进行验证，且验证者无法获取 RTL 源代码。 减少编译时间：当 DUT（设计待测）稳定时，只需要编译一次（打包成 .so 文件）。 用户范围广：提供的编程接口多，覆盖不同语言的开发者。 使用丰富的软件生态：支持 Python3、Java、Golang 等生态系统。 自动化的 UVM 事务封装：通过自动化封装 UVM 事务，实现 UVM 和 Python 的通信。 Picker 目前支持的 RTL 仿真器：&#xA;Verilator Synopsys VCS Picker的工作原理</description>
    </item>
    <item>
      <title>加法器</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/multi-lang/examples/adder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/multi-lang/examples/adder/</guid>
      <description>以Adder为例，各语言的验证代码和注释如下：&#xA;Cpp Java Scala Python Go #include &#34;UT_Adder.hpp&#34; int64_t random_int64() { static std::random_device rd; static std::mt19937_64 generator(rd()); static std::uniform_int_distribution distribution(INT64_MIN, INT64_MAX); return distribution(generator); } int main() { UTAdder *dut = new UTAdder(); dut-&gt;Step(1); printf(&#34;Initialized UTAdder\n&#34;); struct input_t { uint64_t a; uint64_t b; uint64_t cin; }; struct output_t { uint64_t sum; uint64_t cout; }; for (int c = 0; c &lt; 114514; c++) { input_t i; output_t o_dut, o_ref; i.a = random_int64(); i.</description>
    </item>
    <item>
      <title>快速开始</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/quick-start/</guid>
      <description> 在开始前本页会 简单的介绍什么是验证，以及示例里面用到的概念，如 DUT (Design Under Test) 和 RM (Reference Model) 。&#xA;芯片验证 芯片验证是确保芯片设计正确性和可靠性的重要环节，主要包括功能验证、形式验证和物理验证等形式，本学习材料仅仅包含对功能验证的介绍，且侧重于基于仿真器的芯片功能验证。芯片功能验证的流程和方法与软件测试有比较大的共同点，例如都有单元测试、系统测试、黑盒测试、白盒测试等。在验证指标上也有共同特点，例如功能覆盖率、代码覆盖率等等。从某种形式上说，除了使用的工具和编程语言不一样外，他们的目标和流程几乎相同。因此，在不考虑工具和编程语言的情况下，会软件测试的工程师应当就会芯片验证。 但在实际工作中，软件测试和芯片验证属于两个完全不相交的行业，其主要原因是验证工具和验证语言的不同，导致软件测试工程师很难实现跨界。在芯片验证领域，通常使用硬件描述语言进行验证（例如 Verilog 或者 System Verilog），使用专业商业工具进行电路仿真。硬件描述语言不同于C++/Python等高级软件编程语言，具有独特的“时钟”特性，对于软件领域的工程师不友好，学习成本高。&#xA;为了打通芯片验证与传统软件测试之间的壁垒，让更多的人参与到芯片验证，本项目提供如下内容：&#xA;多语言验证工具（Picker），让用户可以使用自己擅长的编程语言进行芯片验证 验证框架（MLVP），如何在不关心时钟的情况下进行功能验证&#xA;介绍基本电路、验证知识，方便软件背景爱好者更能容易的理解电路特征&#xA;提供基本学习材料，学习基本验证知识&#xA;提供真实高性能芯片验证案例，让爱好者可以远程参与验证工作&#xA;基本术语 DUT： DUT（Design Under Test）指待测试设计，通常指设计好的RTL代码。&#xA;RM： Reference Model （RM）指代待测试单元对应的参考模型，参考模型通常被认为是标准的，没有错误的。&#xA;RTL： 指寄存器传输级（Register Transfer Level），通常指代芯片设计对应的 verilog 或者 vhdl 代码。&#xA;覆盖率： 测试覆盖率是指测试范围与整个需求范围的百分比。在芯片验证领域，通常有代码行覆盖率、函数覆盖率、功能覆盖率等。&#xA;DV： DV中的D通常指设计（Desgin），V指验证（Verification）。合在一起指设计与验证协同工作。&#xA;差分测试（difftest）： 选取两个（或以上）功能相同的被测对象，选取符合被测对象要求的同一测试用例分别提交被测对象进行执行，以观测执行结果是否存在差异的过程。&#xA;工具介绍 本学习材料用到的核心工具为 picker （https://github.com/XS-MLVP/picker），它的作用是将RTL编写的设计模块自动提供高级编程语言接口（Python/C++等）。基于该工具，软件开发（测试）背景的验证人员可以不用去学习 Verilog/VHDL 等硬件描述语言进行芯片验证。&#xA;系统需求 建议操作系统：Ubuntu 22.04 LTS&#xA;在系统结构开发、科研的过程中，Linux 是最为常用的平台，这主要是因为 Linux 拥有丰富的软件、工具资源：由于 Linux 的开源性，各大重要工具软件（如 Verilator）可以很容易地面向 Linux 进行开发。 在本课程的实验中，多语言验证工具Picker、Swig等工具都可以在 Linux 上稳定运行。 </description>
    </item>
    <item>
      <title>完整果壳 Cache 验证</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/advance_case/nutshellcache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/advance_case/nutshellcache/</guid>
      <description>验证报告 https://github.com/XS-MLVP/Example-NutShellCache/blob/master/nutshell_cache_report_demo.pdf&#xA;验证环境&amp;amp;用例代码 https://github.com/XS-MLVP/Example-NutShellCache</description>
    </item>
    <item>
      <title>验证接口</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/multi-lang/interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/multi-lang/interface/</guid>
      <description>生成库文件 picker可以通过参数--lang指定转换的对应语言（参数已支持cpp、python、java、scala、golang），由于不同编程语言对应的“库”不同，因此生成的库文件有所区别，例如java生成的是jar包，python生成的为文件夹。picker导出对应编程语言的库，需要xcomm的支持，可以通过picker --check查看支持情况：&#xA;$picker --check [OK ] Version: 0.9.0---dirty [OK ] Exec path: /home/yaozhicheng/mambaforge/lib/python3.11/site-packages/picker/bin/picker [OK ] Template path: /home/yaozhicheng/mambaforge/lib/python3.11/site-packages/picker/share/picker/template [OK ] Support Cpp (find: &amp;#39;/home/yaozhicheng/mambaforge/lib/python3.11/site-packages/picker/share/picker/include&amp;#39; success) [Err] Support Java (find: &amp;#39;java/xspcomm-java.jar&amp;#39; fail) [Err] Support Scala (find: &amp;#39;scala/xspcomm-scala.jar&amp;#39; fail) [OK ] Support Python (find: &amp;#39;/home/yaozhicheng/mambaforge/lib/python3.11/site-packages/picker/share/picker/python&amp;#39; success) [Err] Support Golang (find: &amp;#39;golang&amp;#39; fail) 输出显示success表示支持，fail表示不支持。&#xA;C++ 对于C++语言，picker生成的为so动态链接库，和对应的头文件。例如：&#xA;UT_Adder/ ├── UT_Adder.cpp # DUT 文件 ├── UT_Adder.hpp # DUT 头文件 ├── UT_Adder_dpi.hpp # DPI 头文件 ├── dut_base.</description>
    </item>
    <item>
      <title>TileLink 协议</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/advance_case/tilelink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/advance_case/tilelink/</guid>
      <description></description>
    </item>
    <item>
      <title>波形生成</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/env_usage/wave/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/env_usage/wave/</guid>
      <description>使用方法 在使用 Picker 工具封装 DUT 时，使用选项-w [wave_file]指定需要保存的波形文件。 针对不同的后端仿真器，支持不同的波形文件类型，具体如下：&#xA;Verilator .vcd格式的波形文件。 .fst格式的波形文件，更高效的压缩文件。 VCS .fsdb格式的波形文件，更高效的压缩文件。 需要注意的是，如果你选择自行生成 libDPI_____.so 文件，那么波形文件格式不受上述约束的限制。因为波形文件是在仿真器构建 libDPI.so 时决定的，如果你自行生成，那么波形文件格式也需要自行用对应仿真器的配置指定。&#xA;Python 示例 正常情况下，dut需要被显式地声明完成任务，以通知进行模拟器的后处理工作（写入波形、覆盖率等文件）。 在Python中，需要在完成所有测试后，调用dut的.finalize()方法以通知模拟器任务已完成，进而将文件flush到磁盘。&#xA;以加法器为例，以下为测试程序：&#xA;from UT_Adder import * if __name__ == &amp;#34;__main__&amp;#34;: dut = DUTAdder() for i in range(10): dut.a.value = i * 2 dut.b.value = int(i / 4) dut.Step(1) print(dut.sum.value, dut.cout.value) dut.finalize() # flush the wave file to disk 运行结束后即可生成指定文件名的波形文件。&#xA;查看结果 GTKWave 使用 GTKWave 打开 fst 或 vcd 波形文件，即可查看波形图。&#xA;Verdi 使用 Verdi 打开 fsdb 或 vcd 波形文件，即可查看波形图。</description>
    </item>
    <item>
      <title>基础工具</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/env_usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/env_usage/</guid>
      <description>在开始前本页会 简单的介绍什么是验证，以及示例里面用到的概念，如 DUT (Design Under Test) 和 RM (Reference Model) 。</description>
    </item>
    <item>
      <title>验证案例</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/multi-lang/examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/multi-lang/examples/</guid>
      <description>本页将展示使用多种语言验证的各种案例。</description>
    </item>
    <item>
      <title>验证基础</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/basic/</guid>
      <description>介绍芯片验证，以果壳 Cache 为例，介绍基本的验证流程、报告撰写。</description>
    </item>
    <item>
      <title>案例一：简单加法器</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/quick-start/eg-adder/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/quick-start/eg-adder/</guid>
      <description>RTL源码 在本案例中，我们驱动一个 64 位的加法器（组合电路），其源码如下：&#xA;// A verilog 64-bit full adder with carry in and carry out module Adder #( parameter WIDTH = 64 ) ( input [WIDTH-1:0] a, input [WIDTH-1:0] b, input cin, output [WIDTH-1:0] sum, output cout ); assign {cout, sum} = a + b + cin; endmodule 该加法器包含一个 64 位的加法器，其输入为两个 64 位的数和一个进位信号，输出为一个 64 位的和和一个进位信号。&#xA;测试过程 在测试过程中，我们将创建一个名为 Adder 的文件夹，其中包含一个 Adder.v 文件。该文件内容即为上述的 RTL 源码。&#xA;将RTL导出为 Python Module 生成中间文件 进入 Adder 文件夹，执行如下命令：</description>
    </item>
    <item>
      <title>CoupledL2</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/multi-lang/examples/coupledl2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/multi-lang/examples/coupledl2/</guid>
      <description>CoupledL2是一个非阻塞的L2 Cache。&#xA;下面的代码会对CoupledL2进行简单的验证，并使用数组作为参考模型，验证过程如下：&#xA;生成随机的地址addr、执行AcquireBlock，请求读取addr的数据。 执行GrantData，接收DUT响应的数据。 把接收到的数据和参考模型的内容进行比较，验证行为是否一致。 执行GrantAck，响应DUT。 执行ReleaseData，向DUT请求在addr写入随机数据data。 同步参考模型，把addr的数据更新为data。 执行ReleaseAck，接收DUT的写入响应。 上述步骤会重复4000次。&#xA;验证代码：&#xA;Cpp Java Python #include &#34;UT_CoupledL2.hpp&#34; using TLDataArray = std::array; enum class OpcodeA : uint32_t { PutFullData = 0x0, PutPartialData = 0x1, ArithmeticData = 0x2, LogicalData = 0x3, Get = 0x4, Hint = 0x5, AcquireBlock = 0x6, AcquirePerm = 0x7, }; enum class OpcodeB : uint32_t { ProbeBlock = 0x6, ProbePerm = 0x7 }; enum class OpcodeC : uint32_t { ProbeAck = 0x4, ProbeAckData = 0x5, Release = 0x6, ReleaseData = 0x7 }; enum class OpcodeD : uint32_t { AccessAck, AccessAckData, HintAck, Grant = 0x4, GrantData = 0x5, ReleaseAck = 0x6 }; enum class OpcodeE : uint32_t { GrantAck = 0x4 }; constexpr std::initializer_list ARGS = {&#34;</description>
    </item>
    <item>
      <title>多文件输入</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/env_usage/multifile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/env_usage/multifile/</guid>
      <description>多文件输入输出 在许多情况中，某文件下的某个模块会例化其他文件下的模块，在这种情况下您可以使用Picker工具的-f选项处理多个verilog源文件。例如，假设您有Cache.sv, CacheStage.sv以及CacheMeta.sv三个源文件：&#xA;文件列表 Cache.sv // In module Cache( ... ); CacheStage s1( ... ); CacheStage s2( ... ); CacheStage s3( ... ); CacheMeta cachemeta( ... ); endmodule CacheStage.sv // In CacheStage.sv module CacheStage( ... ); ... endmodule CacheMeta.sv // In CacheMeta.sv module CacheMeta( ... ); ... endmodule 应用方式 其中，待测模块为Cache，位于Cache.sv中，则您可以通过以下命令生成DUT：&#xA;命令行指定 picker export Cache.sv --fs CacheStage.sv,CacheMeta.sv --sname Cache 通过文件列表文件指定 您也可以通过传入.txt文件的方式来实现多文件输入：&#xA;picker export Cache.sv --fs src.txt --sname Cache 其中src.txt的内容为:&#xA;CacheStage.sv CacheMeta.sv 注意事项 需要注意的是，使用多文件输入时仍需要指定待测顶层模块所在的文件，例如上文中所示的Cache.</description>
    </item>
    <item>
      <title>案例二：随机数生成器</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/quick-start/eg-rmg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/quick-start/eg-rmg/</guid>
      <description>RTL源码 在本案例中，我们驱动一个随机数生成器，其源码如下：&#xA;module RandomGenerator ( input wire clk, input wire reset, input [15:0] seed, output [15:0] random_number ); reg [15:0] lfsr; always @(posedge clk or posedge reset) begin if (reset) begin lfsr &amp;lt;= seed; end else begin lfsr &amp;lt;= {lfsr[14:0], lfsr[15] ^ lfsr[14]}; end end assign random_number = lfsr; endmodule 该随机数生成器包含一个 16 位的 LFSR，其输入为一个 16 位的种子数，输出为一个 16 位的随机数。LFSR 的更新规则为：&#xA;将当前的 LFSR 的最高位与次高位异或，称为new_bit。 将原来的 LFSR 向左平移一位，将 new_bit 放在最低位。 丢弃最高位。 测试过程 在测试过程中，我们将创建一个名为 RandomGenerator 的文件夹，其中包含一个 RandomGenerator.</description>
    </item>
    <item>
      <title>覆盖率统计</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/env_usage/coverage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/env_usage/coverage/</guid>
      <description>Picker 工具支持生成代码行覆盖率报告，MLVP（https://github.com/XS-MLVP/mlvp） 项目支持生成功能覆盖率报告。&#xA;代码行覆盖率 目前 Picker 工具支持基于 Verilator 仿真器生成的代码行覆盖率报告。&#xA;Verilator Verilator 仿真器提供了覆盖率支持功能。&#xA;该功能的实现方式是：&#xA;利用 verilator_coverage 工具处理或合并覆盖率数据库，最终针对多个DUT生成一个 coverage.info 文件。 利用 lcov 工具的 genhtml 命令基于coverage.info和RTL代码源文件，生成完整的代码覆盖率报告。 使用时的流程如下：&#xA;使用 Picker 生成 dut 时，使能 COVERAGE 功能 （添加-c选项）。 仿真器运行完成后，dut.finalize() 之后会生成覆盖率数据库文件 V{DUT_NAME}.dat。 基于 verilator_coverage 的 write-info 功能将其转换成 .info文件。 基于 lcov 的 genhtml 功能，使用.info文件和文件中指定的rtl源文件，生成html报告。 注意： 文件中指定的rtl源文件是指在生成的DUT时使用的源文件路径，需要保证这些路径在当前环境下是有效的。简单来说，需要编译时用到的所有.sv/.v文件都需要在当前环境下存在，并且目录不变。&#xA;verilator_coverage verilator_coverage 工具用于处理 DUT 运行后生成的 .dat 的覆盖率数据。该工具可以处理并合并多个 .dat 文件，同时具有两类功能：&#xA;基于 .dat 文件生成 .info 文件，用于后续生成网页报告。&#xA;-annotate &amp;lt;output_dir&amp;gt;：以标注的形式在源文件中呈现覆盖率情况，结果保存到output_dir中。形式如下：&#xA;100000 input logic a; // Begins with whitespace, because // number of hits (100000) is above the limit.</description>
    </item>
    <item>
      <title>高级案例</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/advance_case/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/advance_case/</guid>
      <description></description>
    </item>
    <item>
      <title>案例三：双端口栈（回调）</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/quick-start/eg-stack-callback/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/quick-start/eg-stack-callback/</guid>
      <description>双端口栈简介 双端口栈是一种数据结构，支持两个端口同时进行操作。与传统单端口栈相比，双端口栈允许同时进行数据的读写操作，在例如多线程并发读写等场景下，双端口栈能够提供更好的性能。本例中，我们提供了一个简易的双端口栈实现，其源码如下：&#xA;module dual_port_stack ( input clk, input rst, // Interface 0 input in0_valid, output in0_ready, input [7:0] in0_data, input [1:0] in0_cmd, output out0_valid, input out0_ready, output [7:0] out0_data, output [1:0] out0_cmd, // Interface 1 input in1_valid, output in1_ready, input [7:0] in1_data, input [1:0] in1_cmd, output out1_valid, input out1_ready, output [7:0] out1_data, output [1:0] out1_cmd ); // Command definitions localparam CMD_PUSH = 2&amp;#39;b00; localparam CMD_POP = 2&amp;#39;b01; localparam CMD_PUSH_OKAY = 2&amp;#39;b10; localparam CMD_POP_OKAY = 2&amp;#39;b11; // Stack memory and pointer reg [7:0] stack_mem[0:255]; reg [7:0] sp; reg busy; reg [7:0] out0_data_reg, out1_data_reg; reg [1:0] out0_cmd_reg, out1_cmd_reg; reg out0_valid_reg, out1_valid_reg; assign out0_data = out0_data_reg; assign out0_cmd = out0_cmd_reg; assign out0_valid = out0_valid_reg; assign out1_data = out1_data_reg; assign out1_cmd = out1_cmd_reg; assign out1_valid = out1_valid_reg; always @(posedge clk or posedge rst) begin if (rst) begin sp &amp;lt;= 0; busy &amp;lt;= 0; end else begin // Interface 0 Request Handling if (!</description>
    </item>
    <item>
      <title>案例四：双端口栈（协程）</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/quick-start/eg-stack-async/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/quick-start/eg-stack-async/</guid>
      <description>双端口栈简介与环境构建 本案例中使用的双端口栈与案例三中的实现完全相同，请查看案例三中的双端口栈简介及构建驱动环境。&#xA;利用协程驱动 DUT 在案例三中，我们使用了回调函数的方式来驱动DUT，回调函数虽然给我们提供了一种能够完成并行操作的方式，然而其却把完成的执行流程割裂为多次函数调用，并需要维护大量中间状态，导致代码的编写及调试变得较为复杂。&#xA;在本案例中，我们将会介绍一种通过协程驱动的方法，这种方法不仅能够做到并行操作，同时能够很好地避免回调函数所带来的问题。&#xA;协程简介 协程是一种“轻量级”的线程，通过协程，你可以实现与线程相似的并发执行的行为，但其开销却远小于线程。其实现原理是，协程库实现了一个运行于单线程之上的事件循环（EventLoop），程序员可以定义若干协程并且加入到事件循环，由事件循环负责这些协程的调度。&#xA;一般来说，我们定义的协程在执行过程中会持续执行，直到遇到一个需要等待的“事件”，此时事件循环就会暂停执行该协程，并调度其他协程运行。当事件发生后，事件循环会再次唤醒该协程，继续执行。&#xA;对于硬件验证中的并行执行来说，这种特性正是我们所需要的，我们可以创建多个协程，来完成验证中的多个驱动任务。我们可以将时钟的执行当做事件，在每个协程中等待这个事件，当时钟信号到来时，事件循环会唤醒所有等待的协程，使其继续执行，直到他们等待下一个时钟信号。&#xA;我们用 Python 中的 asyncio 来实现对协程的支持：&#xA;import asyncio from dual_port_stack import * async def my_coro(dut, name): for i in range(10): print(f&amp;#34;{name}: {i}&amp;#34;) await dut.AStep(1) async def test_dut(dut): asyncio.create_task(my_coro(dut, &amp;#34;coroutine 1&amp;#34;)) asyncio.create_task(my_coro(dut, &amp;#34;coroutine 2&amp;#34;)) await asyncio.create_task(dut.RunStep(10)) dut = DUTdual_port_stack() dut.InitClock(&amp;#34;clk&amp;#34;) asyncio.run(test_dut(dut)) dut.Finish() 你可以直接运行上述代码来观察协程的执行过程。在上述代码中我们用 create_task 创建了两个协程任务并加入到事件循环中，每个协程任务中，会不断打印一个数字并等待下一个时钟信号到来。&#xA;我们使用 dut.RunStep(10) 来创建一个后台时钟，它会不断产生时钟同步信号，使得其他协程能够在时钟信号到来时继续执行。&#xA;基于协程驱动的双端口栈 利用协程，我们就可以将驱动双端口栈中单个端口逻辑写成一个独立的执行流，不需要再去维护大量的中间状态。&#xA;下面是我们提供的一个简单的使用协程驱动的验证代码：&#xA;import asyncio import random from dual_port_stack import * from enum import Enum class StackModel: def __init__(self): self.</description>
    </item>
    <item>
      <title>多语言支持</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/multi-lang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/multi-lang/</guid>
      <description></description>
    </item>
    <item>
      <title>PyTest</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/env_usage/frameworks/pytest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/env_usage/frameworks/pytest/</guid>
      <description>软件测试 在正式开始pytest 之间我们先了解一下软件的测试，软件测试一般分为如下四个方面&#xA;单元测试：称模块测试，针对软件设计中的最小单位——程序模块，进行正确性检查的测试工作 集成测试：称组装测试，通常在单元测试的基础上，将所有程序模块进行有序的、递增测试，重点测试不同模块的接口部分 系统测试：将整个软件系统看成一个整体进行测试，包括对功能、性能以及软件所运行的软硬件环境进行测试 验收测试：指按照项目任务书或合同、供需双方约定的验收依据文档进行的对整个系统的测试与评审，决定是否接收或拒收系统 pytest最初是作为一个单元测试框架而设计的，但它也提供了许多功能，使其能够进行更广泛的测试，包括集成测试，系统测试，他是一个非常成熟的全功能的python 测试框架。 它通过收集测试函数和模块，并提供丰富的断言库来简化测试的编写和运行，是一个非常成熟且功能强大的 Python 测试框架，具有以下几个特点：&#xA;简单灵活：Pytest 容易上手，且具有灵活性。 支持参数化：您可以轻松地为测试用例提供不同的参数。 全功能：Pytest 不仅支持简单的单元测试，还可以处理复杂的功能测试。您甚至可以使用它来进行自动化测试，如 Selenium 或 Appium 测试，以及接口自动化测试（结合 Pytest 和 Requests 库）。 丰富的插件生态：Pytest 有许多第三方插件，您还可以自定义扩展。一些常用的插件包括： pytest-selenium：集成 Selenium。 pytest-html：生成HTML测试报告。 pytest-rerunfailures：在失败的情况下重复执行测试用例。 pytest-xdist：支持多 CPU 分发。 与 Jenkins 集成良好。 支持 Allure 报告框架。 本文将基于测试需求简单介绍pytest的用法，其完整手册在这里，供同学们进行深入学习。&#xA;Pytest安装 # 安装pytest： pip install pytest # 升级pytest pip install -U pytest # 查看pytest版本 pytest --version # 查看已安装包列表 pip list # 查看pytest帮助文档 pytest -h # 安装第三方插件 pip install pytest-sugar pip install pytest-rerunfailures pip install pytest-xdist pip install pytest-assume pip install pytest-html Pytest使用 命名规则 # 首先在使用pytest 时我们的模块名通常是以test开头或者test结尾，也可以修改配置文件，自定义命名规则 # test_*.</description>
    </item>
    <item>
      <title>Hypothesis</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/env_usage/frameworks/hypothesis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/env_usage/frameworks/hypothesis/</guid>
      <description>Hypothesis 在上一节中，我们通过手动编写测试用例，并为每个用例指定输入和预期输出。这种方式存在一些问题，例如测试用例覆盖不全面、边界条件 容易被忽略等。它是一个用于属性基于断言的软件测试的 Python 库。Hypothesis 的主要目标是使测试更简单、更快速、更可靠。它使用了一种称为属性基于断言的测试方法，即你可以为你的代码编写一些假（hypotheses），然后 Hypothesis 将会自动生成测试用例并验证这些假设。这使得编写全面且高效的测试变得更加容易。Hypothesis 可以自动生成各种类型的输入数据，包括基本类型（例如整数、浮点数、字符串等）、容器类型（例如列表、集合、字典等）、自定义类型等。然后，它会根据你提供的属性（即断言）进行测试，如果发现测试失败，它将尝试缩小输入数据的范围以找出最小的失败案例。通过 Hypothesis，你可以更好地覆盖代码的边界条件，并发现那些你可能没有考虑到的错误情况。这有助于提高代码的质量和可靠性。&#xA;基本概念 测试函数：即待测试的函数或方法，我们需要对其进行测试。 属性：定义了测试函数应该满足的条件。属性是以装饰器的形式应用于测试函数上的。 策略：用于生成测试数据的生成器。Hypothesis 提供了一系列内置的策略，如整数、字符串、列表等。我们也可以自定义策略。 测试生成器：基于策略生成测试数据的函数。Hypothesis 会自动为我们生成测试数据，并将其作为参数传递给测试函数。 本文将基于测试需求简单介绍Hypothesis的用法，其完整手册在这里，供同学们进行深入学习。&#xA;安装 使用pip安装，在python中导入即可使用&#xA;pip install hypothesis import hypothesis 基本用法 属性和策略 Hypothesis 使用属性装饰器来定义测试函数的属性。最常用的装饰器是 @given，它指定了测试函数应该满足的属性。 我们可以通过@given 装饰器定义了一个测试函数 test_addition。并给x 添加对应的属性，测试生成器会自动为测试函数生成测试数据，并将其作为参数传递给函数，例如&#xA;def addition(number: int) -&amp;gt; int: return number + 1 @given(x=integers(), y=integers())　def test_addition(x, y):　assert x + 1 == addition（1） 其中integers () 是一个内置的策略，用于生成整数类型的测试数据。Hypothesis 提供了丰富的内置策略，用于生成各种类型的测试数据。除了integers ()之外，还有字符串、布尔值、列表、字典等策略。例如使用 text () 策略生成字符串类型的测试数据，使用 lists (text ()) 策略生成字符串列表类型的测试数据&#xA;@given(s=text(), l=lists(text())) def test_string_concatenation(s, l):　result = s + &amp;#34;&amp;#34;.</description>
    </item>
    <item>
      <title>集成测试框架</title>
      <link>https://xs-mlvp.github.io/mlvp/docs/env_usage/frameworks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/docs/env_usage/frameworks/</guid>
      <description>在芯片验证的传统实践中，UVM等框架被广泛采用。尽管它们提供了一整套验证方法，但通常只适用于特定的硬件描述语言和仿真环境。本工具突破了这些限制，能够将仿真代码转换成C++或Python，使得我们可以利用软件验证工具来进行更全面的测试。&#xA;因为Python具有强大的生态系统，所以本项目主要以Python作为示例，简单介绍Pytest和Hypothesis两个经典软件测试框架。Pytest以其简洁的语法和丰富的功能，轻松应对各种测试需求。而Hypothesis则通过生成测试用例，揭示出意料之外的边缘情况，提高了测试的全面性和深度。&#xA;我们的项目从一开始就设计为与多种现代软件测试框架兼容。我们鼓励您探索这些工具的潜力，并将其应用于您的测试流程中。通过亲身实践，您将更深刻地理解这些工具如何提升代码的质量和可靠性。让我们一起努力，提高芯片开发的质量。</description>
    </item>
  </channel>
</rss>
