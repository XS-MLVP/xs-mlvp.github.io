[{"body":"源码安装Picker工具 依赖安装 cmake ( \u003e=3.11 ) gcc ( 支持c++20,至少为10, 最好为11及以上 ) python3 ( \u003e=3.8 ) verilator ( ==4.218 ) verible-verilog-format ( \u003e=0.0-3428-gcfcbb82b ) swig ( \u003e=4.2.0, 目前为master分支， 仅在需要python支持时使用 ) 请注意，请确保verible-verilog-format等工具的路径已经添加到环境变量$PATH中，可以直接命令行调用。\n下载源码 git clone https://gitee.com/yaozhicheng/picker.git 构建并安装 cd picker export BUILD_XSPCOMM_SWIG=python # 仅在需要python支持时使用 make sudo -E make install 默认的安装的目标路径是 /usr/local， 二进制文件被置于 /usr/local/bin，模板文件被置于 /usr/local/share/picker。\n安装时会自动安装 xspcomm 基础库，该基础库是用于封装 RTL 模块的基础类型，位于 /usr/local/lib/libxspcomm.so。 可能需要手动设置编译时的链接目录参数(-L) 同时如果开启了python支持，还会安装 xspcomm 的python包，位于 /usr/local/share/picker/python/xspcomm/。\n安装测试 执行命令并检查输出：\n➜ picker git:(master) picker XDut Generate. Convert DUT(*.v/*.sv) to C++ DUT libs. Notice that [file] option allow only one file. Usage: XDut Gen [file] [OPTION...] -f, --filelist arg DUT .v/.sv source files, contain the top module, split by comma. Or use '*.txt' file with one RTL file path per line to specify the file list (default: \"\") --sim arg vcs or verilator as simulator, default is verilator (default: verilator) -l, --language arg Build example project, default is cpp, choose cpp or python (default: cpp) -s, --source_dir arg Template Files Dir, default is ${picker_install_path}/../picker/template (default: /usr/local/share/picker/template) -t, --target_dir arg Render files to target dir, default is ./picker_out (default: ./picker_out) -S, --source_module_name arg Pick the module in DUT .v file, default is the last module in the -f marked file (default: \"\") -T, --target_module_name arg Set the module name and file name of target DUT, default is the same as source. For example, -T top, will generate UTtop.cpp and UTtop.hpp with UTtop class (default: \"\") --internal arg Exported internal signal config file, default is empty, means no internal pin (default: \"\") -F, --frequency arg Set the frequency of the **only VCS** DUT, default is 100MHz, use Hz, KHz, MHz, GHz as unit (default: 100MHz) -w, --wave_file_name arg Wave file name, emtpy mean don't dump wave (default: \"\") -c, --coverage Enable coverage, default is not selected as OFF -V, --vflag arg User defined simulator compile args, passthrough. Eg: '-v -x-assign=fast -Wall --trace' || '-C vcs -cc -f filelist.f' (default: \"\") -C, --cflag arg User defined gcc/clang compile command, passthrough. Eg:'-O3 -std=c++17 -I./include' (default: \"\") -v, --verbose Verbose mode -e, --example Build example project, default is OFF -h, --help Print usage 参数解释 [file]: 必需。DUT 的 Verilog 或 SystemVerilog 源文件，包含顶层模块 --filelist, -f: 可选。DUT 的 Verilog 或 SystemVerilog 源文件，逗号分隔。也可以使用 *.txt 文件，每行指定一个 RTL 文件路径，来指定文件列表。 --sim: 可选。模拟器类型，可以是 vcs 或 verilator，默认是 verilator。 --language, -l: 可选。构建示例项目的语言，可以是 cpp 或 python，默认是 cpp。 --source_dir, -s: 可选。模板文件目录，默认是 ${mcv_install_path}/../mcv/template。 --target_dir, -t: 可选。渲染文件的目标目录，默认是 ./mcv_out。 --source_module_name, -S: 可选。在 DUT 的 Verilog 文件中选择模块，默认是 标记的文件中的最后一个模块。 --target_module_name, -T: 可选。设置目标 DUT 的模块名和文件名，默认与源相同。例如，-T top 将生成 UTtop.cpp 和 UTtop.hpp，并包含 UTtop 类。 --internal: 可选。导出的内部信号配置文件，默认为空，表示没有内部引脚。 --frequency, -F: 可选。设置 仅 VCS DUT 的频率，默认是 100MHz，可以使用 Hz、KHz、MHz、GHz 作为单位。 --wave_file_name, -w: 可选。波形文件名，为空表示不导出波形。 --vflag, -V: 可选。用户定义的模拟器编译参数，透传。例如：’-v -x-assign=fast -Wall –trace’ 或 ‘-f filelist.f’。 --cflag, -C: 可选。用户定义的 gcc/clang 编译参数，透传。例如：’-O3 -std=c++17 -I./include’。 --verbose, -v: 可选。详细模式，保留生成的中间文件。 --example, -e: 可选。构建示例项目，默认是 OFF。 --help, -h: 可选。打印使用帮助。 功能测试 项目提供完整的加法器和随机数生成器测试项目，可以用一行命令测试 Picker 功能是否正常。\n加法器测试 cd picker # 进入项目根目录，即git clone的目录 ./example/Adder/release-verilator.sh -l cpp -e 程序应当输出类似的内容：\n... [cycle 114515] a=0xa9c430d2942bd554, b=0xe26feda874dac8b7, cin=0x0 DUT: sum=0x8c341e7b09069e0b, cout=0x1 REF: sum=0x8c341e7b09069e0b, cout=0x1 Test Passed, destory UTAdder ... 随机数生成器测试 cd picker ./example/RandomGenerator/release-verilator.sh -l cpp -e 程序应当输出类似的内容：\n... [cycle 114521] DUT: cout=0x9a4c , REF: cout=0x9a4c [cycle 114522] DUT: cout=0x3499 , REF: cout=0x3499 [cycle 114523] DUT: cout=0x6932 , REF: cout=0x6932 [cycle 114524] DUT: cout=0xd265 , REF: cout=0xd265 [cycle 114525] DUT: cout=0xa4ca , REF: cout=0xa4ca [cycle 114526] DUT: cout=0x4995 , REF: cout=0x4995 Test Passed, destory UTRandomGenerator ... 至此，可以确定picker工具安装完成。\n","categories":["教程"],"description":"安装相关依赖，**下载、构建并安装**对应的工具。","excerpt":"安装相关依赖，**下载、构建并安装**对应的工具。","ref":"/mlvp/docs/quick-start/installer/","tags":["docs"],"title":"安装教程"},{"body":"","categories":["示例项目","教程"],"description":"XXX。","excerpt":"XXX。","ref":"/mlvp/docs/advance_case/nutshell_cache/","tags":["examples","docs"],"title":"果壳 Cache"},{"body":"","categories":["示例项目","教程"],"description":"XXXX。","excerpt":"XXXX。","ref":"/mlvp/docs/advance_func/callback/","tags":["examples","docs"],"title":"回调与Eventloop"},{"body":" 在开始前本页会 简单的介绍什么是验证，以及示例里面用到的概念，如 DUT (Design Under Test) 和 RM (Reference Model) 。\n硬件验证 Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?\nDesign Under Test Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?\nReference Model Is there any initial setup users need to do after installation to try your project?\n开始实验 Can your users test their installation, for example by running a command or deploying a Hello World example?\n","categories":["示例项目","教程"],"description":"如何使用开放验证平台的环境参与到硬件验证中来。","excerpt":"如何使用开放验证平台的环境参与到硬件验证中来。","ref":"/mlvp/docs/quick-start/","tags":["examples","docs"],"title":"快速开始"},{"body":" 本页简单介绍什么是芯片验证，以及示例里面用到的概念，如 DUT (Design Under Test) 和 RM (Reference Model) 。\n芯片验证过程需要和企业、团队的实际情况契合，没有符合所有要求，必须参考的绝对标准。\n什么是芯片验证 芯片从设计到成品的过程主要包括芯片设计、芯片制造、芯片封测试三大阶段。在芯片设计中，又分前端设计和后端设计，前端设计也称之为逻辑设计，目标是让电路逻辑达到预期功能要求。后端设计也称为物理设计，主要工作是优化布局布线，减小芯片面积，降低功耗，提高频率等。芯片验证（Chip Verification）是芯片设计流程中的一个重要环节。它的目标是确保设计的芯片在功能、性能和功耗等方面都满足预定的规格。验证过程通常包括功能验证、时序验证和功耗验证等多个步骤，使用的方法和工具包括仿真、形式验证、硬件加速和原型制作等。针对本文，芯片验证仅包含对芯片前端设计的验证，验证设计的电路逻辑是否满足既定需求（“Does this proposed design do what is intended?\"），通常也称为功能验证（Functional verification），不包含功耗、频率等后端设计。\n对于芯片产品，一旦设计错误被制造出来修改成本将会非常高昂，因为可能需要召回产品，并重新制造芯片，无论是经济成本还是时间成本都十分昂贵。经典由于芯片验证不足导致失败的典型案例如下： Intel Pentium FDIV Bug：在1994年，Intel的Pentium处理器被发现存在一个严重的除法错误，这个错误被称为FDIV bug。这个错误是由于在芯片的浮点单元中，一个查找表中的几个条目错误导致的。这个错误在大多数应用中不会出现，但在一些特定的计算中会导致结果错误。由于这个错误，Intel不得不召回了大量的处理器，造成了巨大的经济损失。\nAriane 5 Rocket Failure：虽然这不是一个芯片的例子，但它展示了硬件验证的重要性。在1996年，欧洲空间局的Ariane 5火箭在发射后不久就爆炸了。原因是火箭的导航系统中的一个64位浮点数被转换为16位整数时溢出，导致系统崩溃。这个错误在设计阶段没有被发现，导致了火箭的失败。\nAMD Barcelona Bug：在2007年，AMD的Barcelona处理器被发现存在一个严重的转译查找缓冲（TLB）错误。这个错误会导致系统崩溃或者重启。AMD不得不通过降低处理器的频率和发布BIOS更新来解决这个问题，这对AMD的声誉和财务状况造成了重大影响。\n这些案例都强调了芯片验证的重要性。如果在设计阶段就能发现并修复这些错误，那么就可以避免这些昂贵的失败。验证不足的案例不仅发生在过去，也发生在现在，例如某新入局 ASIC 芯片市场的互联网企业打造一款 55 纳米芯片，极力追求面积缩减并跳过验证环节，最终导致算法失败，三次流片皆未通过测试，平均每次流片失败导致企业损失约 50 万美元。\n芯片验证流程 芯片设计和验证的耦合关系如上图所示，设计和验证有同样的输入，即规范文档（specification）。参考规范，设计与验证人员双方按照各自的理解，以及各自的需求进行独立编码实现。设计方需要满足的前提是编码的RTL代码“可综合”，需要考虑电路特性，而验证方一般只要考虑功能是否满足要求，编码限制少。双方完成模块开发后，需要进行健全性对比测试（Sanity Test），判定功能是否表现一致，若不一致需要进行协同排查，确定问题所在并进行修复，再进行对比测试，直到所有功能点都满足预期。由于芯片设计和芯片验证耦合度很高，因此有些企业在研发队伍上也进行了直接耦合，为每个子模块的设计团队都配置了对应的验证团队（DV）。上图中的设计与验证的耦合流程为粗粒度的关系，具体到具体芯片（例如Soc、DDR）、具体企业等都有其适合自身的合作模式。\n在上述对比测试中，设计方的产出的模块通常称为DUT（Design Under Test），验证方开发的模型通常称为RM（Reference Model）。针对图中的验证工作，按照流程可以有：编写验证计划、创建验证平台、整理功能点、构建测试用例、运行调试、收集Bug/覆盖率、回归测试、编写测试报告等多个阶段。\n验证计划： 验证计划描述了如何进行验证，以及如何保证验证质量，达到功能验证要求。在文档结构上通常包含验证目标，验证策略、验证环境、验证项、验证过程、风险防范、资源及时间表、结果和报告等部分。验证目标明确需要验证的功能或性能指标，这些目标应该直接从芯片的规范文档中提取。验证策略描述如何进行验证，包括可能使用的验证方法，例如仿真、形式化、FPGA加速等，以及如何组织验证任务。验证环境用于描述具体的测试环境，例如验证工具类型，版本号等。验证项库俄超关羽需要验证的具体项以及预期结果。验证计划可以有总计划，也可以针对具体验证的子任务进行编写。\n平台搭建： 验证平台是具体验证任务的执行环境，同一类验证任务可以使用相同的验证平台。验证平台的搭建是验证流程中的关键步骤、具体包含验证工具选择（例如是采用软件仿真，还是采用形式化验证，或者硬件加速）、环境配置（例如配置服务器环境，FPGA环境）、创建测试环境、基本测试案例等。创建好基本测试平台，跑通基本测试案例，也通常称为“冒烟测试”。后继具体的测试代码，都将基于该测试平台进行，因此测试平台需要具有可重用性。验证平台通过包含测试框架和被测试代码，以及对应的基本信号激励。\n功能点整理： 功能点整理，即需要根据规范手册（spec）列出DUT的基本功能，并对其进行明确的描述，以及如何对该功能点进行测试。功能点整理过程中，需要根据重要性、风险、复杂性等因数对其进行优先级排序。功能点整理还需要对各个功能点进行追踪和状态，如果发现原始功能点有更新需要及时进行对应计划的同步。\n测试用例： 测试用例是指一组条件或变量，用于确定DUT是否满足特定需求并能正确运行。每个测试用例通常包含测试条件，输入数据，预期结果，实际结果和测试结果。通过运行测试用例并比较预期结果和实际结果，可以确定系统或应用是否正确实现了特定的功能或需求。在芯片验证中，测试用例是用来验证芯片设计是否满足规格要求的重要工具。\n编码实现： 编码实现即对测试用例的具体执行过程，包括测试数据生成、测试框架选择、编程语言选择、参考模型编写等。编码实现是对功能点和测试用例充分理解后工作，如果理解不到位，可能导致DUT无法驱动，不能发现潜在bug等问题。\n收集bug/覆盖率： 验证的目标就是提前发现设计中存在的bug，因此需要对发现的bug进行收集和管理。没发现一个新缺陷，需要给定唯一标号，并同设计工程师进行bug定级，然后进行状态追踪。能发现bug最好，但在实际验证中不是每次测试都能发现bug，因此需要另外一个指标评价验证是否到位。该指标通常采用覆盖率，当覆盖率超过一点阈值（例如代码覆盖率大于90%）后方可任务进行了充分验证。\n回归测试： 验证和设计是一个相互迭代的过程，因此当验证出bug后，需要设计进行修正，且需要保证修正后的DUT仍然能正常工作。这种测试的目的是捕获可能由于修改而引入的新错误，或者重新激活旧错误。回归测试可以是全面的，也就是说，它涵盖了所有的功能，或者可以是选择性的，只针对某些特定的功能或系统部分。\n测试报告： 测试报告是对整个验证过程的总结，它提供了关于测试活动的全面视图，包括测试的目标、执行的测试用例、发现的问题和缺陷、测试覆盖率和测试效率等。\n芯片验证层次 按照验证对象的大小，芯片验证通常包含UT、BT、IT、ST四个层次。\n单元测试（Unit Testing， UT）： 这是最低的验证层次，主要针对单个模块或组件进行。目标是验证每个模块或组件的功能是否正确。\n块测试（Block Testing，BT）： 很多时候，单个模块和其他模块存在紧耦合，如果进行单独UT测试，可能存在信号处理复杂，功能验证不准确等问题，这时候可以把多个有耦合关系的模块合并成一个DUT块进行测试。\n集成测试（Integration Testing）： 在单元测试的基础上，将多个模块或组件组合在一起，验证它们能否正确地协同工作，通常用于测试子系统功能是否正常。\n系统测试（System Testing）： ST通常也称为Top验证，在集成测试的基础上，将所有的模块或组件组合在一起，形成一个完整的系统，验证系统的功能是否正确，以及系统的性能是否满足要求。\n理论上，这些层次的验证通常按照从低到高的顺序进行，每个层次的验证都建立在前一个层次的验证的基础上。但实际验证活动中，需要根据企业验证人员的规模、熟练度，功能需求等进行选择，不一定所有层次的验证都需要涉及。在每个层次，都需要编写相应的测试用例，运行测试，收集和分析结果，以确保芯片设计的正确性和质量。\n芯片验证指标 芯片验证的指标，通常包含功能正确性、测试覆盖率、缺陷密度、验证效率、验证成本等多个方面。功能正确性是最基本的验证指标，即芯片是否能够正确地执行其设计的功能。这通常通过运行一系列的功能测试用例来验证，包括正常情况下的功能测试，以及异常情况下的鲁棒性测试。测试覆盖率是指测试用例覆盖了多少设计的功能点，以及覆盖的程度如何。高的测试覆盖率通常意味着更高的验证质量。测试覆盖率可以进一步细分为代码覆盖率、功能覆盖率、条件覆盖率等。缺陷密度是指在一定的设计规模或代码量中，发现的缺陷的数量。低的缺陷密度通常意味着更高的设计质量。验证效率是指在一定的时间和资源下，能够完成的验证工作量。高的验证效率通常意味着更高的验证生产力。验证成本是指进行验证所需要的总体资源，包括人力、设备、时间等。低的验证成本通常意味着更高的验证经济性。\n功能正确性是验证的绝对指标，但在实践中，很多时候无法确定测试方案是否完备，所有测试空间是否全部测试到位，因此需要一个可量化的指标来指导验证是否足够充分，是否可以结束验证。该指标通常采用“测试覆盖率”。测试覆盖率通常有代码覆盖率（行，函数，分支）、功能覆盖率。\n代码行覆盖率： 即在测试过程中，DUT的设计代码中有多少行被执行；\n函数覆盖率： 即在测试过程中，DUT的设计代码中有多少函数被执行；\n分支覆盖率： 即在测试过程中，DUT的设计代码中有多少分支被执行（if else）；\n功能覆盖率： 即在测试过程中，有多少预定义功能被触发。\n高的代码覆盖率可以提高验证的质量和可靠性，但并不能保证验证的完全正确性，因为它不能覆盖所有的输入和状态组合。因此，除了追求高的代码覆盖率，还需要结合其他测试方法和指标，如功能测试、性能测试、缺陷密度等。\n芯片验证管理 芯片验证管理是一个涵盖了芯片验证过程中所有活动的管理过程，包括之前提到的验证策略的制定、验证环境的搭建、测试用例的编写和执行、结果的收集和分析、以及问题和缺陷的跟踪和修复等。芯片验证管理的目标是确保芯片设计满足所有的功能和性能要求，以及规格和标准。\n在芯片验证管理中，首先需要制定一个详细的验证策略，包括验证的目标、范围、方法、时间表等。然后，需要搭建一个适合的验证环境，包括硬件设备、软件工具、测试数据等。接下来，需要编写一系列的测试用例，覆盖所有的功能和性能点，然后执行这些测试用例，收集和分析结果，找出问题和缺陷。最后，需要跟踪和修复这些问题和缺陷，直到所有的测试用例都能通过。\n芯片验证管理是一个复杂的过程，需要多种技能和知识，包括芯片设计、测试方法、项目管理等。它需要与芯片设计、生产、销售等其他活动紧密协作，以确保芯片的质量和性能。芯片验证管理的效果直接影响到芯片的成功和公司的竞争力。因此，芯片验证管理是芯片开发过程中的一个重要环节。\n芯片验证管理过程可以基于“项目管理平台”和“bug管理平台”进行，基于平台的管理效率通常情况下明显高于基于人工的管理模式。\n芯片验证现状 当前，芯片验证通常是在芯片设计公司内部完成的，这一过程不仅技术上复杂，而且具有巨大的成本。从验收与设计的紧密关系来看，芯片验证不可避免地涉及芯片设计的源代码。然而，芯片设计公司通常将芯片设计源代码视为商业机密，这使得必须由公司内部人员来执行芯片验证，难以将验证工作外包。\n芯片验证的重要性在于确保设计的芯片在各种条件下能够可靠运行。验证工作不仅仅是为了满足技术规格，还需要应对不断增长的复杂性和新兴技术的要求。随着半导体行业的发展，芯片验证的工作量不断增加，尤其是对于复杂的芯片而言，验证工作已经超过了设计工作，占比超过70%。这使得在工程师人员配比上，验证工程师人数通常是设计工程师人数的2倍或以上（例如zeku的三千人规模团队中，大约有一千人的设计工程师，两千人的验证工程师。其他大型芯片设计公司的验证人员占比类似或更高）。\n由于验证工作的特殊性，需要对芯片设计源代码进行访问，这在很大程度上限制了芯片验证的外包可能性。芯片设计源代码被视为公司的核心商业机密，涉及到技术细节和创新，因此在安全和法律层面上不太可能与外部方共享。这也导致了公司内部人员必须承担验证工作的重任，增加了公司内部的工作负担和成本。\n在当前情况下，芯片验证工程师的需求持续增加。他们需要具备深厚的技术背景，熟悉各种验证工具和方法，并且对新兴技术有敏锐的洞察力。由于验证工作的复杂性，验证团队通常需要庞大的规模，这与设计团队规模形成鲜明对比。\n为了应对这一挑战，行业可能需要不断探索创新的验证方法和工具，以提高验证效率，降低成本。\n小结：复杂芯片验证成本昂贵，表现在如下几个方面 验证工作量大： 对于复杂芯片，验证工作在整个芯片设计工作中，占比超过 70%。\n人力成本高： 验证工程师人数是设计工程师人数的2倍，对于复杂业务，工程师数量在千人以上。\n内部验证： 芯片设计公司为了保证商业秘密（芯片设计代码）不被泄露，只能选择招聘大量验证工程师，在公司内部进行验证工作。\n芯片验证众包 相比与硬件，软件领域为了减少软件测试成本，测试外包（分包）已经成为常态，该领域的分包业务非常成熟，市场规模已经是千亿人民币级别，并朝万亿级别规模进发。从工作内容上看，软件测试和硬件验证，有非常大的共同特征（系统的目的不同的对象），如果以软件的方式对硬件验证进行分包是否可行？\n把芯片验证工作进行外包（分包）面临诸多挑战，例如： 从业人员基数少： 相比软件领域，硬件开发者数量少了几个数量级。例如在github的统计上（https://madnight.github.io/githut/#/pull_requests/2023/2），传统软件编程语言占（Python、Java、C++，Go）比接近 50%， 而硬件描述语言，verilog占比仅 0.076%，这能从侧面反应出各自领域的开发者数量。\n验证工具商业化： 企业中使用的验证工具（仿真器、形式化、数据分析）几乎都是商业工具，这类工具对于普通人来说几乎不可见，自学难度高。\n开放学习资料少： 芯片验证涉及到访问芯片设计的源代码，而这些源代码通常被视为公司的商业机密和专有技术。芯片设计公司可能不愿意公开详细的验证过程和技术，限制了学习材料的可用性。\n可行性分析 虽然芯片验证领域一直以来相对封闭，但从技术角度而言，采用分包的方式进行验证是一种可行的选择。这主要得益于以下几个因素：\n首先，随着开源芯片项目的逐渐增多，验证过程中所涉及的源代码已经变得更加开放和透明。这些开源项目在设计和验证过程中没有商业机密的顾虑，为学习和研究提供了更多的可能性。即使某些项目涉及商业机密，也可以通过采用加密等方式来隐藏设计代码，从而在一定程度上解决了商业机密的问题，使验证更容易实现。\n其次，芯片验证领域已经涌现出大量的基础验证工具，如verilator和systemc等。这些工具为验证工程师提供了强大的支持，帮助他们更高效地进行验证工作。通过这些工具，验证过程的复杂性和难度得到了一定程度的缓解，为采用分包的验证方法提供了更为可行的技术基础。\n在开源软件领域，已经有一些成功的案例可供参考。例如，Linux内核的验证过程采用了分包的方式，不同的开发者和团队分别负责不同的模块验证，最终形成一个整体完备的系统。类似地，机器学习领域的ImageNet项目也采用了分包标注的策略，通过众包的方式完成大规模的图像标注任务。这些案例为芯片验证领域提供了成功的经验，证明了分包验证在提高效率、降低成本方面的潜力。\n因此，尽管芯片验证领域相对于其他技术领域而言仍显得封闭，但技术的进步和开源项目的增多为采用分包验证提供了新的可能性。通过借鉴其他领域的成功经验和利用现有的验证工具，我们有望在芯片验证中推动更加开放、高效的验证方法的应用，进一步促进行业的发展。这种技术的开放性和灵活性将为验证工程师提供更多的选择，推动芯片验证领域迎来更为创新和多样化的发展。\n技术路线 为了克服挑战，让更多的人参与到芯片验证，本项目从如下几个技术方向进行持续尝试\n提供多语言验证工具： 传统芯片验证是基于System Verilog编程语言进行，但是该语言用户基数少，为了让其他软件开发/测试的技术人员参与到芯片验证，本项目提供多语言验证转换工具Picker（http://xxx），它可以让验证者使用自己熟悉的编程语言（例如C++/Python/Java/Go）基于开源验证工具参与验证工作。\n提供验证学习材料： 芯片验证学习材料少，主要原因由于商业公司几乎不可能公开其内部资料，为此本项目会持续更新学习材料，让验证人员可在线，免费学习所需要的技能。\n提供真实芯片验证案例： 为了让学习材料更具使用性，本项目以“香山昆明湖（工业级高性能risc-v处理器）IP核”作为基础，从中摘取模块持续更新验证案例。\n组织芯片设计分包验证： 学以致用是每个人学习的期望目标，为此本项目定期组织芯片设计的验证分包，让所有人（无论你是大学生、验证专家、软件开发测试者、还是中学生）都可以参与到真实芯片的设计工作中去。\n本项目的目标是达到如下愿景，“打开传统验证模式的黑盒，让所有感兴趣的人可以随时随地的，用自己擅长的编程语言参与芯片验证”。\n","categories":"","description":"关于芯片验证的基本概念\n","excerpt":"关于芯片验证的基本概念\n","ref":"/mlvp/docs/basic/ic_verify/","tags":"","title":"芯片验证"},{"body":"","categories":["示例项目","教程"],"description":"XXX。","excerpt":"XXX。","ref":"/mlvp/docs/advance_case/tilelink/","tags":["examples","docs"],"title":"TileLink 协议"},{"body":" 硬件验证 Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?\nDesign Under Test Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?\nReference Model Is there any initial setup users need to do after installation to try your project?\n开始实验 Can your users test their installation, for example by running a command or deploying a Hello World example?\n","categories":["示例项目","教程"],"description":"参与开放验证平台工作所需要的基础知识。","excerpt":"参与开放验证平台工作所需要的基础知识。","ref":"/mlvp/docs/basic/","tags":["examples","docs"],"title":"基础知识"},{"body":"","categories":"","description":"关于芯片验证的基本概念\n","excerpt":"关于芯片验证的基本概念\n","ref":"/mlvp/docs/basic/ic_base/","tags":"","title":"数字电路"},{"body":"","categories":["示例项目","教程"],"description":"XXXX。","excerpt":"XXXX。","ref":"/mlvp/docs/advance_func/async/","tags":["examples","docs"],"title":"异步编程"},{"body":" 在开始前本页会 简单的介绍什么是验证，以及示例里面用到的概念，如 DUT (Design Under Test) 和 RM (Reference Model) 。\n硬件验证 Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?\nDesign Under Test Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?\nReference Model Is there any initial setup users need to do after installation to try your project?\n开始实验 Can your users test their installation, for example by running a command or deploying a Hello World example?\n","categories":["示例项目","学习材料"],"description":"开放验证平台工具链需要的编译相关知识。","excerpt":"开放验证平台工具链需要的编译相关知识。","ref":"/mlvp/docs/basic/create_dut/","tags":["examples","docs"],"title":"创建DUT"},{"body":" 硬件验证 Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?\nDesign Under Test Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?\nReference Model Is there any initial setup users need to do after installation to try your project?\n开始实验 Can your users test their installation, for example by running a command or deploying a Hello World example?\n","categories":["示例项目","教程"],"description":"开放验证平台工具链的高级特性教程。","excerpt":"开放验证平台工具链的高级特性教程。","ref":"/mlvp/docs/advance_func/","tags":["examples","docs"],"title":"高级教程"},{"body":"","categories":["示例项目","教程"],"description":"XXXX。","excerpt":"XXXX。","ref":"/mlvp/docs/advance_func/message/","tags":["examples","docs"],"title":"消息驱动"},{"body":" 在开始前本页会 简单的介绍什么是验证，以及示例里面用到的概念，如 DUT (Design Under Test) 和 RM (Reference Model) 。\n硬件验证 Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?\nDesign Under Test Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?\nReference Model Is there any initial setup users need to do after installation to try your project?\n开始实验 Can your users test their installation, for example by running a command or deploying a Hello World example?\n","categories":["示例项目","学习材料"],"description":"开放验证平台工具链需要的编译相关知识。","excerpt":"开放验证平台工具链需要的编译相关知识。","ref":"/mlvp/docs/basic/compile/","tags":["examples","docs"],"title":"DUT编译"},{"body":" 硬件验证 Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?\nDesign Under Test Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?\nReference Model Is there any initial setup users need to do after installation to try your project?\n开始实验 Can your users test their installation, for example by running a command or deploying a Hello World example?\n","categories":["示例项目","教程"],"description":"基于开放验证平台完成验证的复杂案例。","excerpt":"基于开放验证平台完成验证的复杂案例。","ref":"/mlvp/docs/advance_case/","tags":["examples","docs"],"title":"高级案例"},{"body":"","categories":["示例项目","教程"],"description":"XXXX。","excerpt":"XXXX。","ref":"/mlvp/docs/advance_func/ovip/","tags":["examples","docs"],"title":"验证IP"},{"body":" 在开始前本页会 简单的介绍什么是验证，以及示例里面用到的概念，如 DUT (Design Under Test) 和 RM (Reference Model) 。\n硬件验证 Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?\nDesign Under Test Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?\nReference Model Is there any initial setup users need to do after installation to try your project?\n开始实验 Can your users test their installation, for example by running a command or deploying a Hello World example?\n","categories":["示例项目","学习材料"],"description":"开放验证平台工具链需要的编译相关知识。","excerpt":"开放验证平台工具链需要的编译相关知识。","ref":"/mlvp/docs/basic/test_dut/","tags":["examples","docs"],"title":"DUT验证"},{"body":"","categories":["示例项目","教程"],"description":"XXXX。","excerpt":"XXXX。","ref":"/mlvp/docs/advance_func/test_framework/","tags":["examples","docs"],"title":"验证框架"},{"body":"","categories":["示例项目","教程"],"description":"XXXX。","excerpt":"XXXX。","ref":"/mlvp/docs/advance_func/vcs/","tags":["examples","docs"],"title":"VCS 支持"},{"body":" 在开始前本页会 简单的介绍什么是验证，以及示例里面用到的概念，如 DUT (Design Under Test) 和 RM (Reference Model) 。\n硬件验证 Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?\nDesign Under Test Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?\nReference Model Is there any initial setup users need to do after installation to try your project?\n开始实验 Can your users test their installation, for example by running a command or deploying a Hello World example?\n","categories":["示例项目","学习材料"],"description":"开放验证平台工具链需要的编译相关知识。","excerpt":"开放验证平台工具链需要的编译相关知识。","ref":"/mlvp/docs/basic/report/","tags":["examples","docs"],"title":"验证报告"},{"body":"","categories":["示例项目","教程"],"description":"XXXX。","excerpt":"XXXX。","ref":"/mlvp/docs/advance_func/uvm/","tags":["examples","docs"],"title":"UVM对接"},{"body":"流程介绍 基础库 在本章节中，我们将介绍如何使用Picker将RTL代码编译为C++ Class，并编译为动态库。\n首先，Picker工具会解析RTL代码，根据指定的 Top Module ，创建一个新的 Module 封装该模块的输入输出端口，并导出DPI/API以操作输入端口、读取输出端口。 工具通过指定Top Module所在的文件和 Module Name来确定需要封装的模块。此时可以将 Top 理解为软件编程中的main。\n其次，Picker工具会使用指定的 仿真器 编译RTL代码，并生成一个DPI库文件。该库文件内包含模拟运行RTL代码所需要的逻辑（即为硬件模拟器）。 对于VCS，该库文件为.so（动态库）文件，对于Verilator，该库文件为.a（静态库）文件。\nDPI的含义是 Direct Programming Interface，可以理解为一种API规范。\n接下来，Picker工具会根据配置参数，渲染源代码中定义的基类，生成用于对接仿真器并隐藏仿真器细节的基类（wrapper）。然后链接基类与DPI库文件，生成一个 UT动态库文件。 此时，该UT库文件使用了Picker工具模板中提供的统一API，相比于DPI库文件中与仿真器强相关的API，UT库文件为仿真器生成的硬件模拟器，提供了统一的API接口。 截至这一步生成UT库文件在不同语言中是通用的！如果没有另行说明，其他高级语言均会通过调用UT动态库以实现对硬件模拟器的操作。 最后，Picker工具会根据配置参数和解析的RTL代码，生成一段 C++ Class 的源码。这段源码即是 RTL 硬件模块在软件中的定义 (.hpp) 及实现 (.cpp) 。实例化该类即相当于创建了一个硬件模块。 该类继承自基类，并实现了基类中的纯虚函数，以用软件方式实例化硬件。\n不将类的实现这一步也封装进动态库的原因有两点：\n由于UT库文件需要在不同语言中通用，而不同语言实现类的方式不同。为了通用性，不将类的实现封装进动态库。 为了便于调试，提升代码可读性，方便用户进行二次封装和修改。 生成可执行文件 在本章节中，我们将介绍如何基于上一章节生成的基础库（包含动态库，类的声明及定义），编写测试用例，生成可执行文件。\n首先，用户需要编写测试用例，即实例化上一章节生成的类，并调用类中的方法，以实现对硬件模块的操作。\n详情可以参考随机数生成器验证-配置测试代码中实例化及初始化的过程。\n其次，用户需要根据基础库所应用的不同仿真器，应用不同的链接参数以生成可执行文件。对应的参数在template/cpp/cmake/*.cmake中有定义。\n最终根据配置的链接参数，编译器会链接基础库，生成可执行文件。\n以 加法器验证 为例，picker_out_adder/cpp/cmake/*.cmake即是上述表项2所述模板的拷贝。\nvcs.cmake定义了使用VCS仿真器生成的基础库的链接参数，verilator.cmake定义了使用Verilator仿真器生成的基础库的链接参数。\n使用方案 参数 --language cpp 或 -l cpp 用于指定生成C++基础库。 参数 -e 用于生成包含示例项目的可执行文件。 参数 -v 用于保留生成项目时的中间文件。 ","categories":["教程"],"description":"基于C++封装DUT硬件的运行环境，并编译为动态库。","excerpt":"基于C++封装DUT硬件的运行环境，并编译为动态库。","ref":"/mlvp/docs/quick-start/multi-lang/cpp/","tags":["docs"],"title":"C++"},{"body":"RTL源码 在本案例中，我们驱动一个 64 位的加法器，其源码如下：\n// A verilog 64-bit full adder with carry in and carry out module Adder #( parameter WIDTH = 64 ) ( input [WIDTH-1:0] a, input [WIDTH-1:0] b, input cin, output [WIDTH-1:0] sum, output cout ); assign {cout, sum} = a + b + cin; endmodule 该加法器包含一个 64 位的加法器，其输入为两个 64 位的数和一个进位信号，输出为一个 64 位的和和一个进位信号。\n测试过程 在测试过程中，我们将创建一个名为 Adder 的文件夹，其中包含一个 Adder.v 文件。该文件内容即为上述的 RTL 源码。\n将RTL构建为C++ Class 进入 Adder 文件夹，执行如下命令：\npicker Adder.v -w Adder.fst -S Adder -t picker_out_adder -l cpp -e -v --sim verilator 该命令的含义是：\n将Adder.v作为 Top 文件，并将Adder作为 Top Module，利用verilator仿真器将其编译为Cpp Class 启用波形输出，目标波形文件为Adder.fst 输出示例项目(-e) 并保留生成时产生的中间文件(-v) 最终的文件输出路径是 picker_out_adder 在使用该命令时，还有部分命令行参数没有使用，这些命令将在后续的章节中介绍。\n输出的目录结构如下，请注意这部分均为中间文件：\npicker_out_adder |-- Adder.v # 原始的RTL源码 |-- Adder_top.sv # 生成的Adder_top顶层封装，使用DPI驱动Adder模块的inputs和outputs |-- Adder_top.v # 生成的Adder_top顶层封装，因为Verdi不支持导入SV源码使用，因此需要生成一个Verilog版本 |-- CMakeLists.txt # 用于调用仿真器编译基本的cpp class并将其打包成有裸DPI函数二进制动态库(libDPIAdder.so) |-- Makefile # 生成的Makefile，用于调用CMakeLists.txt，并让用户可以通过make命令编译出libAdder.so，并手动调整Makefile的配置参数。或者编译示例项目 |-- cmake # 生成的cmake文件夹，用于调用不同仿真器编译RTL代码 | |-- vcs.cmake | `-- verilator.cmake |-- cpp # CPP example目录，包含示例代码 | |-- CMakeLists.txt # 用于将libDPIAdder.so使用基础数据类型封装为一个可直接操作的类（libUTAdder.so），而非裸DPI函数。 | |-- Makefile | |-- cmake | | |-- vcs.cmake | | `-- verilator.cmake | |-- dut.cpp # 生成的cpp UT封装，包含了对libDPIAdder.so的调用，及UTAdder类的声明及实现 | |-- dut.hpp # 头文件 | `-- example.cpp # 调用UTAdder类的示例代码 |-- dut_base.cpp # 用于调用与驱动不同仿真器编译结果的基类，通过继承封装为统一的类，用于隐藏所有仿真器相关的代码细节。 |-- dut_base.hpp |-- filelist.f # 多文件项目使用的其他文件列表，请查看 -f 参数的介绍。本案例中为空 |-- mk | |-- cpp.mk # 用于控制以cpp为目标语言时的Makefile，包含控制编译示例项目（-e，example）的逻辑 | `-- python.mk # 同上，目标语言是python `-- python |-- CMakeLists.txt |-- Makefile |-- cmake | |-- vcs.cmake | `-- verilator.cmake |-- dut.i # SWIG配置文件，用于将libDPIAdder.so的基类与函数声明，依据规则用swig导出到python，提供python调用的能力 `-- dut.py # 生成的python UT封装，包含了对libDPIAdder.so的调用，及UTAdder类的声明及实现，等价于 libUTAdder.so 编译C++ Class为动态库 在生成的 picker_out_adder 目录下，替换 cpp/example.cpp 后执行命令 make 即可编译出 libUTAdder.so 动态库及其依赖文件和测试驱动程序。\n由 Makefile 定义的自动编译过程流如下：\n通过 cmake/*.cmake 定义的仿真器调用脚本，编译 Adder_top.sv 及相关文件为 libDPIAdder.so 动态库。 通过 CMakelists.txt 定义的编译脚本，将 libDPIAdder.so 通过 dut_base.cpp 封装为 libUTAdder.so 动态库。并将1、2步产物拷贝到 UT_Adder 目录下。 如果有 -e 参数，则拷贝 cpp 目录下的所有文件到 UT_Adder 目录下，并编译 example.cpp 为 example 可执行文件。 上一步过程由 mk/cpp.mk 定义，可以通过修改 mk/cpp.mk 中的 example 目标，来修改编译过程。 在编译 example 可执行二进制文件的过程中，不同仿真器需要不同cmake文件编译参数，因为需要链接不同的仿真器的依赖库。 配置测试代码 注意只有替换 cpp/example.cpp 中的内容，才能保证 example 示例项目按预期运行。\n#include \"UT_Adder.hpp\" int64_t random_int64() { static std::random_device rd; static std::mt19937_64 generator(rd()); static std::uniform_int_distribution\u003cint64_t\u003e distribution(INT64_MIN, INT64_MAX); return distribution(generator); } int main() { #if defined(USE_VCS) UTAdder *dut = new UTAdder(\"libDPIAdder.so\"); #elif defined(USE_VERILATOR) UTAdder *dut = new UTAdder(); #endif // dut-\u003einitClock(dut-\u003eclock); dut-\u003exclk.Step(1); printf(\"Initialized UTAdder\\n\"); struct input_t { uint64_t a; uint64_t b; uint64_t cin; }; struct output_t { uint64_t sum; uint64_t cout; }; for (int c = 0; c \u003c 114514; c++) { input_t i; output_t o_dut, o_ref; i.a = random_int64(); i.b = random_int64(); i.cin = random_int64() \u0026 1; auto dut_cal = [\u0026]() { dut-\u003ea = i.a; dut-\u003eb = i.b; dut-\u003ecin = i.cin; dut-\u003exclk.Step(1); o_dut.sum = (uint64_t)dut-\u003esum; o_dut.cout = (uint64_t)dut-\u003ecout; }; auto ref_cal = [\u0026]() { uint64_t sum = i.a + i.b; bool carry = sum \u003c i.a; sum += i.cin; carry = carry || sum \u003c i.cin; o_ref.sum = sum; o_ref.cout = carry ; }; dut_cal(); ref_cal(); printf(\"[cycle %llu] a=0x%lx, b=0x%lx, cin=0x%lx\\n\", dut-\u003exclk.clk, i.a, i.b, i.cin); printf(\"DUT: sum=0x%lx, cout=0x%lx\\n\", o_dut.sum, o_dut.cout); printf(\"REF: sum=0x%lx, cout=0x%lx\\n\", o_ref.sum, o_ref.cout); Assert(o_dut.sum == o_ref.sum, \"sum mismatch\"); } delete dut; printf(\"Test Passed, destory UTAdder\\n\"); return 0; } 运行测试 成功编译并运行后，我们即可看到 example 示例项目的输出，作为Release内容的输出结果均在 picker_out_adder/UT_Adder 目录下。\n[...] [cycle 114515] a=0xa312f444394e8372, b=0x599aa4228a8b09ff, cin=0x1 DUT: sum=0xfcad9866c3d98d72, cout=0x0 REF: sum=0xfcad9866c3d98d72, cout=0x0 [...] 此时目录结构如下图\n~/picker_out_adder$ tree UT_Adder UT_Adder |-- Adder.cmake # 原 picker_out_adder/cpp/cmake/verilator.cmake |-- Adder.v # 原 picker_out_adder/Adder.v |-- Adder_top.sv |-- Adder_top.v |-- CMakeLists.txt # 原 picker_out_adder/cpp/CMakeLists.txt |-- Makefile # 原 picker_out_adder/cpp/Makefile |-- UTAdder_example # 测试程序 |-- UT_Adder.cpp # 原 picker_out_adder/cpp/dut.cpp，经过模板渲染，已经被编译到libUTAdder.so中 |-- UT_Adder.hpp # 原 picker_out_adder/cpp/dut.hpp，经过模板渲染 |-- UT_Adder_dpi.hpp # 仿真器生成的DPI函数声明，用于链接时使用 |-- dut_base.hpp # 原 picker_out_adder/dut_base.hpp，基类头文件声明，用于链接时使用 |-- example.cpp # 测试程序代码 |-- libDPIAdder.a # 仿真器生成的静态(verilator)/动态库(vcs)，用于链接时使用 `-- libUTAdder.so # 经过封装的动态库，UT_Adder.cpp的实现已经包含在其中。 可以发现核心文件包含\nlibUTAdder.so 动态库，包含了 UT_Adder.cpp 的实现 libDPIAdder.so 动态库，包含了编译为C++的RTL模块实现，及DPI函数导出。 UT_Adder.hpp, UT_Adder_dpi.hpp, dut_base.hpp 三个头文件，用于链接时使用。 辅助文件包含\nAdder.cmake，用于控制编译二进制文件时的链接参数 ","categories":["示例项目","教程"],"description":"通过一个简单的加法器验证示例辅助学习，此过程只有组合逻辑，没有时序逻辑与寄存器的概念。","excerpt":"通过一个简单的加法器验证示例辅助学习，此过程只有组合逻辑，没有时序逻辑与寄存器的概念。","ref":"/mlvp/docs/quick-start/examples/adder/","tags":["examples","docs"],"title":"加法器验证"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/blog/news/","tags":"","title":"News"},{"body":"","categories":["教程"],"description":"基于Python封装DUT硬件的运行环境，并打包为Python module。","excerpt":"基于Python封装DUT硬件的运行环境，并打包为Python module。","ref":"/mlvp/docs/quick-start/multi-lang/python/","tags":["docs"],"title":"Python"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/blog/releases/","tags":"","title":"Releases"},{"body":"RTL源码 在本案例中，我们驱动一个随机数生成器，其源码如下：\nmodule RandomGenerator ( input wire clk, input wire reset, input [15:0] seed, output [15:0] random_number ); reg [15:0] lfsr; always @(posedge clk or posedge reset) begin if (reset) begin lfsr \u003c= seed; end else begin lfsr \u003c= {lfsr[14:0], lfsr[15] ^ lfsr[14]}; end end assign random_number = lfsr; endmodule 该随机数生成器包含一个 16 位的 LFSR，其输入为一个 16 位的种子数，输出为一个 16 位的随机数。 LFSR 的更新规则为：将当前的 LFSR 的最高位与次高位异或，然后将结果放在 LFSR 的最低位，溢出的位被丢弃。\n测试过程 在测试过程中，我们将创建一个名为 RandomGenerator 的文件夹，其中包含一个 RandomGenerator.v 文件。该文件内容即为上述的 RTL 源码。\n将RTL构建为C++ Class 进入 RandomGenerator 文件夹，执行如下命令：\npicker RandomGenerator.v -w RandomGenerator.fst -S RandomGenerator -t picker_out_random_generator -l cpp -e -v --sim verilator 该命令的含义是：\n将RandomGenerator.v作为 Top 文件，并将RandomGenerator作为 Top Module，利用verilator仿真器将其编译为Cpp Class 启用波形输出，目标波形文件为RandomGenerator.fst 输出示例项目(-e) 并保留生成时产生的中间文件(-v) 最终的文件输出路径是 picker_out_random_generator 输出的目录类似加法器验证-目录结构，这里不再赘述。\n编译C++ Class为动态库 在生成的 picker_out_random_generator 目录下，替换 cpp/example.cpp 后执行命令 make 即可编译出 libUTRandomGenerator.so 动态库及其依赖文件和测试驱动程序。\n备注：其编译过程类似于 加法器验证-编译流程，这里不再赘述。\n配置测试驱动程序 注意只有替换 cpp/example.cpp 中的内容，才能保证 example 示例项目按预期运行。\n#include \"UT_RandomGenerator.hpp\" int64_t random_int64() { static std::random_device rd; static std::mt19937_64 generator(rd()); static std::uniform_int_distribution\u003cint64_t\u003e distribution(INT64_MIN, INT64_MAX); return distribution(generator); } int main() { #if defined(USE_VCS) UTRandomGenerator *dut = new UTRandomGenerator(\"libDPIAdder.so\"); #elif defined(USE_VERILATOR) UTRandomGenerator *dut = new UTRandomGenerator(); #endif unsigned short seed = random_int64() \u0026 0xffff; printf(\"seed = 0x%x\\n\", seed); dut-\u003einitClock(dut-\u003eclk); dut-\u003exclk.Step(10); dut-\u003ereset = 1; dut-\u003eseed = seed; dut-\u003exclk.Step(1); dut-\u003ereset = 0; dut-\u003exclk.Step(1); printf(\"Initialized UTRandomGenerator\\n\"); struct output_t { uint64_t cout; }; for (int c = 0; c \u003c 114514; c++) { output_t o_dut, o_ref; auto dut_cal = [\u0026]() { dut-\u003exclk.Step(1); o_dut.cout = (unsigned short)dut-\u003erandom_number; }; // as lfsr auto ref_cal = [\u0026]() { seed = (seed \u003c\u003c 1) | ((seed \u003e\u003e 15) ^ (seed \u003e\u003e 14) \u0026 1); o_ref.cout = seed; }; dut_cal(); ref_cal(); printf(\"[cycle %llu] \", dut-\u003exclk.clk); printf(\"DUT: cout=0x%x , \", o_dut.cout); printf(\"REF: cout=0x%x\\n\", o_ref.cout); Assert(o_dut.cout == o_ref.cout, \"sum mismatch\"); } delete dut; printf(\"Test Passed, destory UTRandomGenerator\\n\"); return 0; } 运行测试程序 在 picker_out_random_generator 目录下执行 ./example 即可运行测试程序。\n输出示例为：\n... [cycle 114510] DUT: cout=0x7e8d , REF: cout=0x7e8d [cycle 114511] DUT: cout=0xfd1b , REF: cout=0xfd1b [cycle 114512] DUT: cout=0xfa36 , REF: cout=0xfa36 [cycle 114513] DUT: cout=0xf46c , REF: cout=0xf46c [cycle 114514] DUT: cout=0xe8d8 , REF: cout=0xe8d8 [cycle 114515] DUT: cout=0xd1b0 , REF: cout=0xd1b0 [cycle 114516] DUT: cout=0xa360 , REF: cout=0xa360 [cycle 114517] DUT: cout=0x46c1 , REF: cout=0x46c1 [cycle 114518] DUT: cout=0x8d83 , REF: cout=0x8d83 [cycle 114519] DUT: cout=0x1b07 , REF: cout=0x1b07 [cycle 114520] DUT: cout=0x360e , REF: cout=0x360e [cycle 114521] DUT: cout=0x6c1c , REF: cout=0x6c1c [cycle 114522] DUT: cout=0xd839 , REF: cout=0xd839 [cycle 114523] DUT: cout=0xb072 , REF: cout=0xb072 [cycle 114524] DUT: cout=0x60e5 , REF: cout=0x60e5 [cycle 114525] DUT: cout=0xc1cb , REF: cout=0xc1cb [cycle 114526] DUT: cout=0x8396 , REF: cout=0x8396 Test Passed, destory UTRandomGenerator ... 此时目录结构及核心文件也和加法器验证-运行测试类似，这里不再赘述。\n","categories":["示例项目","教程"],"description":"以LFSR随机数生成器作为案例，引入时序逻辑与寄存器的概念。","excerpt":"以LFSR随机数生成器作为案例，引入时序逻辑与寄存器的概念。","ref":"/mlvp/docs/quick-start/examples/rmg/","tags":["examples","docs"],"title":"随机数生成器验证"},{"body":" This is a placeholder page that shows you how to use this template site.\nThis section is where the user documentation for your project lives - all the information your users need to understand and successfully use your project.\nFor large documentation sets we recommend adding content under the headings in this section, though if some or all of them don’t apply to your project feel free to remove them or add your own. You can see an example of a smaller Docsy documentation site in the Docsy User Guide, which lives in the Docsy theme repo if you’d like to copy its docs section.\nOther content such as marketing material, case studies, and community updates should live in the About and Community pages.\nFind out how to use the Docsy theme in the Docsy User Guide. You can learn more about how to organize your documentation (and how we organized this site) in Organizing Your Content.\n","categories":"","description":"","excerpt":" This is a placeholder page that shows you how to use this template …","ref":"/mlvp/docs/","tags":"","title":"学习资源"},{"body":" 在开始前本页会 简单的介绍什么是验证，以及示例里面用到的概念，如 DUT (Design Under Test) 和 RM (Reference Model) 。\n备注： Verilog的Top文件可以理解为主程序，Top Module可以理解为主函数。Top Module即是该设计的入口。\n","categories":["示例项目","教程"],"description":"在完整的验证环境的基础上，提供一些验证示例。通过示例帮助用户快速上手。","excerpt":"在完整的验证环境的基础上，提供一些验证示例。通过示例帮助用户快速上手。","ref":"/mlvp/docs/quick-start/examples/","tags":["examples","docs"],"title":"验证示例"},{"body":"","categories":["示例项目","教程"],"description":"依据不同语言实现的验证环境，可以在这里找到对应的示范","excerpt":"依据不同语言实现的验证环境，可以在这里找到对应的示范","ref":"/mlvp/docs/quick-start/multi-lang/","tags":["examples","docs"],"title":"多语言"},{"body":" 在开始前本页会 简单的介绍什么是验证，以及示例里面用到的概念，如 DUT (Design Under Test) 和 RM (Reference Model) 。\n硬件验证 Are there any system requirements for using your project? What languages are supported (if any)? Do users need to already have any software or tools installed?\nDesign Under Test Where can your user find your project code? How can they install it (binaries, installable package, build from source)? Are there multiple options/versions they can install and how should they choose the right one for them?\nReference Model Is there any initial setup users need to do after installation to try your project?\n开始实验 Can your users test their installation, for example by running a command or deploying a Hello World example?\n","categories":["示例项目","教程"],"description":"使用开放验证平台工具的高级功能的扩展教程，用于支持多文件、多自定义参数的复杂项目。","excerpt":"使用开放验证平台工具的高级功能的扩展教程，用于支持多文件、多自定义参数的复杂项目。","ref":"/mlvp/docs/quick-start/advance/","tags":["examples","docs"],"title":"高级用法"},{"body":"This is a typical blog post that includes images.\nThe front matter specifies the date of the blog post, its title, a short description that will be displayed on the blog landing page, and its author.\nIncluding images Here’s an image (featured-sunset-get.png) that includes a byline and a caption.\nFetch and scale an image in the upcoming Hugo 0.43. Photo: Riona MacNamara / CC-BY-CA The front matter of this post specifies properties to be assigned to all image resources:\nresources: - src: \"**.{png,jpg}\" title: \"Image #:counter\" params: byline: \"Photo: Riona MacNamara / CC-BY-CA\" To include the image in a page, specify its details like this:\nFetch and scale an image in the upcoming Hugo 0.43. Photo: Riona MacNamara / CC-BY-CA The image will be rendered at the size and byline specified in the front matter.\n","categories":"","description":"The Docsy Hugo theme lets project maintainers and contributors focus on content, not on reinventing a website infrastructure from scratch\n","excerpt":"The Docsy Hugo theme lets project maintainers and contributors focus …","ref":"/mlvp/blog/2018/10/06/easy-documentation-with-docsy/","tags":"","title":"Easy documentation with Docsy"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header This is a normal paragraph following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nBacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nLorem markdownum tuta hospes stabat; idem saxum facit quaterque repetito occumbere, oves novem gestit haerebat frena; qui. Respicit recurvam erat: pignora hinc reppulit nos aut, aptos, ipsa.\nMeae optatos passa est Epiros utiliter Talibus niveis, hoc lata, edidit. Dixi ad aestum.\nHeader 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Header 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nSalt-n-Pepa Bel Biv DeVoe Kid ‘N Play And an ordered list:\nMichael Jackson Michael Bolton Michael Bublé And an unordered task list:\nCreate a sample markdown document Add task lists to it Take a vacation And a “mixed” task list:\nSteal underpants ? Profit! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition terms are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nComponents Alerts This is an alert. Note: This is an alert with a title. This is a successful alert. This is a warning! Warning! This is a warning with a title! Sizing Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nParameters available Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing pixels Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing rem Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMemory Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nRAM to use Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMore is better Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsed RAM Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"A short lead description about this content page. Text here can also be **bold** or _italic_ and can even be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. Text here can also …","ref":"/mlvp/blog/2018/10/06/second-blog-post/","tags":"","title":"Second blog post"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\nThere should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header This is a normal paragraph following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nBacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nLorem markdownum tuta hospes stabat; idem saxum facit quaterque repetito occumbere, oves novem gestit haerebat frena; qui. Respicit recurvam erat: pignora hinc reppulit nos aut, aptos, ipsa.\nMeae optatos passa est Epiros utiliter Talibus niveis, hoc lata, edidit. Dixi ad aestum.\nHeader 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Header 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nSalt-n-Pepa Bel Biv DeVoe Kid ‘N Play And an ordered list:\nMichael Jackson Michael Bolton Michael Bublé And an unordered task list:\nCreate a sample markdown document Add task lists to it Take a vacation And a “mixed” task list:\nSteal underpants ? Profit! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition terms are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nComponents Alerts This is an alert. Note: This is an alert with a title. This is a successful alert. This is a warning! Warning! This is a warning with a title! Sizing Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nParameters available Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing pixels Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsing rem Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMemory Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nRAM to use Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nMore is better Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nUsed RAM Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"A short lead description about this content page. Text here can also be **bold** or _italic_ and can even be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. Text here can also …","ref":"/mlvp/blog/2018/01/04/another-great-release/","tags":"","title":"Another Great Release"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/tags/docs/","tags":"","title":"docs"},{"body":" This is a placeholder page. Replace it with your own content.\nText can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Vape migas chillwave sriracha poutine try-hard distillery. Tattooed shabby chic small batch, pabst art party heirloom letterpress air plant pop-up. Sustainable chia skateboard art party banjo cardigan normcore affogato vexillologist quinoa meggings man bun master cleanse shoreditch readymade. Yuccie prism four dollar toast tbh cardigan iPhone, tumblr listicle live-edge VHS. Pug lyft normcore hot chicken biodiesel, actually keffiyeh thundercats photo booth pour-over twee fam food truck microdosing banh mi. Vice activated charcoal raclette unicorn live-edge post-ironic. Heirloom vexillologist coloring book, beard deep v letterpress echo park humblebrag tilde.\n90’s four loko seitan photo booth gochujang freegan tumeric listicle fam ugh humblebrag. Bespoke leggings gastropub, biodiesel brunch pug fashion axe meh swag art party neutra deep v chia. Enamel pin fanny pack knausgaard tofu, artisan cronut hammock meditation occupy master cleanse chartreuse lumbersexual. Kombucha kogi viral truffaut synth distillery single-origin coffee ugh slow-carb marfa selfies. Pitchfork schlitz semiotics fanny pack, ugh artisan vegan vaporware hexagon. Polaroid fixie post-ironic venmo wolf ramps kale chips.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Knausgaard kale chips snackwave microdosing cronut copper mug swag synth bitters letterpress glossier craft beer. Mumblecore bushwick authentic gochujang vegan chambray meditation jean shorts irony. Viral farm-to-table kale chips, pork belly palo santo distillery activated charcoal aesthetic jianbing air plant woke lomo VHS organic. Tattooed locavore succulents heirloom, small batch sriracha echo park DIY af. Shaman you probably haven’t heard of them copper mug, crucifix green juice vape single-origin coffee brunch actually. Mustache etsy vexillologist raclette authentic fam. Tousled beard humblebrag asymmetrical. I love turkey, I love my job, I love my friends, I love Chardonnay!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nScenester tumeric pickled, authentic crucifix post-ironic fam freegan VHS pork belly 8-bit yuccie PBR\u0026B. I love this life we live in.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Next level leggings before they sold out, PBR\u0026B church-key shaman echo park. Kale chips occupy godard whatever pop-up freegan pork belly selfies. Gastropub Belinda subway tile woke post-ironic seitan. Shabby chic man bun semiotics vape, chia messenger bag plaid cardigan.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\"; bar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Tilde photo booth wayfarers cliche lomo intelligentsia man braid kombucha vaporware farm-to-table mixtape portland. PBR\u0026B pickled cornhole ugh try-hard ethical subway tile. Fixie paleo intelligentsia pabst. Ennui waistcoat vinyl gochujang. Poutine salvia authentic affogato, chambray lumbersexual shabby chic.\nContact Info Plaid hell of cred microdosing, succulents tilde pour-over. Offal shabby chic 3 wolf moon blue bottle raw denim normcore poutine pork belly.\nExternal Links Stumptown PBR\u0026B keytar plaid street art, forage XOXO pitchfork selvage affogato green juice listicle pickled everyday carry hashtag. Organic sustainable letterpress sartorial scenester intelligentsia swag bushwick. Put a bird on it stumptown neutra locavore. IPhone typewriter messenger bag narwhal. Ennui cold-pressed seitan flannel keytar, single-origin coffee adaptogen occupy yuccie williamsburg chillwave shoreditch forage waistcoat.\nThis is the final element on the page and there should be no margin below this. ","categories":["Examples"],"description":"A short lead description about this content page. It can be **bold** or _italic_ and can be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. It can be **bold** …","ref":"/mlvp/docs/quick-start/example-page/","tags":["test","sample","docs"],"title":"Example Page"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/categories/examples/","tags":"","title":"Examples"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/tags/sample/","tags":"","title":"sample"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/tags/test/","tags":"","title":"test"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/docs/quick-start/examples/basicapi/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/en/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/tags/examples/","tags":"","title":"examples"},{"body":" 欢迎学习开放验证平台 快速开始 降低学习成本，不需要局限于 system verilog — 用你喜欢的高级语言参与硬件验证！\nGoldydocs provides a single web UI providing visibility into porridge temperature, chair size, and bed softness metrics! You can even find out who’s been eating your porridge.\n(Sadly, Goldydocs isn’t a real project, but you can use this site as an example to create your own real websites with Docsy)\nNew chair metrics! The Goldydocs UI now shows chair size metrics by default.\nPlease follow this space for updates!\nContributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\n更多 …\nFollow us on Twitter! For announcement of latest features etc.\n更多 …\nThis is the second section\nDownload from AppStore Get the Goldydocs app!\nContributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\n更多 …\nFollow us on Twitter! For announcement of latest features etc.\n更多 …\nThis is the another section\n","categories":"","description":"","excerpt":" 欢迎学习开放验证平台 快速开始 降低学习成本，不需要局限于 system verilog — 用你喜欢的高级语言参与硬件验证！ …","ref":"/mlvp/","tags":"","title":"Goldydocs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/en/","tags":"","title":"OpenVerify Courses"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/en/tags/","tags":"","title":"Tags"},{"body":" About Goldydocs A sample site using the Docsy Hugo theme.\nGoldydocs is a sample site using the Docsy Hugo theme that shows what it can do and provides you with a template site structure. It’s designed for you to clone and edit as much as you like. See the different sections of the documentation and site for more ideas.\nThis is another section This is another section ","categories":"","description":"","excerpt":" About Goldydocs A sample site using the Docsy Hugo theme.\nGoldydocs …","ref":"/mlvp/about/","tags":"","title":"关于"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/categories/%E6%95%99%E7%A8%8B/","tags":"","title":"教程"},{"body":" ","categories":"","description":"","excerpt":" ","ref":"/mlvp/community/","tags":"","title":"社区"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/categories/%E7%A4%BA%E4%BE%8B%E9%A1%B9%E7%9B%AE/","tags":"","title":"示例项目"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/search/","tags":"","title":"搜索结果"},{"body":"This is the blog section. It has two categories: News and Releases.\nFiles in these directories will be listed in reverse chronological order.\n","categories":"","description":"","excerpt":"This is the blog section. It has two categories: News and Releases. …","ref":"/mlvp/blog/","tags":"","title":"通知"},{"body":"","categories":"","description":"","excerpt":"","ref":"/mlvp/categories/%E5%AD%A6%E4%B9%A0%E6%9D%90%E6%96%99/","tags":"","title":"学习材料"}]