<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Verification Basics on UnityChip Verification</title>
    <link>https://open-verify.cc/mlvp/en/docs/basic/</link>
    <description>Recent content in Verification Basics on UnityChip Verification</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://open-verify.cc/mlvp/en/docs/basic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chip Verification</title>
      <link>https://open-verify.cc/mlvp/en/docs/basic/ic_verify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/en/docs/basic/ic_verify/</guid>
      <description>&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;&#xA;&lt;p&gt;This page provides a brief introduction to chip verification, including concepts used in examples such as DUT (Design Under Test) and RM (Reference Model).&lt;/p&gt;&#xA;&lt;p&gt;The chip verification process needs to align with the actual situation of the company or team. There is no absolute standard that meets all requirements and must be referenced.&lt;/p&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;what-is-chip-verification&#34;&gt;What is Chip Verification?&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;The chip design-to-production process involves three main stages: chip design, chip manufacturing, and chip packaging/testing. Chip design is further divided into front-end and back-end design. Front-end design, also known as logic design, aims to achieve the desired circuit logic functionality. Back-end design, or physical design, focuses on optimizing layout and routing to reduce chip area, lower power consumption, and increase frequency. Chip verification is a critical step in the chip design process. Its goal is to ensure that the designed chip meets the specified requirements in terms of functionality, performance, and power consumption. The verification process typically includes functional verification, timing verification, and power verification, using methods and tools such as simulation, formal verification, hardware acceleration, and prototyping. &lt;strong&gt;For this tutorial, chip verification refers only to the verification of the front-end design to ensure that the circuit logic meets the specified requirements (&amp;ldquo;Does this proposed design do what is intended?&amp;rdquo;), commonly known as functional verification. This does not include back-end design aspects like power and frequency.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Digital Circuits</title>
      <link>https://open-verify.cc/mlvp/en/docs/basic/ic_base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/en/docs/basic/ic_base/</guid>
      <description>&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;&#xA;&lt;p&gt;This page introduces the basics of digital circuits. Digital circuits use digital signals and are the foundation of most modern computers.&lt;/p&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;what-are-digital-circuits&#34;&gt;What Are Digital Circuits&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Digital circuits are electronic circuits that use two discrete voltage levels to represent information. Typically, digital circuits use two power supply voltages to indicate high (H) and low (L) levels, representing the digits 1 and 0 respectively. This representation uses binary signals to transmit and process information.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creating DUT</title>
      <link>https://open-verify.cc/mlvp/en/docs/basic/create_dut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/en/docs/basic/create_dut/</guid>
      <description>&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;&#xA;&lt;p&gt;Using Guoke Cache as an example, this document introduces how to create a DUT based on Chisel.&lt;/p&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;In this document, a DUT (Design Under Test) refers to the circuit or system being verified during the chip verification process. The DUT is the primary subject of verification. When creating a DUT based on the picker tool, it is essential to consider the functionality, performance requirements, and verification goals of the subject under test. These goals may include the need for faster execution speed or more detailed test information. Generally, the DUT, written in RTL, is combined with its surrounding environment to form the verification environment (test_env), where test cases are written. In this project, the DUT is the Python module that needs to be tested and converted through RTL. Traditional RTL languages include Verilog, System Verilog, VHDL, etc. However, as an emerging RTL design language, （&lt;a href=&#34;https://www.chisel-lang.org/&#34;&gt;https://www.chisel-lang.org/&lt;/a&gt;） is playing an increasingly important role in RTL design due to its object-oriented features and ease of use. This chapter introduces how to create a DUT using the conversion of the cache source code from the &lt;a href=&#34;https://github.com/OSCPU/NutShell&#34;&gt;Guoke Processor-NutShell&lt;/a&gt; to a Python module as an example.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DUT Verification</title>
      <link>https://open-verify.cc/mlvp/en/docs/basic/test_dut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/en/docs/basic/test_dut/</guid>
      <description>&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;&#xA;&lt;p&gt;This section introduces the general process of verifying a DUT based on Picker.&lt;/p&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;The goal of the open verification platform is functional verification, which generally involves the following steps:&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-determine-the-verification-object-and-goals&#34;&gt;1. Determine the verification object and goals&lt;/h3&gt;&#xA;&lt;p&gt;Typically, the design documentation of the DUT is also delivered to the verification engineer. At this point, you need to read the documentation or source code to understand the basic functions, main structure, and expected functionalities of the verification object.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Verification Report</title>
      <link>https://open-verify.cc/mlvp/en/docs/basic/report/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/en/docs/basic/report/</guid>
      <description>&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;&#xA;&lt;p&gt;After we complete the DUT verification, writing a verification report is a crucial step. This section will provide an overview of the structure of the verification report and the content that needs to be covered.&lt;/p&gt;&#xA;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;The verification report is a review of the entire verification process and an important supporting document for determining the reasonableness of the verification. Generally, the verification report should include the following content:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Basic document information (author, log, version, etc.)&lt;/li&gt;&#xA;&lt;li&gt;Verification object (verification target)&lt;/li&gt;&#xA;&lt;li&gt;Introduction to functional points&lt;/li&gt;&#xA;&lt;li&gt;Verification plan&lt;/li&gt;&#xA;&lt;li&gt;Breakdown of test points&lt;/li&gt;&#xA;&lt;li&gt;Test cases&lt;/li&gt;&#xA;&lt;li&gt;Test environment&lt;/li&gt;&#xA;&lt;li&gt;Result analysis&lt;/li&gt;&#xA;&lt;li&gt;Defect analysis&lt;/li&gt;&#xA;&lt;li&gt;Verification conclusion&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;The following content provides further explanation of the list, with specific examples available in&lt;a href=&#34;nutshell_cache_report_demo.pdf&#34;&gt;nutshell_cache_report_demo.pdf&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
