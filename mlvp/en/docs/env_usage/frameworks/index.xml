<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Integrated Testing Framework on UnityChip Verification</title>
    <link>https://xs-mlvp.github.io/mlvp/en/docs/env_usage/frameworks/</link>
    <description>Recent content in Integrated Testing Framework on UnityChip Verification</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://xs-mlvp.github.io/mlvp/en/docs/env_usage/frameworks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PyTest</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/env_usage/frameworks/pytest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/env_usage/frameworks/pytest/</guid>
      <description>Software Testing Before we start with pytest, let&amp;rsquo;s understand software testing. Software testing generally involves the following four aspects:&#xA;Unit Testing: Also known as module testing, it involves checking the correctness of program modules, which are the smallest units in software design. Integration Testing: Also known as assembly testing, it usually builds on unit testing by sequentially and incrementally testing all program modules, focusing on the interface parts of different modules.</description>
    </item>
    <item>
      <title>Hypothesis</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/env_usage/frameworks/hypothesis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/env_usage/frameworks/hypothesis/</guid>
      <description>Hypothesis In the previous section, we manually wrote test cases and specified inputs and expected outputs for each case. This method has some issues, such as incomplete test case coverage and the tendency to overlook boundary conditions. Hypothesis is a Python library for property-based testing. Its main goal is to make testing simpler, faster, and more reliable. It uses a method called property-based testing, where you can write some hypotheses for your code, and Hypothesis will automatically generate test cases to verify these hypotheses.</description>
    </item>
  </channel>
</rss>
