<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Multi-language Support on UnityChip Verification</title>
    <link>https://open-verify.cc/mlvp/en/docs/multi-lang/</link>
    <description>Recent content in Multi-language Support on UnityChip Verification</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://open-verify.cc/mlvp/en/docs/multi-lang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using C&#43;&#43;</title>
      <link>https://open-verify.cc/mlvp/en/docs/multi-lang/cpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/en/docs/multi-lang/cpp/</guid>
      <description>Principle Introduction Basic Library In this chapter, we will introduce how to use Picker to compile RTL code into a C++ class and compile it into a dynamic library.&#xA;First, the Picker tool parses the RTL code, creates a new module based on the specified Top Module, encapsulates the module&amp;rsquo;s input and output ports, and exports DPI/API to operate the input ports and read the output ports.&#xA;The tool determines the module to be encapsulated by specifying the file and Module Name of the Top Module.</description>
    </item>
    <item>
      <title>Using Java ...</title>
      <link>https://open-verify.cc/mlvp/en/docs/multi-lang/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/en/docs/multi-lang/java/</guid>
      <description>Currently, Picker supports C++/Python. Other languages such as Java, Golang, Javascript, Scala, etc., will be supported after the Python interface is stabilized.</description>
    </item>
  </channel>
</rss>
