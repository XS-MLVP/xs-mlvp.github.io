<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Setting Up a Verification Environment on UnityChip Verification</title>
    <link>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/env/</link>
    <description>Recent content in Setting Up a Verification Environment on UnityChip Verification</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://xs-mlvp.github.io/mlvp/en/docs/mlvp/env/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Use an Asynchronous Environment</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/env/start_test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/env/start_test/</guid>
      <description>Starting the Event Loop In the previously described verification environment, we designed a standardized setup. However, if we attempt to write it as a simple single-threaded program, we may encounter complex implementation issues.&#xA;For instance, consider having two driver methods that drive two different interfaces. Inside each driver method, we need to wait for several clock cycles of the DUT (Device Under Test), and both methods must run simultaneously. In a basic single-threaded program, running both driver methods concurrently can be quite challenging.</description>
    </item>
    <item>
      <title>How to Use Bundle</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/env/bundle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/env/bundle/</guid>
      <description>Bundle serves as an intermediary layer in the mlvp verification environment, facilitating interaction between the Agent and the DUT while ensuring their decoupling. Additionally, Bundle helps define the hierarchy of DUT interface layers, making access to the DUT interface clearer and more convenient.&#xA;A Simple Definition of a Bundle To define a Bundle, you need to create a new class that inherits from the Bundle class in mlvp. Hereâ€™s a simple example of defining a Bundle:</description>
    </item>
    <item>
      <title>How to Write an Agent</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/env/agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/env/agent/</guid>
      <description>An Agent in the mlvp verification environment provides a high-level encapsulation of signals within a class of Bundles, allowing the upper-level driver code to drive and monitor the signals in the Bundle without worrying about specific signal assignments.An Agent consists of driver methods and monitor methods , where the driver methods actively drive the signals in the Bundle, and the monitor methods passively observe the signals in the Bundle.&#xA;Initializing the Agent To define an Agent, you need to create a new class that inherits from the Agent class in mlvp.</description>
    </item>
    <item>
      <title>How to Build an Env</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/env/build_env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/env/build_env/</guid>
      <description>Env is used in the mlvp verification environment to package the entire verification setup. It directly instantiates all the agents needed in the verification environment and is responsible for passing the required bundles to these agents. Once the Env is created, the specification for writing reference models is also determined. Reference models written according to this specification can be directly attached to the Env, allowing it to handle automatic synchronization of the reference models.</description>
    </item>
    <item>
      <title>How to Write a Reference Model</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/env/ref_model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/env/ref_model/</guid>
      <description>A reference model is used to simulate the behavior of the design under verification, aiding in the validation process. In the mlvp verification environment, the reference model needs to follow the Env interface specifications so it can be attached to Env, allowing automatic synchronization by Env.&#xA;Two Ways to Implement a Reference Model mlvp provides two methods for implementing a reference model, both of which can be attached to Env for automatic synchronization.</description>
    </item>
  </channel>
</rss>
