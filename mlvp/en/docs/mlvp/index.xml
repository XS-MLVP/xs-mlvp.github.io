<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Verification Framework on UnityChip Verification</title>
    <link>https://open-verify.cc/mlvp/en/docs/mlvp/</link>
    <description>Recent content in Verification Framework on UnityChip Verification</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://open-verify.cc/mlvp/en/docs/mlvp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Quick Start</title>
      <link>https://open-verify.cc/mlvp/en/docs/mlvp/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/en/docs/mlvp/quick-start/</guid>
      <description>Installation toffee Toffee is a Python-based hardware verification framework designed to help users build hardware verification environments more conveniently and systematically using Python. It leverages the multi-language conversion tool picker, which converts Verilog code of hardware designs into Python Packages, enabling users to drive and verify hardware designs in Python.&#xA;Toffee requires the following dependencies:&#xA;Python 3.6.8+&#xA;Picker 0.9.0+&#xA;Once these dependencies are installed, you can install Toffee via pip:</description>
    </item>
    <item>
      <title>Writing a Standardized Verification Environment</title>
      <link>https://open-verify.cc/mlvp/en/docs/mlvp/canonical_env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/en/docs/mlvp/canonical_env/</guid>
      <description>Overview The main task of writing verification code can be broadly divided into two parts: building the verification environment and writing test cases .Building the verification environment aims to encapsulate the Design Under Test (DUT) so that the verification engineer does not have to deal with complex interface signals when driving the DUT, but can instead directly use the high-level interfaces provided by the verification environment. If a reference model needs to be written, it should also be part of the verification environment.</description>
    </item>
    <item>
      <title>Starting a New Verification Task</title>
      <link>https://open-verify.cc/mlvp/en/docs/mlvp/verification/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/en/docs/mlvp/verification/</guid>
      <description>With mlvp, you can now set up a complete verification environment and conveniently write test cases. However, in real-world scenarios, it can be challenging to understand how to get started and ultimately complete a verification task. After writing code, common issues may include difficulties in correctly partitioning the Bundle, misunderstanding the high-level semantic encapsulation of the Agent, and not knowing what to do after setting up the environment.&#xA;In this section, we will introduce how to complete a new verification task from scratch and how to use mlvp effectively to accomplish it.</description>
    </item>
  </channel>
</rss>
