<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writing Test Cases on UnityChip Verification</title>
    <link>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/cases/</link>
    <description>Recent content in Writing Test Cases on UnityChip Verification</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://xs-mlvp.github.io/mlvp/en/docs/mlvp/cases/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Drive Using Test Environment Interfaces</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/cases/executor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/cases/executor/</guid>
      <description>How to Simultaneously Call Multiple Driver Functions Once the verification environment is set up, you can write test cases using the interfaces provided by the verification environment. However, it is often difficult to call two driver functions simultaneously using conventional serial code. This becomes especially important when multiple interfaces need to be driven at the same time, and mlvp provides a simple way to handle such scenarios.&#xA;Simultaneously Calling Multiple Driver Functions of Different Categories For example, suppose the current Env structure is as follows:</description>
    </item>
    <item>
      <title>How to Use Pytest to Manage Test Cases</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/cases/pytest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/cases/pytest/</guid>
      <description>Writing Test Cases In mlvp, test cases are managed using pytest. pytest is a powerful Python testing framework. If you are not familiar with pytest, you can refer to the official pytest documentation .&#xA;Writing Your First Test Case First, we need to create a test case file, for example, test_adder.py. The file should start with test_ or end with _test.py so that pytest can recognize it. Then we can write our first test case in it.</description>
    </item>
    <item>
      <title>How to Write Test Points</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/cases/cov/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/mlvp/cases/cov/</guid>
      <description>Test Points in Verification In mlvp, a test point (Cover Point) refers to the smallest unit of verification for a specific function of the design, while a test group (Cover Group) is a collection of related test points. To define a test point, you need to specify the name of the test point and its trigger condition. For example, you can define a test point such as, &amp;ldquo;When the result of the adder operation is non-zero, the result is correct.</description>
    </item>
  </channel>
</rss>
