<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on UnityChip Verification</title>
    <link>https://open-verify.cc/mlvp/en/categories/tutorial/</link>
    <description>Recent content in Tutorial on UnityChip Verification</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://open-verify.cc/mlvp/en/categories/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tool Introduction</title>
      <link>https://open-verify.cc/mlvp/en/docs/env_usage/picker_usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/mlvp/en/docs/env_usage/picker_usage/</guid>
      <description>&lt;p&gt;To meet the requirements of an open verification environment, we have developed the Picker tool, which is used to convert RTL designs into multi-language interfaces for verification. We will use the environment generated by the Picker tool as the basic verification environment. Next, we will introduce the Picker tool and its basic usage.&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction-to-picker&#34;&gt;Introduction to Picker&lt;/h2&gt;&#xA;&lt;p&gt;Picker is an auxiliary tool for chip verification with two main functions:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Packaging RTL Design Verification Modules:&lt;/strong&gt;  Picker can package RTL design verification modules (.v/.scala/.sv) into dynamic libraries and provide programming interfaces in various high-level languages (currently supporting C++, Python, Java, Scala, Golang) to drive the circuit.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
