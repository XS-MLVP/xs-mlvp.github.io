<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Example Projects on UnityChip Verification</title>
    <link>https://xs-mlvp.github.io/mlvp/en/categories/example-projects/</link>
    <description>Recent content in Example Projects on UnityChip Verification</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 08 Jan 2025 14:45:41 +0800</lastBuildDate>
    <atom:link href="https://xs-mlvp.github.io/mlvp/en/categories/example-projects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Complete Verification of Nutshell Cache</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/advance_case/nutshellcache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/advance_case/nutshellcache/</guid>
      <description>Verification Report Chinese version:&#xA;https://github.com/XS-MLVP/Example-NutShellCache/blob/master/nutshell_cache_report_demo.pdf&#xA;English verision:&#xA;TBD&#xA;Verification Environment &amp;amp; Test Case Code https://github.com/XS-MLVP/Example-NutShellCache</description>
    </item>
    <item>
      <title>TileLink Protocol</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/advance_case/tilelink/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/advance_case/tilelink/</guid>
      <description></description>
    </item>
    <item>
      <title>Case 1: Adder</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/quick-start/eg-adder/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/quick-start/eg-adder/</guid>
      <description>RTL Source Code In this case, we drive a 64-bit adder (combinational circuit) with the following source code:&#xA;// A verilog 64-bit full adder with carry in and carry out module Adder #( parameter WIDTH = 64 ) ( input [WIDTH-1:0] a, input [WIDTH-1:0] b, input cin, output [WIDTH-1:0] sum, output cout ); assign {cout, sum} = a + b + cin; endmodule This adder contains a 64-bit adder with inputs of two 64-bit numbers and a carry-in signal, outputting a 64-bit sum and a carry-out signal.</description>
    </item>
    <item>
      <title>Advanced Case Studies</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/advance_case/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/advance_case/</guid>
      <description></description>
    </item>
    <item>
      <title>Case 2: Random Number Generator</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/quick-start/eg-rmg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/quick-start/eg-rmg/</guid>
      <description>RTL Source Code In this example, we drive a random number generator, with the source code as follows:&#xA;module RandomGenerator ( input wire clk, input wire reset, input [15:0] seed, output [15:0] random_number ); reg [15:0] lfsr; always @(posedge clk or posedge reset) begin if (reset) begin lfsr &amp;lt;= seed; end else begin lfsr &amp;lt;= {lfsr[14:0], lfsr[15] ^ lfsr[14]}; end end assign random_number = lfsr; endmodule This random number generator contains a 16-bit LFSR, with a 16-bit seed as input and a 16-bit random number as output.</description>
    </item>
    <item>
      <title>Case 3: Dual-Port Stack (Callback)</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/quick-start/eg-stack-callback/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/quick-start/eg-stack-callback/</guid>
      <description>Introduction to the Dual-Port Stack A dual-port stack is a data structure that supports simultaneous operations on two ports. Compared to a traditional single-port stack, a dual-port stack allows simultaneous read and write operations. In scenarios such as multithreaded concurrent read and write operations, the dual-port stack can provide better performance. In this example, we provide a simple dual-port stack implementation, with the source code as follows:&#xA;module dual_port_stack ( input clk, input rst, // Interface 0 input in0_valid, output in0_ready, input [7:0] in0_data, input [1:0] in0_cmd, output out0_valid, input out0_ready, output [7:0] out0_data, output [1:0] out0_cmd, // Interface 1 input in1_valid, output in1_ready, input [7:0] in1_data, input [1:0] in1_cmd, output out1_valid, input out1_ready, output [7:0] out1_data, output [1:0] out1_cmd ); // Command definitions localparam CMD_PUSH = 2&amp;#39;b00; localparam CMD_POP = 2&amp;#39;b01; localparam CMD_PUSH_OKAY = 2&amp;#39;b10; localparam CMD_POP_OKAY = 2&amp;#39;b11; // Stack memory and pointer reg [7:0] stack_mem[0:255]; reg [7:0] sp; reg busy; reg [7:0] out0_data_reg, out1_data_reg; reg [1:0] out0_cmd_reg, out1_cmd_reg; reg out0_valid_reg, out1_valid_reg; assign out0_data = out0_data_reg; assign out0_cmd = out0_cmd_reg; assign out0_valid = out0_valid_reg; assign out1_data = out1_data_reg; assign out1_cmd = out1_cmd_reg; assign out1_valid = out1_valid_reg; always @(posedge clk or posedge rst) begin if (rst) begin sp &amp;lt;= 0; busy &amp;lt;= 0; end else begin // Interface 0 Request Handling if (!</description>
    </item>
    <item>
      <title>DUT Verification</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/basic/test_dut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/basic/test_dut/</guid>
      <description>This section introduces the general process of verifying a DUT based on Picker.&#xA;The goal of the open verification platform is functional verification, which generally involves the following steps:&#xA;1. Determine the verification object and goals Typically, the design documentation of the DUT is also delivered to the verification engineer. At this point, you need to read the documentation or source code to understand the basic functions, main structure, and expected functionalities of the verification object.</description>
    </item>
    <item>
      <title>Case 4: Dual-Port Stack (Coroutines)</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/quick-start/eg-stack-async/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/quick-start/eg-stack-async/</guid>
      <description>Introduction to the Dual-Port Stack and Environment Setup The dual-port stack used in this case is identical to the one implemented in Case 3. Please refer to the Introduction to the Dual-Port Stack and Driver Environment Setup in Case 3 for more details.&#xA;Driving the DUT Using Coroutines In Case 3, we used callbacks to drive the DUT. While callbacks offer a way to perform parallel operations, they break the execution flow into multiple function calls and require maintaining a large amount of intermediate state, making the code more complex to write and debug.</description>
    </item>
    <item>
      <title>Verification Report</title>
      <link>https://xs-mlvp.github.io/mlvp/en/docs/basic/report/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xs-mlvp.github.io/mlvp/en/docs/basic/report/</guid>
      <description>After we complete the DUT verification, writing a verification report is a crucial step. This section will provide an overview of the structure of the verification report and the content that needs to be covered.&#xA;The verification report is a review of the entire verification process and an important supporting document for determining the reasonableness of the verification. Generally, the verification report should include the following content:&#xA;Basic document information (author, log, version, etc.</description>
    </item>
  </channel>
</rss>
