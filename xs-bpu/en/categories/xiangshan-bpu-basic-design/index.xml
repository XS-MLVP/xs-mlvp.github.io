<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xiangshan BPU Basic Design on OpenVerify Courses</title>
    <link>https://open-verify.cc/xs-bpu/en/categories/xiangshan-bpu-basic-design/</link>
    <description>Recent content in Xiangshan BPU Basic Design on OpenVerify Courses</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://open-verify.cc/xs-bpu/en/categories/xiangshan-bpu-basic-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic of the Xiangshan Branch Prediction Unit (BPU)</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/basic/01_xsbpu_basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/basic/01_xsbpu_basic/</guid>
      <description>&lt;h2 id=&#34;branch-prediction-block-concept&#34;&gt;Branch Prediction Block Concept&lt;/h2&gt;&#xA;&lt;p&gt;For a general branch predictor, it usually predicts the relevant information of an instruction corresponding to a given PC, such as whether it is a conditional branch instruction or a jump instruction. For conditional branch instructions, it predicts whether it will jump, while for jump instructions, it predicts the jump target. However, predicting instructions one by one is inefficient, leading to slow instruction supply in the frontend.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to the Xiangshan Branch Prediction Unit Structure</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/basic/02_xsbpu_structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/basic/02_xsbpu_structure/</guid>
      <description>&lt;h2 id=&#34;how-does-the-bpu-integrate-internal-sub-predictors&#34;&gt;How Does the BPU Integrate Internal Sub-predictors?&lt;/h2&gt;&#xA;&lt;p&gt;We already know that the Xiangshan BPU adopts multiple predictors and multiple pipeline schemes. To adapt to multiple pipelines, the BPU uses a three-channel result output interface. But how does it adapt to multiple predictors? This requires us to further explore the internal structure of the BPU.&lt;/p&gt;&#xA;&#xA;&lt;figure&gt;&#xA;    &lt;img src=&#34;1.png&#34; width=&#34;600px&#34;/&gt; &#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;The above figure is the BPU architecture diagram from the Xiangshan documentation. Currently, we only need to focus on one piece of information: all internal sub-predictors are encapsulated in a structure called &lt;code&gt;Composer&lt;/code&gt;. The BPU only needs to interact with &lt;code&gt;Composer&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to the Timing of Xiangshan Branch Prediction Unit</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/basic/03_xsbpu_timing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/basic/03_xsbpu_timing/</guid>
      <description>&lt;h2 id=&#34;single-cycle-prediction-without-bubble&#34;&gt;Single-Cycle Prediction without Bubble&lt;/h2&gt;&#xA;&#xA;&lt;figure&gt;&#xA;    &lt;img src=&#34;1.png&#34; width=&#34;500px&#34;/&gt; &#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;uFTB&lt;/code&gt; is the only predictor in Xiangshan BPU that can generate prediction results in a single cycle. The figure below shows the prediction process of &lt;code&gt;uFTB&lt;/code&gt;. The &lt;code&gt;s0_pc&lt;/code&gt; is sent from the top level of BPU, and when the s1 stage is active, the &lt;code&gt;s1_pc&lt;/code&gt; retains the value of &lt;code&gt;s0_pc&lt;/code&gt; from the previous cycle. This means that the value of &lt;code&gt;s0_pc&lt;/code&gt; will move down the pipeline.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
