<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xiangshan BPU Interface on OpenVerify Courses</title>
    <link>https://open-verify.cc/xs-bpu/en/categories/xiangshan-bpu-interface/</link>
    <description>Recent content in Xiangshan BPU Interface on OpenVerify Courses</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://open-verify.cc/xs-bpu/en/categories/xiangshan-bpu-interface/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FTB Item and Complete Prediction Result Interface</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/ports/00_ftb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/ports/00_ftb/</guid>
      <description>&lt;h2 id=&#34;ftb-item&#34;&gt;FTB item&lt;/h2&gt;&#xA;&lt;p&gt;The FTB item is the core data structure of branch prediction blocks in Xiangshan. It stores the information needed to generate a branch prediction block. When BPU performs predictions, the initial branch prediction block is first generated from a read-out FTB item. Then, this branch prediction block is passed to subsequent predictors, which read and modify the information to generate the final prediction result.&lt;/p&gt;&#xA;&lt;p&gt;Therefore, to understand the structure of a branch prediction block, we first need to understand the structure of an FTB item. An FTB item corresponds to a branch prediction block, and its general structure is as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Important Structures and Interface Documentation</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/ports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/ports/</guid>
      <description>&lt;p&gt;This document will describe the important structures and external interfaces in the BPU, with a description granularity that delves into the code level. The structures described in the document will be consistent with the Chisel version of the Xiangshan branch prediction unit code, and the signal structures and names also come from the Chisel version code.&lt;/p&gt;&#xA;&lt;p&gt;This document is intended for those who have already understood the basic design of the Xiangshan branch prediction unit and want to delve into the signal details. You can selectively read according to the content needed for verification or refer to it at any time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>BPU Global Interface</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/ports/02_global_ports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/ports/02_global_ports/</guid>
      <description>&lt;h2 id=&#34;bpu-module-overall-external-interface-predirectio&#34;&gt;&lt;strong&gt;BPU Module Overall External Interface (PredirectIO)&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Interface definition: &lt;code&gt;src/main/scala/xiangshan/frontend/BPU.scala&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;PredirectIO is the overall external interface of the branch predictor (BPU). It mainly handles the interaction between the branch predictor (BPU) and the fetch target queue (FTQ), which includes the following parts:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;bpu_to_ftq&lt;/strong&gt;: Information sent from BPU to FTQ, mainly for sending branch prediction results from BPU to FTQ&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface type： &lt;code&gt;BpuToFtqIO&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Interface type：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;resp&lt;/strong&gt;: Global branch prediction information sent from BPU to FTQ&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface type：&lt;code&gt;DecoupledIO(new BpuToFtqBundle())&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;BpuToFtqBundle&lt;/code&gt; inherits from &lt;code&gt;BranchPredictionResp&lt;/code&gt;，without additional signals&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Interface type：See  (&lt;code&gt;BranchPredictionResp&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ftq_to_bpu&lt;/strong&gt;: Information sent from FTQ to BPU, mainly for handling redirect and update requests&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface type： &lt;code&gt;FtqToBpuIO&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Interface type：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;redirect&lt;/strong&gt;: Redirect request sent from FTQ to BPU&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface type： &lt;code&gt;Valid(new BranchPredictionRedirect)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Interface list：See （&lt;code&gt;BranchPredictionRedirect&lt;/code&gt;）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;update&lt;/strong&gt;: Update request sent from FTQ to BPU&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface type：&lt;code&gt;Valid(new BranchPredictionUpdate)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Interface list：See （&lt;code&gt;BranchPredictionUpdate&lt;/code&gt;）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;enq_ptr&lt;/strong&gt;: FTQ pointer sent to BPU, indicating which FTQ entry to write to next&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface type：&lt;code&gt;FtqPtr&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ctrl&lt;/strong&gt;: BPU control signals, mainly for enabling various predictors&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface type：&lt;code&gt;BPUCtrl&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Interface list：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;ubtb_enable&lt;/strong&gt;: UBTB predictor enable&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;btb_enable&lt;/strong&gt;: BTB predictor enable&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;bim_enable&lt;/strong&gt;: BIM predictor enable&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;tage_enable&lt;/strong&gt;: TAGE predictor enable&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;sc_enable&lt;/strong&gt;: SC predictor enable&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ras_enable&lt;/strong&gt;: RAS predictor enable&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;loop_enable&lt;/strong&gt;: LOOP predictor enable&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;reset_vector&lt;/strong&gt;: Reset vector, which the BPU&amp;rsquo;s PC will be reset to upon reset&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interface type：&lt;code&gt;UInt(PAddrBits.W)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;global-branch-prediction-information-branchpredictionresp&#34;&gt;&lt;strong&gt;Global Branch Prediction Information (BranchPredictionResp)&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Interface definition: &lt;code&gt;src/main/scala/xiangshan/frontend/FrontendBundle.scala&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Base Predictor Class and Sub Predictor Interface</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/ports/03_subpredictor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/ports/03_subpredictor/</guid>
      <description>&lt;p&gt;In the Xiangshan branch prediction unit, all its sub-predictors and the class implementations of Composer are inherited from the sub-predictor base class (BasePredictor). The sub-predictor interface (BasePredictorIO) is also defined in the sub-predictor base class. Therefore, we can consider that Composer and all sub-predictors have the same interface.&lt;/p&gt;&#xA;&lt;p&gt;In the understanding and verification of sub-prediction, our most direct external interaction occurs in the sub-predictor interface and some variables defined in the sub-predictor base class. Therefore, before verifying the sub-predictor, it is strongly recommended that you read and understand this section of the document.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
