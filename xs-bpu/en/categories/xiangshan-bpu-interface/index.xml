<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenVerify Courses – Xiangshan BPU Interface</title>
    <link>https://xs-mlvp.github.io/xs-bpu/en/categories/xiangshan-bpu-interface/</link>
    <description>Recent content in Xiangshan BPU Interface on OpenVerify Courses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	  <atom:link href="https://xs-mlvp.github.io/xs-bpu/en/categories/xiangshan-bpu-interface/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: FTB Item and Complete Prediction Result Interface</title>
      <link>https://xs-mlvp.github.io/xs-bpu/en/docs/ports/00_ftb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/xs-bpu/en/docs/ports/00_ftb/</guid>
      <description>
        
        
        &lt;h2 id=&#34;ftb-item&#34;&gt;FTB item&lt;/h2&gt;
&lt;p&gt;The FTB item is the core data structure of branch prediction blocks in Xiangshan. It stores the information needed to generate a branch prediction block. When BPU performs predictions, the initial branch prediction block is first generated from a read-out FTB item. Then, this branch prediction block is passed to subsequent predictors, which read and modify the information to generate the final prediction result.&lt;/p&gt;
&lt;p&gt;Therefore, to understand the structure of a branch prediction block, we first need to understand the structure of an FTB item. An FTB item corresponds to a branch prediction block, and its general structure is as follows:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;1.png&#34; width=&#34;750px&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;First, it is necessary to clarify one piece of information: whether it is a branch prediction block or an FTB item, the number of instructions they can contain is set to a specific limit (16 RVC instructions in the current version of Xiangshan), called the &lt;strong&gt;maximum prediction length&lt;/strong&gt;. This means that if we need to record the position of an instruction within the branch prediction block, we can use a fixed-length bit vector to specify the offset of this instruction relative to the starting address of the prediction block.&lt;/p&gt;
&lt;p&gt;The determinant of the branch prediction block&amp;rsquo;s execution process is the information about the branch instructions. The other instructions are considered ordinary instructions and do not affect the program&amp;rsquo;s execution flow. Therefore, in a branch prediction block, we only need to record the positions of the branch instructions, while the positions of ordinary instructions are not our concern.&lt;/p&gt;
&lt;p&gt;Therefore, the FTB item defines two types of &lt;strong&gt;branch instruction slots&lt;/strong&gt;—&lt;code&gt;brSlots&lt;/code&gt; and &lt;code&gt;tailSlot&lt;/code&gt;, used to store the branch instructions within the branch prediction block. In the current version of Xiangshan, &lt;code&gt;brSlots&lt;/code&gt; contains only one slot, while &lt;code&gt;tailSlot&lt;/code&gt; is a separate slot, totaling two slots.&lt;/p&gt;
&lt;p&gt;Within the instructions of the maximum prediction length, if a branch instruction appears, the FTB item will record it in the corresponding slot and mark the slot as valid. If too many branch instructions appear, reaching the capacity limit of the FTB item, the excess branch instructions will be handed over to the next FTB item for storage. In each slot, we record the offset of a branch instruction relative to the starting address of the prediction block and information such as its jump target address.&lt;/p&gt;
&lt;h3 id=&#34;the-unique-tailslot&#34;&gt;The Unique tailSlot&lt;/h3&gt;
&lt;p&gt;In RISC-V, branch instructions are mainly divided into two types: conditional branches and unconditional jumps. Therefore, &lt;strong&gt;for a branch prediction block, it will contain at most one unconditional jump instruction&lt;/strong&gt;. Because once this instruction is executed, the program&amp;rsquo;s execution flow will change, and subsequent instructions will no longer be executed. Hence, we define a type of slot called &lt;code&gt;tailSlot&lt;/code&gt; specifically for storing this unconditional jump instruction. As for conditional branch instructions, they are stored in &lt;code&gt;brSlots&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As its name suggests, &lt;code&gt;tailSlot&lt;/code&gt; is located in the last slot of the entire prediction block. This is also because once the unconditional jump instruction is filled, the program will definitely jump, and subsequent instructions will be handled by other prediction blocks, so we do not need to care about the subsequent instructions. However, among the instructions before the unconditional jump instruction, we need to care about whether there are conditional branch instructions, because conditional branch instructions may or may not jump. Therefore, we need to record the relevant information of the conditional branch instructions.&lt;/p&gt;
&lt;h3 id=&#34;tailslot-sharing&#34;&gt;tailSlot Sharing&lt;/h3&gt;
&lt;p&gt;Consider a situation: if no unconditional jump instructions appear from the starting PC of the prediction block to the maximum prediction length, but two conditional branch instructions appear instead, the &lt;code&gt;tailSlot&lt;/code&gt; will be idle, and the second conditional branch instruction cannot be stored, causing space waste.&lt;/p&gt;
&lt;p&gt;To solve this problem, Xiangshan adopts a method of setting a &lt;code&gt;sharing&lt;/code&gt; mark. We can directly store the second branch instruction into the &lt;code&gt;tailSlot&lt;/code&gt; and set the sharing mark to true, indicating that the second conditional branch instruction shares the tailSlot of the unconditional jump instruction. This way, the space of the &lt;code&gt;tailSlot&lt;/code&gt; is effectively utilized.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;isCall&lt;/code&gt;, &lt;code&gt;isRet&lt;/code&gt;, and &lt;code&gt;isJalr&lt;/code&gt; fields in the prediction block serve the &lt;code&gt;tailSlot&lt;/code&gt;. If the tailSlot records an unconditional jump instruction, these fields will further indicate the type of the jump instruction. There is also a field in the FTB item called &lt;code&gt;always_taken&lt;/code&gt;, which records whether each conditional branch instruction stored in each slot is always predicted to jump. If so, subsequent predictors can directly adopt this prediction result.&lt;/p&gt;
&lt;p&gt;Through the FTB item, we can know the instruction situation in a branch prediction block, including the position and type of branch instructions. This information will be handed over to subsequent predictors, which will predict more accurate jump targets, whether to jump, and other information.&lt;/p&gt;
&lt;h2 id=&#34;complete-structure-of-ftb-item-ftbentry&#34;&gt;Complete Structure of FTB Item (FTBEntry)&lt;/h2&gt;
&lt;p&gt;Interface Definition: &lt;code&gt;src/main/scala/xiangshan/frontend/FTB.scala&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This section describes the complete structural definition of the FTB item, containing the following signals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;valid&lt;/strong&gt;: Whether the FTB entry is valid.
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;brSlots&lt;/strong&gt;: Conditional branch instruction slots.
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Vec(numBrSlot, new FtbSlot(BR_OFFSET_LEN))&lt;/code&gt; （see FtbSlot for interface list）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tailSlot&lt;/strong&gt;: Unconditional jump instruction slot.
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;new FtbSlot(JMP_OFFSET_LEN, Some(BR_OFFSET_LEN))&lt;/code&gt; （see FtbSlot for interface list）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pftAddr&lt;/strong&gt;: Unconditional jump instruction slot
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;UInt(log2Up(PredictWidth).W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;carry&lt;/strong&gt;: Unconditional jump instruction slot.
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;isCall&lt;/strong&gt;: The instruction in the unconditional jump instruction slot is a call instruction.
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;isRet&lt;/strong&gt;: The instruction in the unconditional jump instruction slot is a ret instruction.
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;isJalr&lt;/strong&gt;: The instruction in the unconditional jump instruction slot is a jalr instruction.
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;last_may_be_rvi_call&lt;/strong&gt;:  The instruction in the unconditional jump instruction slot may be an RVI type call instruction signal.
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;always_taken&lt;/strong&gt;: Whether each branch instruction in the prediction block is always predicted as Taken.
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Vec(numBr, Bool())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Explanation: pftAddr and carry&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here, &lt;code&gt;pftAddr&lt;/code&gt; stands for Partial Fallthrough Address. Fallthrough Address means that if there is no jump in the prediction block, the program will sequentially execute to the address reached. In other words, if the offset of an unconditional jump instruction is 5, then the offset corresponding to the Fallthrough Address is 6. This signal is mainly used to get the return address of the program after a function call, and this concept can be understood as the end address of the prediction block.&lt;/p&gt;
&lt;p&gt;Partial means part of the address, which is determined by the address representation method. Here, the address representation method is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Plain&#34; data-lang=&#34;Plain&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pc: | ... |&amp;lt;-- log(predictWidth) --&amp;gt;|&amp;lt;-- log(instBytes) --&amp;gt;|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           ^                         ^
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           |                         |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           carryPos                  instOffsetBits
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pftAddr&lt;/code&gt; only records the middle offset part (the part with a length of log(predictWidth)), and a complete PC can be generated by combining it with the current PC. However, a carry might occur, so a &lt;code&gt;carry&lt;/code&gt; bit is recorded separately. carryPos is the position in the instruction address within the prediction block where a carry might occur.&lt;/p&gt;
&lt;p&gt;Additionally, &lt;code&gt;last_may_be_rvi_call&lt;/code&gt; is an auxiliary signal for this address, indicating that the instruction in the unconditional jump instruction slot is an RVI type call instruction. Since pftAddr assumes the instruction length as the compressed instruction length by default when calculating, the end address is increased by only 2 bytes. If the actual call instruction is not a compressed instruction, it will lead to an incorrect return address calculation. RAS will correct this error based on this signal.&lt;/p&gt;
&lt;h2 id=&#34;branch-prediction-slot-ftbslot&#34;&gt;Branch Prediction Slot (FTBSlot)&lt;/h2&gt;
&lt;p&gt;Interface Definition: &lt;code&gt;src/main/scala/xiangshan/frontend/FTB.scala&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This interface defines the slot in the FTB entry:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;offset&lt;/strong&gt;: The offset of the instruction in the slot relative to the start address of the prediction block.
&lt;ul&gt;
&lt;li&gt;Interface Type: UInt(log2Ceil(PredictWidth).W)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lower&lt;/strong&gt;: The lower bits of the jump target address.
&lt;ul&gt;
&lt;li&gt;Interface Type: UInt(offsetLen.W)&lt;/li&gt;
&lt;li&gt;Note: The lower is set to 12 or 20 bits because the addressing capability of branch instructions is 12 bits, while the addressing capability of jump instructions is 20 bits.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tarStat&lt;/strong&gt;: Whether the high bits of the PC after the jump are incremented or decremented.
&lt;ul&gt;
&lt;li&gt;Interface Type: UInt(TAR_STAT_SZ.W) (TAR_STAT_SZ = 2)&lt;/li&gt;
&lt;li&gt;Note: The jump target address is calculated from the high bits of the current PC, the tarStat, and the lower field. The lower field directly stores the lower bits of the jump target address. The high bits of the current PC are adjusted according to the tarStat, then concatenated with the lower to get the actual jump target address. The tarStat can take three values: 0 - no increment or decrement, 1 - increment, 2 - decrement.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sharing&lt;/strong&gt;: Indicates that a conditional branch instruction is stored in an unconditional jump instruction slot.
&lt;ul&gt;
&lt;li&gt;Interface Type: Bool()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;valid&lt;/strong&gt;: Indicates whether the slot is valid.
&lt;ul&gt;
&lt;li&gt;Interface Type: Bool()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;full-branch-prediction&#34;&gt;Full Branch Prediction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Interface Definition: &lt;code&gt;src/main/scala/xiangshan/frontend/FrontendBundle.scala&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This interface defines the complete branch prediction results, included in the prediction results of each pipeline stage.&lt;/p&gt;
&lt;p&gt;The full branch prediction result interface is similar to the FTB entry and is initially generated from the FTB entry. Two slots are split into individual signals: &lt;code&gt;slot_valids&lt;/code&gt;, &lt;code&gt;targets&lt;/code&gt;, &lt;code&gt;offsets&lt;/code&gt;, &lt;code&gt;is_br_sharing&lt;/code&gt;, etc. Additionally, several fields are added such as &lt;code&gt;br_taken_mask&lt;/code&gt;, &lt;code&gt;jalr_target&lt;/code&gt; to facilitate the provision of precise prediction results by subsequent predictors. The &lt;code&gt;hit&lt;/code&gt; indicates whether an FTB entry is hit, i.e., the PC in the current prediction round indexed to an FTB entry.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Full Interface List：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hit&lt;/strong&gt;: Indicates whether the FTB entry is hit.&lt;/li&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slot_valids&lt;/strong&gt;: Indicates whether each slot in the FTB entry is valid.&lt;/li&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Vec(totalSlot, Bool())&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;targets&lt;/strong&gt;: The jump target address corresponding to each slot.&lt;/li&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Vec(totalSlot, UInt(VAddrBits.W))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;offsets&lt;/strong&gt;: The offset of the instruction in each slot relative to the start address of the prediction block.&lt;/li&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Vec(totalSlot, UInt(log2Ceil(PredictWidth).W))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fallThroughAddr&lt;/strong&gt;: The end address of the prediction block.&lt;/li&gt;
&lt;li&gt;Interface Type: &lt;code&gt;UInt(VAddrBits.W)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fallThroughErr&lt;/strong&gt;: Indicates that the pftAddr recorded in the FTB entry is incorrect.&lt;/li&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;is_jal&lt;/strong&gt;: Indicates that the prediction block contains a jal instruction.&lt;/li&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;is_jalr&lt;/strong&gt;: Indicates that the prediction block contains a jalr instruction.&lt;/li&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;is_call&lt;/strong&gt;: Indicates that the prediction block contains a call instruction.&lt;/li&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;is_ret&lt;/strong&gt;: Indicates that the prediction block contains a ret instruction.&lt;/li&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;last_may_be_rvi_call&lt;/strong&gt;: Indicates that the instruction in the unconditional jump instruction slot might be an RVI type call instruction.&lt;/li&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;is_br_sharing&lt;/strong&gt;: Indicates that the last slot (tailSlot) stores a conditional branch instruction.&lt;/li&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;br_taken_mask&lt;/strong&gt;: The branch prediction result, with each bit corresponding to a branch (slot), indicating whether the branch is predicted to be taken.&lt;/li&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Vec(numBr, Bool())&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jalr_target&lt;/strong&gt;: The jump target of the jalr instruction in the prediction block.&lt;/li&gt;
&lt;li&gt;Interface Type: &lt;code&gt;UInt(VAddrBits.W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Important Structures and Interface Documentation</title>
      <link>https://xs-mlvp.github.io/xs-bpu/en/docs/ports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/xs-bpu/en/docs/ports/</guid>
      <description>
        
        
        &lt;p&gt;This document will describe the important structures and external interfaces in the BPU, with a description granularity that delves into the code level. The structures described in the document will be consistent with the Chisel version of the Xiangshan branch prediction unit code, and the signal structures and names also come from the Chisel version code.&lt;/p&gt;
&lt;p&gt;This document is intended for those who have already understood the basic design of the Xiangshan branch prediction unit and want to delve into the signal details. You can selectively read according to the content needed for verification or refer to it at any time.&lt;/p&gt;
&lt;p&gt;Among them, the FTB entry and the full prediction result interface involve the way the BPU generates prediction results, which is recommended for every reader to read.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: BPU Global Interface</title>
      <link>https://xs-mlvp.github.io/xs-bpu/en/docs/ports/02_global_ports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/xs-bpu/en/docs/ports/02_global_ports/</guid>
      <description>
        
        
        &lt;h2 id=&#34;bpu-module-overall-external-interface-predirectio&#34;&gt;&lt;strong&gt;BPU Module Overall External Interface (PredirectIO)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Interface definition: &lt;code&gt;src/main/scala/xiangshan/frontend/BPU.scala&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;PredirectIO is the overall external interface of the branch predictor (BPU). It mainly handles the interaction between the branch predictor (BPU) and the fetch target queue (FTQ), which includes the following parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bpu_to_ftq&lt;/strong&gt;: Information sent from BPU to FTQ, mainly for sending branch prediction results from BPU to FTQ
&lt;ul&gt;
&lt;li&gt;Interface type： &lt;code&gt;BpuToFtqIO&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Interface type：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;resp&lt;/strong&gt;: Global branch prediction information sent from BPU to FTQ
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;DecoupledIO(new BpuToFtqBundle())&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BpuToFtqBundle&lt;/code&gt; inherits from &lt;code&gt;BranchPredictionResp&lt;/code&gt;，without additional signals&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interface type：See  (&lt;code&gt;BranchPredictionResp&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ftq_to_bpu&lt;/strong&gt;: Information sent from FTQ to BPU, mainly for handling redirect and update requests
&lt;ul&gt;
&lt;li&gt;Interface type： &lt;code&gt;FtqToBpuIO&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Interface type：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;redirect&lt;/strong&gt;: Redirect request sent from FTQ to BPU
&lt;ul&gt;
&lt;li&gt;Interface type： &lt;code&gt;Valid(new BranchPredictionRedirect)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Interface list：See （&lt;code&gt;BranchPredictionRedirect&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;update&lt;/strong&gt;: Update request sent from FTQ to BPU
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;Valid(new BranchPredictionUpdate)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Interface list：See （&lt;code&gt;BranchPredictionUpdate&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;enq_ptr&lt;/strong&gt;: FTQ pointer sent to BPU, indicating which FTQ entry to write to next
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;FtqPtr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ctrl&lt;/strong&gt;: BPU control signals, mainly for enabling various predictors
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;BPUCtrl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Interface list：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ubtb_enable&lt;/strong&gt;: UBTB predictor enable
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;btb_enable&lt;/strong&gt;: BTB predictor enable
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bim_enable&lt;/strong&gt;: BIM predictor enable
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tage_enable&lt;/strong&gt;: TAGE predictor enable
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sc_enable&lt;/strong&gt;: SC predictor enable
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ras_enable&lt;/strong&gt;: RAS predictor enable
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;loop_enable&lt;/strong&gt;: LOOP predictor enable
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reset_vector&lt;/strong&gt;: Reset vector, which the BPU&amp;rsquo;s PC will be reset to upon reset
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;UInt(PAddrBits.W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;global-branch-prediction-information-branchpredictionresp&#34;&gt;&lt;strong&gt;Global Branch Prediction Information (BranchPredictionResp)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Interface definition: &lt;code&gt;src/main/scala/xiangshan/frontend/FrontendBundle.scala&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This interface defines all the prediction result information of the branch predictor, including the prediction results of each stage and the related information output by the last pipeline stage.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;s1&lt;/strong&gt; Branch prediction result of the s1 pipeline stage&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s2&lt;/strong&gt; Branch prediction result of the s2 pipeline stage&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s3&lt;/strong&gt; Branch prediction result of the s3 pipeline stage
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;BranchPredictionBundle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Interface type：See （&lt;code&gt;BranchPredictionBundle&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;last_stage_meta&lt;/strong&gt; Metadata of the prediction result output by the last pipeline stage. It is a bit vector output by each predictor and combined by the Composer.
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;UInt(MaxMetaLength.W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;last_stage_spec_info&lt;/strong&gt; Related information of the prediction result output by the last pipeline stage
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;Ftq_Redirect_SRAMEntry&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Interface list：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;folded_hist&lt;/strong&gt;  Global folded history
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;AllFoldedHistories(foldedGHistInfos)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;afhob&lt;/strong&gt; Global branch history oldest bit
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;AllAheadFoldedHistoryOldestBits(foldedGHistInfos)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lastBrNumOH&lt;/strong&gt; Last branch position
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;UInt((numBr+1).W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;histPtr&lt;/strong&gt; Global branch history pointer
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;CGHPtr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ssp&lt;/strong&gt; RAS speculation stack pointer at commit stack position
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;UInt(log2Up(RasSize).W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sctr&lt;/strong&gt; RAS speculation stack recursion counter
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;UInt(log2Up(RasCtrSize).W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TOSW&lt;/strong&gt; RAS speculation stack (queue) write pointer
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;CGHPtr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TOSR&lt;/strong&gt; RAS speculation stack (queue) read pointer
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;CGHPtr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOS&lt;/strong&gt; RAS stack top counter
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;CGHPtr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;topAddr&lt;/strong&gt; RAS stack top return address
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;UInt(VAddrBits.W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;last_stage_ftb_entry&lt;/strong&gt; FTB entry output by the last pipeline stage
&lt;ul&gt;
&lt;li&gt;Interface type：&lt;code&gt;FtqEntry&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Interface list：See（&lt;code&gt;FtqEntry&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ftb-entry-output-by-the-last-pipeline-stage&#34;&gt;&lt;strong&gt;FTB entry output by the last pipeline stage&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Interface definition: &lt;code&gt;src/main/scala/xiangshan/frontend/FrontendBundle.scala&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This interface defines the branch prediction result information output by each pipeline stage,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pc&lt;/strong&gt; Starting PC of the predicted block
&lt;ul&gt;
&lt;li&gt;Interface type: &lt;code&gt;Vec(numDup, UInt(VAddrBits.W))&lt;/code&gt; numDup is only for register replication, with identical signals&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;valid&lt;/strong&gt; Whether the prediction result is valid
&lt;ul&gt;
&lt;li&gt;Interface type: &lt;code&gt;Vec(numDup, Bool())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hasRedirect&lt;/strong&gt; Whether a redirect is needed
&lt;ul&gt;
&lt;li&gt;Interface description: Only the s2 and s3 stages will redirect, and the prediction result of this stage will override the previous pipeline stage&amp;rsquo;s result when a redirect occurs&lt;/li&gt;
&lt;li&gt;Interface type: &lt;code&gt;Vec(numDup, Bool())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ftq_idx&lt;/strong&gt; FTQ pointer, pointing to the FTQ entry corresponding to the prediction information of this stage
&lt;ul&gt;
&lt;li&gt;Interface type: &lt;code&gt;new FtqPtr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;full_pred&lt;/strong&gt; Complete branch prediction result
&lt;ul&gt;
&lt;li&gt;Interface type: &lt;code&gt;Vec(numDup, new FullBranchPrediction)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Interface list: See (&lt;code&gt;FullBranchPrediction&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Base Predictor Class and Sub Predictor Interface</title>
      <link>https://xs-mlvp.github.io/xs-bpu/en/docs/ports/03_subpredictor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/xs-bpu/en/docs/ports/03_subpredictor/</guid>
      <description>
        
        
        &lt;p&gt;In the Xiangshan branch prediction unit, all its sub-predictors and the class implementations of Composer are inherited from the sub-predictor base class (BasePredictor). The sub-predictor interface (BasePredictorIO) is also defined in the sub-predictor base class. Therefore, we can consider that Composer and all sub-predictors have the same interface.&lt;/p&gt;
&lt;p&gt;In the understanding and verification of sub-prediction, our most direct external interaction occurs in the sub-predictor interface and some variables defined in the sub-predictor base class. Therefore, before verifying the sub-predictor, it is strongly recommended that you read and understand this section of the document.&lt;/p&gt;
&lt;p&gt;The general content and usage of the sub-branch predictor interface have been introduced in the &lt;code&gt;Xiangshan Branch Prediction Unit (BPU) Basic Design&lt;/code&gt; section. This document will focus on the signal details of the interface.&lt;/p&gt;
&lt;h2 id=&#34;sub-branch-predictor-interface-basepredictorio&#34;&gt;&lt;strong&gt;Sub-Branch Predictor Interface (BasePredictorIO)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Interface Definition: &lt;code&gt;src/main/scala/xiangshan/frontend/BPU.scala&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Each sub-branch predictor needs to implement this interface, which defines the input and output interfaces of the sub-branch predictor.&lt;/p&gt;
&lt;p&gt;Note: Some signals are defined as &lt;code&gt;numDup&lt;/code&gt; quantities, where each signal is exactly the same. Multiple identical signals are for other considerations.&lt;/p&gt;
&lt;p&gt;The detailed signal list is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;reset_vector&lt;/strong&gt; Reset vector, when reset occurs, the BPU&amp;rsquo;s pc will be reset to this value.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;UInt(PAddrBits.W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;in&lt;/strong&gt; Information sent from the BPU to the sub-branch predictor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;DecoupledIO(new BasePredictorInput)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Signal List：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;s0_pc&lt;/strong&gt; PC of the s0 pipeline stage
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Vec(numDup, UInt(VAddrBits.W))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;folded_hist&lt;/strong&gt; Global folded history information
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Vec(numDup, new AllFoldedHistories(foldedGHistInfos))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Signal List：See（&lt;code&gt;AllFoldedHistories&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ghist&lt;/strong&gt; Global branch history information
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;UInt(HistoryLength.W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;resp_in&lt;/strong&gt;  Global branch prediction information (including s1, s2, s3 prediction result information)
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;BranchPredictionResp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Signal List：See（&lt;code&gt;BranchPredictionResp&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;out&lt;/strong&gt; Information sent from the sub-branch predictor to the BPU (including s1, s2, s3 prediction result information)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;new BasePredictorOutput&lt;/code&gt; 继承自 &lt;code&gt;BranchPredictionResp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Signal List：See（&lt;code&gt;BranchPredictionResp&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ctrl&lt;/strong&gt; BPU sub-predictor enable control signal, mainly used to control whether each predictor is enabled&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;BPUCtrl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Interface Type：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ubtb_enable&lt;/strong&gt;: UBTB predictor enable
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;btb_enable&lt;/strong&gt;: BTB predictor enable
&lt;ul&gt;
&lt;li&gt;接Interface Type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bim_enable&lt;/strong&gt;: BIM predictor enable
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tage_enable&lt;/strong&gt;: TAGE predictor enable
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sc_enable&lt;/strong&gt;: SC predictor enable
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ras_enable&lt;/strong&gt;: RAS predictor enable
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;loop_enable&lt;/strong&gt;: LOOP predictor enable
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;s0_fire&lt;/strong&gt; s0 stage handshake success signal&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Vec(numDup, Bool())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;s1_fire&lt;/strong&gt; s1 stage handshake success signal&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Vec(numDup, Bool())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;s2_fire&lt;/strong&gt; s2 stage handshake success signal&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Vec(numDup, Bool())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;s3_fire&lt;/strong&gt; s3 stage handshake success signal&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Vec(numDup, Bool())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;s2_redirect&lt;/strong&gt; s2 stage redirection signal&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Vec(numDup, Bool())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;s3_redirect&lt;/strong&gt; s3 stage redirection signal&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Vec(numDup, Bool())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;s1_ready&lt;/strong&gt; s1 stage ready to receive information (Direction: output from the sub-predictor)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;s2_ready&lt;/strong&gt; s2 stage ready to receive information (Direction: output from the sub-predictor)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;s3_ready&lt;/strong&gt; s3 stage ready to receive information (Direction: output from the sub-predictor)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt; Update request forwarded from the BPU to the sub-branch predictor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Valid(new BranchPredictionUpdate)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Signal List：See（&lt;code&gt;BranchPredictionUpdate&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;redirect&lt;/strong&gt; Redirect request forwarded from the BPU to the sub-branch predictor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Valid(new BranchPredictionRedirect)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Signal List：See（&lt;code&gt;BranchPredictionRedirect&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The pipeline control signals will be further explained in the following content.&lt;/p&gt;
&lt;h3 id=&#34;global-folding-history-allfoldedhistories&#34;&gt;Global Folding History (AllFoldedHistories)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Interface Definition：&lt;/strong&gt;&lt;code&gt;src/main/scala/xiangshan/frontend/FrontendBundle.scala&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interface Type：&lt;/strong&gt;&lt;code&gt;AllFoldedHistories(foldedGHistInfos))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The interface information of the global folding history consists of only one &lt;code&gt;FoldedHistory&lt;/code&gt; list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hist&lt;/strong&gt; List of folded histories
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;MixedVec(gen.map{case (l, cl) =&amp;gt; new FoldedHistory(l, cl, numBr)})&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The interface information of &lt;code&gt;FoldedHistory&lt;/code&gt; also has only one item.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;folded_hist&lt;/strong&gt; Single folded history, with a bit width equal to the compressed history length.
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;UInt(compLen.W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means that the interface of the global folding history is actually a list that stores folded histories, where each item is a folded history of a specific length.&lt;/p&gt;
&lt;h2 id=&#34;base-predictor-class&#34;&gt;Base Predictor Class&lt;/h2&gt;
&lt;p&gt;The base predictor class defines several signals, which can be accessed in each sub-predictor, and several connections are made within it.&lt;/p&gt;
&lt;p&gt;Most of the signals are relatively easy to understand. We need to pay particular attention to the pc of each pipeline, which also involves your understanding of pipeline control signals. Therefore, next, we will introduce the meanings of pipeline control signals that need to be paid attention to in sub-predictors, as well as the meanings of the s1_pc, s2_pc, s3_pc signals.&lt;/p&gt;
&lt;p&gt;There are three groups of pipeline control signals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fire signals  (s0, s1, s2, s3)&lt;/li&gt;
&lt;li&gt;redirect signals  (s2, s3)&lt;/li&gt;
&lt;li&gt;ready signals  (s1, s2, s3)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The pc signals in the base predictor class are divided into four groups, &lt;code&gt;s0_pc_dup&lt;/code&gt;, &lt;code&gt;s1_pc_dup&lt;/code&gt;, &lt;code&gt;s2_pc_dup&lt;/code&gt;, &lt;code&gt;s3_pc_dup&lt;/code&gt;. Each group of signals contains multiple pc signals, which are exactly the same and are duplicated for some other reasons. Therefore, we can simply consider them as &lt;code&gt;s0_pc&lt;/code&gt;, &lt;code&gt;s1_pc&lt;/code&gt;, &lt;code&gt;s2_pc&lt;/code&gt;, &lt;code&gt;s3_pc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Their usage can be seen in the following diagram:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;1.png&#34; width=&#34;700px&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Their relationship with the pipeline control signals is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s0_pc&lt;/code&gt; is directly connected from the &lt;code&gt;in.s0_pc&lt;/code&gt; in the input interface.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;s0_fire&lt;/code&gt; is active, the next cycle &lt;code&gt;s1_pc&lt;/code&gt; will output the value of &lt;code&gt;s0_pc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;s1_fire&lt;/code&gt; is active, the next cycle &lt;code&gt;s2_pc&lt;/code&gt; will output the value of &lt;code&gt;s1_pc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;s2_fire&lt;/code&gt; is active, the next cycle &lt;code&gt;s3_pc&lt;/code&gt; will output the value of &lt;code&gt;s2_pc&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, the &lt;code&gt;fire&lt;/code&gt; signal affects whether the data of the next cycle is valid. For example, the &lt;code&gt;s0_fire&lt;/code&gt; signal affects whether the data of the s1 pipeline is valid, and the &lt;code&gt;s1_fire&lt;/code&gt; signal affects whether the data of the s2 pipeline is valid.&lt;/p&gt;
&lt;p&gt;Whether the &lt;code&gt;fire&lt;/code&gt; signal is valid depends on whether the data of this pipeline stage is valid and whether the next pipeline stage is ready. For example, the &lt;code&gt;s1_fire&lt;/code&gt; signal is valid only if the data of the s1 stage is valid and the &lt;code&gt;s2_ready&lt;/code&gt; signal from the sub-predictor output is valid. At this point, it can be considered that the data processing of the s1 stage is completed, the s2 stage is ready, and the data of the next cycle will be directly sent to the s2 stage.&lt;/p&gt;
&lt;p&gt;Therefore, in the sub-predictor, taking the s1 stage as an example, &lt;code&gt;s1_ready&lt;/code&gt; can block data from entering the s1 stage. When &lt;code&gt;s1_ready&lt;/code&gt; is active, the data for the s1 stage will be valid in the next cycle. &lt;strong&gt;When &lt;code&gt;s1_fire&lt;/code&gt; is active, it indicates that the data in the s1 stage is already valid and the predictor has generated the result for the s1 stage&lt;/strong&gt;. The data will then be directly sent to the s2 stage in the next cycle.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;redirect&lt;/code&gt; signal is relatively clear. For example, in the s2 stage, when &lt;code&gt;s2_redirect&lt;/code&gt; is valid, it indicates that when &lt;code&gt;s2_fire&lt;/code&gt; is valid, the s2 prediction result is different from the s1 prediction result in the previous cycle.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
