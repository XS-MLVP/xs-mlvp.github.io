<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenVerify Courses – Xiangshan BPU Interfaces</title>
    <link>https://xs-mlvp.github.io/xs-bpu/en/categories/xiangshan-bpu-interfaces/</link>
    <description>Recent content in Xiangshan BPU Interfaces on OpenVerify Courses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	  <atom:link href="https://xs-mlvp.github.io/xs-bpu/en/categories/xiangshan-bpu-interfaces/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Redirection and Update Interfaces</title>
      <link>https://xs-mlvp.github.io/xs-bpu/en/docs/ports/01_redirect_and_update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xs-mlvp.github.io/xs-bpu/en/docs/ports/01_redirect_and_update/</guid>
      <description>
        
        
        &lt;h2 id=&#34;branch-prediction-redirectionbranchpredictionredirect&#34;&gt;&lt;strong&gt;Branch Prediction Redirection（BranchPredictionRedirect）&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Interface Definition：&lt;/strong&gt;&lt;code&gt;src/main/scala/xiangshan/frontend/FrontendBundle.scala&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interface Type：&lt;/strong&gt;&lt;code&gt;BranchPredictionRedirect&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This interface defines the redirection requests from the branch prediction unit, mainly used to redirect the state of the branch predictor.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;BranchPredictionRedirect&lt;/code&gt; interface inherits from the &lt;code&gt;Redirect&lt;/code&gt; interface and includes many signals, only a subset of which are used by the BPU redirection. The documented structure contains only the interfaces used by the BPU.&lt;/p&gt;
&lt;p&gt;Redirection requests have two sources: those generated by comparing IFU pre-decode information and those generated during the backend execution process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In redirection requests, the key information is &lt;code&gt;cfiUpdate&lt;/code&gt;, which corresponds to a control flow instruction. This information pertains to an instruction where the BPU made a prediction error&lt;/strong&gt;. For example, if the BPU indicates that the third instruction in the prediction block is a normal instruction with no jump, but the pre-decode shows it is an unconditional jump instruction, a prediction error has occurred. In this case, the FTQ generates a redirection request. The &lt;code&gt;cfiUpdate&lt;/code&gt; in the redirection request corresponds to this unconditional jump instruction.&lt;/p&gt;
&lt;p&gt;The information in &lt;code&gt;cfiUpdate&lt;/code&gt; can be broadly classified into three types:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Information about the corresponding instruction and its execution status&lt;/strong&gt;. This includes the slot (shift) and PC of the instruction in the prediction block, the type-related information of the instruction (pd), and the execution status, such as jump target and whether it jumps.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;History maintenance related information&lt;/strong&gt;. The redirection request contains branch history information corresponding to the prediction block of the instruction to help the BPU restore branch history. folded_hist represents the global folded history, histPtr represents the global history pointer, and other information assists in maintaining branch history. For detailed information, refer to the BPU Top-Level Module.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RAS maintenance related information&lt;/strong&gt;. For detailed meaning, refer to the RAS sub-predictor documentation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The meaning of &lt;code&gt;level&lt;/code&gt; is whether the redirection includes this instruction. If not included, the redirection request receiver will assume the instruction has been executed, and the next prediction will start from the next instruction. The &lt;code&gt;BPU&lt;/code&gt; top-level will default to not including this instruction, and upon receiving a redirection request, it will include the execution status of this instruction in the branch history.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The detailed signal list for the redirection interface is as follows:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;level&lt;/strong&gt;: Indicates whether the redirection request includes the current position. Low means redirection after this position, high means redirection at this position.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;UInt(1.W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;cfiUpdate&lt;/strong&gt;: Control flow instruction update information&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Interface Type: &lt;code&gt;CfiUpdateInfo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interface List&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pc&lt;/strong&gt;: The PC of the instruction corresponding to the redirection request
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;UInt(VaddrBits.W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pd&lt;/strong&gt;: Pre-decode information of the redirection instruction
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;isRVC&lt;/strong&gt;: Whether it is a compressed instruction
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;isCall&lt;/strong&gt;: Whether it is a function call
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;isRet&lt;/strong&gt;: Whether it is a function return
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;target&lt;/strong&gt;: Target address of the redirection request instruction
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;UInt(VaddrBits.W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;taken&lt;/strong&gt;: Whether the redirection request instruction is taken
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;shift&lt;/strong&gt;: Slot in which the redirection request instruction is located, 0 if it is a normal instruction.
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;UInt((log2Ceil(numBr)+1).W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;addIntoHist&lt;/strong&gt;: Whether to include the execution information of the redirection request instruction in the branch history.
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;folded_hist&lt;/strong&gt;: Folded history corresponding to the redirection request
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;AllFoldedHistories(foldedGHistInfos)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;afhob&lt;/strong&gt;: Oldest bit of the branch history corresponding to the redirection request instruction
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;AllAheadFoldedHistoryOldestBits(foldedGHistInfos)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lastBrNumOH&lt;/strong&gt;: Last branch position corresponding to the redirection request
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;UInt((numBr+1).W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;histPtr&lt;/strong&gt;: Global history pointer to be restored by the redirection request
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;CGHPtr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ssp&lt;/strong&gt;: RAS speculative stack top pointer at the commit stack position corresponding to the redirection request instruction
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;UInt(log2Up(RasSize).W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sctr&lt;/strong&gt;: RAS speculative stack top recursion counter corresponding to the redirection request instruction
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;UInt(log2Up(RasCtrSize).W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TOSW&lt;/strong&gt;: RAS speculative stack (queue) write pointer corresponding to the redirection request instruction
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;CGHPtr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TOSR&lt;/strong&gt;: RAS speculative stack (queue) read pointer corresponding to the redirection request instruction
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;CGHPtr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOS&lt;/strong&gt;: RAS stack top counter corresponding to the redirection request instruction
&lt;ul&gt;
&lt;li&gt;Interface Type: &lt;code&gt;CGHPtr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;branch-prediction-updatebranchpredictionupdate&#34;&gt;&lt;strong&gt;Branch Prediction Update（BranchPredictionUpdate）&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Interface Definition: &lt;code&gt;src/main/scala/xiangshan/frontend/FrontendBundle.scala&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This interface defines the update requests for the branch predictor, mainly used to update the state of the branch predictor. The document lists only the interfaces used in the BPU.&lt;/p&gt;
&lt;p&gt;Update requests correspond to each branch prediction block. When a branch prediction block in the FTQ has been executed, the FTQ generates an update request for this prediction block to train the predictor. Thus, an important role of the update request is to feed back the actual execution status of the instructions to the BPU. Additionally, in the Xiangshan branch prediction unit, the update request is responsible for updating FTB entries.&lt;/p&gt;
&lt;p&gt;The information in the update request can be broadly classified into four categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PC&lt;/strong&gt;: Indicates the starting address of the prediction block, specifying which prediction block the update request corresponds to&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FTB Entry Update Information&lt;/strong&gt;: The update channel contains an FTB entry structure (ftb_entry), outputs the newly generated FTB entry from the FTQ, and indicates whether it is the same as the old FTB entry (old_entry)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Actual Execution Status Information of Instructions&lt;/strong&gt;: The update channel indicates the execution status of branch and unconditional jump instructions in the prediction block, and provides the address and final target of control flow instructions (i.e., instructions that jump)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Predictor-Related Data Corresponding to the Prediction Block&lt;/strong&gt;: Contains spec_info and meta information (refer to the BPU Global Interface Documentation for details)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The interface list of the update request is as follows:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pc&lt;/strong&gt; PC of the update request (starting address of the prediction block)
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;UInt(VAddrBits.W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ftb_entry&lt;/strong&gt; Updated FTB entry
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;new FTBEntry()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Interface List：See（&lt;code&gt;FTBEntry&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;old_entry&lt;/strong&gt; Whether the updated FTB entry is the same as the old FTB entry
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;br_taken_mask&lt;/strong&gt; Mask indicating whether each slot instruction in the prediction block jumps
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Vec(numBr, Bool())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mispred_mask&lt;/strong&gt; Mask indicating prediction errors in the prediction block. The first and second bits indicate whether the two conditional branch instructions were mispredicted, and the third bit indicates whether the unconditional jump instruction was mispredicted.
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Vec(numBr+1, Bool())&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jmp_taken&lt;/strong&gt; Unconditional jump instruction triggered in the prediction block
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;Bool()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cfi_idx&lt;/strong&gt; Index of the control flow instruction in the prediction block
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;ValidUndirectioned(UInt(log2Ceil(PredictWidth).W))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;full_target&lt;/strong&gt; Jump target of the prediction block (starting address of the next prediction block)
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;UInt(VAddrBits.W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;spec_info&lt;/strong&gt; Last stage speculative information corresponding to the prediction block
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;new SpeculativeInfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Interface List：（Only &lt;code&gt;foled_hist&lt;/code&gt; is used）
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;folded_hist&lt;/strong&gt; Global folded history
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;AllFolededHistories(foldedGHistInfos)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;meta&lt;/strong&gt; Last stage meta information corresponding to the prediction block
&lt;ul&gt;
&lt;li&gt;Interface Type：&lt;code&gt;UInt(MaxMetaLength.W)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
