<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basic Design of Shanshan Branch Prediction Unit (BPU) on OpenVerify Courses</title>
    <link>https://open-verify.cc/xs-bpu/en/docs/basic/</link>
    <description>Recent content in Basic Design of Shanshan Branch Prediction Unit (BPU) on OpenVerify Courses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://open-verify.cc/xs-bpu/en/docs/basic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What is Branch Prediction</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/basic/00_bp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/basic/00_bp/</guid>
      <description>Why Do We Need Branch Prediction? There are mainly two reasons for branch prediction: one is that the program&amp;rsquo;s execution flow contains branch instructions, and the other is that high-performance processors use pipeline design.&#xA;Program&amp;rsquo;s Execution Flow Contains Branch Instructions int x = 10; int y = 20; int result = 0; if (x &amp;gt;= y) { result = x + y; } else { result = x - y; } The above is a piece of C code.</description>
    </item>
    <item>
      <title>Basic of the Xiangshan Branch Prediction Unit (BPU)</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/basic/01_xsbpu_basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/basic/01_xsbpu_basic/</guid>
      <description>Branch Prediction Block Concept For a general branch predictor, it usually predicts the relevant information of an instruction corresponding to a given PC, such as whether it is a conditional branch instruction or a jump instruction. For conditional branch instructions, it predicts whether it will jump, while for jump instructions, it predicts the jump target. However, predicting instructions one by one is inefficient, leading to slow instruction supply in the frontend.</description>
    </item>
    <item>
      <title>Introduction to the Xiangshan Branch Prediction Unit Structure</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/basic/02_xsbpu_structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/basic/02_xsbpu_structure/</guid>
      <description>How Does the BPU Integrate Internal Sub-predictors? We already know that the Xiangshan BPU adopts multiple predictors and multiple pipeline schemes. To adapt to multiple pipelines, the BPU uses a three-channel result output interface. But how does it adapt to multiple predictors? This requires us to further explore the internal structure of the BPU.&#xA;The above figure is the BPU architecture diagram from the Xiangshan documentation. Currently, we only need to focus on one piece of information: all internal sub-predictors are encapsulated in a structure called Composer.</description>
    </item>
    <item>
      <title>Introduction to the Timing of Xiangshan Branch Prediction Unit</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/basic/03_xsbpu_timing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/basic/03_xsbpu_timing/</guid>
      <description>Single-Cycle Prediction without Bubble uFTB is the only predictor in Xiangshan BPU that can generate prediction results in a single cycle. The figure below shows the prediction process of uFTB. The s0_pc is sent from the top level of BPU, and when the s1 stage is active, the s1_pc retains the value of s0_pc from the previous cycle. This means that the value of s0_pc will move down the pipeline.</description>
    </item>
  </channel>
</rss>
