<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Important Structures and Interface Documentation on OpenVerify Courses</title>
    <link>https://open-verify.cc/xs-bpu/en/docs/ports/</link>
    <description>Recent content in Important Structures and Interface Documentation on OpenVerify Courses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://open-verify.cc/xs-bpu/en/docs/ports/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FTB Item and Complete Prediction Result Interface</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/ports/00_ftb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/ports/00_ftb/</guid>
      <description>FTB item The FTB item is the core data structure of branch prediction blocks in Xiangshan. It stores the information needed to generate a branch prediction block. When BPU performs predictions, the initial branch prediction block is first generated from a read-out FTB item. Then, this branch prediction block is passed to subsequent predictors, which read and modify the information to generate the final prediction result.&#xA;Therefore, to understand the structure of a branch prediction block, we first need to understand the structure of an FTB item.</description>
    </item>
    <item>
      <title>Redirection and Update Interfaces</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/ports/01_redirect_and_update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/ports/01_redirect_and_update/</guid>
      <description>Branch Prediction Redirection（BranchPredictionRedirect） Interface Definition：src/main/scala/xiangshan/frontend/FrontendBundle.scala&#xA;Interface Type：BranchPredictionRedirect&#xA;This interface defines the redirection requests from the branch prediction unit, mainly used to redirect the state of the branch predictor.&#xA;The BranchPredictionRedirect interface inherits from the Redirect interface and includes many signals, only a subset of which are used by the BPU redirection. The documented structure contains only the interfaces used by the BPU.&#xA;Redirection requests have two sources: those generated by comparing IFU pre-decode information and those generated during the backend execution process.</description>
    </item>
    <item>
      <title>BPU Global Interface</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/ports/02_global_ports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/ports/02_global_ports/</guid>
      <description>BPU Module Overall External Interface (PredirectIO) Interface definition: src/main/scala/xiangshan/frontend/BPU.scala&#xA;PredirectIO is the overall external interface of the branch predictor (BPU). It mainly handles the interaction between the branch predictor (BPU) and the fetch target queue (FTQ), which includes the following parts:&#xA;bpu_to_ftq: Information sent from BPU to FTQ, mainly for sending branch prediction results from BPU to FTQ Interface type： BpuToFtqIO Interface type： resp: Global branch prediction information sent from BPU to FTQ Interface type：DecoupledIO(new BpuToFtqBundle()) BpuToFtqBundle inherits from BranchPredictionResp，without additional signals Interface type：See (BranchPredictionResp) ftq_to_bpu: Information sent from FTQ to BPU, mainly for handling redirect and update requests Interface type： FtqToBpuIO Interface type： redirect: Redirect request sent from FTQ to BPU Interface type： Valid(new BranchPredictionRedirect) Interface list：See （BranchPredictionRedirect） update: Update request sent from FTQ to BPU Interface type：Valid(new BranchPredictionUpdate) Interface list：See （BranchPredictionUpdate） enq_ptr: FTQ pointer sent to BPU, indicating which FTQ entry to write to next Interface type：FtqPtr ctrl: BPU control signals, mainly for enabling various predictors Interface type：BPUCtrl Interface list： ubtb_enable: UBTB predictor enable Interface type：Bool() btb_enable: BTB predictor enable Interface type：Bool() bim_enable: BIM predictor enable Interface type：Bool() tage_enable: TAGE predictor enable Interface type：Bool() sc_enable: SC predictor enable Interface type：Bool() ras_enable: RAS predictor enable Interface type：Bool() loop_enable: LOOP predictor enable Interface type：Bool() reset_vector: Reset vector, which the BPU&amp;rsquo;s PC will be reset to upon reset Interface type：UInt(PAddrBits.</description>
    </item>
    <item>
      <title>Base Predictor Class and Sub Predictor Interface</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/ports/03_subpredictor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/ports/03_subpredictor/</guid>
      <description>In the Xiangshan branch prediction unit, all its sub-predictors and the class implementations of Composer are inherited from the sub-predictor base class (BasePredictor). The sub-predictor interface (BasePredictorIO) is also defined in the sub-predictor base class. Therefore, we can consider that Composer and all sub-predictors have the same interface.&#xA;In the understanding and verification of sub-prediction, our most direct external interaction occurs in the sub-predictor interface and some variables defined in the sub-predictor base class.</description>
    </item>
  </channel>
</rss>
