<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sub-Predictors on OpenVerify Courses</title>
    <link>https://open-verify.cc/xs-bpu/en/tags/sub-predictors/</link>
    <description>Recent content in Sub-Predictors on OpenVerify Courses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://open-verify.cc/xs-bpu/en/tags/sub-predictors/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction to the Xiangshan Branch Prediction Unit Structure</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/basic/02_xsbpu_structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/basic/02_xsbpu_structure/</guid>
      <description>How Does the BPU Integrate Internal Sub-predictors? We already know that the Xiangshan BPU adopts multiple predictors and multiple pipeline schemes. To adapt to multiple pipelines, the BPU uses a three-channel result output interface. But how does it adapt to multiple predictors? This requires us to further explore the internal structure of the BPU.&#xA;The above figure is the BPU architecture diagram from the Xiangshan documentation. Currently, we only need to focus on one piece of information: all internal sub-predictors are encapsulated in a structure called Composer.</description>
    </item>
    <item>
      <title>Submodule Documentation</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/modules/</guid>
      <description>This section of the documentation will provide a detailed introduction to each module of the Xiangshan Branch Prediction Unit, including the BPU top-level and five sub-predictors.&#xA;In each module&amp;rsquo;s documentation, we will provide a detailed explanation of the module&amp;rsquo;s role in the Xiangshan Branch Prediction Unit, as well as the module&amp;rsquo;s algorithm principles, structure, and timing.&#xA;Students responsible for verifying a specific module should read the corresponding documentation thoroughly and understand it in conjunction with the code.</description>
    </item>
  </channel>
</rss>
