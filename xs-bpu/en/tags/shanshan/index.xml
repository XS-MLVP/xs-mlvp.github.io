<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shanshan on OpenVerify Courses</title>
    <link>https://open-verify.cc/xs-bpu/en/tags/shanshan/</link>
    <description>Recent content in Shanshan on OpenVerify Courses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://open-verify.cc/xs-bpu/en/tags/shanshan/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic Design of Shanshan Branch Prediction Unit (BPU)</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/basic/</guid>
      <description>In processor design, a well-designed branch predictor (BPU) is a key component for improving processor performance. It is responsible for guiding the processor&amp;rsquo;s fetch, determining where the next instruction should be fetched and executed. The BPU is the starting point of an instruction&amp;rsquo;s lifecycle, so exploring a high-performance processor from the BPU is a good starting point.&#xA;This is also true for Shanshan, a high-performance processor with out-of-order six-issue execution, which naturally requires a branch prediction unit with high accuracy and efficiency.</description>
    </item>
    <item>
      <title>What is Branch Prediction</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/basic/00_bp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/basic/00_bp/</guid>
      <description>Why Do We Need Branch Prediction? There are mainly two reasons for branch prediction: one is that the program&amp;rsquo;s execution flow contains branch instructions, and the other is that high-performance processors use pipeline design.&#xA;Program&amp;rsquo;s Execution Flow Contains Branch Instructions int x = 10; int y = 20; int result = 0; if (x &amp;gt;= y) { result = x + y; } else { result = x - y; } The above is a piece of C code.</description>
    </item>
  </channel>
</rss>
