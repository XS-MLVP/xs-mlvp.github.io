<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenVerify Courses â€“ Prediction Result Redirection</title>
    <link>https://open-verify.cc/xs-bpu/en/tags/prediction-result-redirection/</link>
    <description>Recent content in Prediction Result Redirection on OpenVerify Courses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	  <atom:link href="https://open-verify.cc/xs-bpu/en/tags/prediction-result-redirection/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Introduction to the Timing of Xiangshan Branch Prediction Unit</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/basic/03_xsbpu_timing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://open-verify.cc/xs-bpu/en/docs/basic/03_xsbpu_timing/</guid>
      <description>
        
        
        &lt;h2 id=&#34;single-cycle-prediction-without-bubble&#34;&gt;Single-Cycle Prediction without Bubble&lt;/h2&gt;

&lt;figure&gt;
    &lt;img src=&#34;1.png&#34; width=&#34;500px&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;uFTB&lt;/code&gt; is the only predictor in Xiangshan BPU that can generate prediction results in a single cycle. The figure below shows the prediction process of &lt;code&gt;uFTB&lt;/code&gt;. The &lt;code&gt;s0_pc&lt;/code&gt; is sent from the top level of BPU, and when the s1 stage is active, the &lt;code&gt;s1_pc&lt;/code&gt; retains the value of &lt;code&gt;s0_pc&lt;/code&gt; from the previous cycle. This means that the value of &lt;code&gt;s0_pc&lt;/code&gt; will move down the pipeline.&lt;/p&gt;
&lt;p&gt;When the s1 stage is active, &lt;code&gt;uFTB&lt;/code&gt; receives the &lt;code&gt;s1_fire&lt;/code&gt; signal from the current cycle and generates a prediction result based on the &lt;code&gt;s1_pc&lt;/code&gt; address in this cycle, which can obtain the new PC value in the prediction result.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;2.png&#34; width=&#34;500px&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As shown in the figure, the top level of BPU analyzes the next PC value position based on the prediction result channel s1 and sends it to &lt;code&gt;npc_Gen&lt;/code&gt; (new PC generator) for generating the s0_pc of the next cycle.&lt;/p&gt;
&lt;p&gt;In the next cycle, &lt;code&gt;uFTB&lt;/code&gt; gets the new PC value and starts generating the prediction block for the new PC value. Therefore, with only the s1 stage, the prediction block can be generated at a rate of one block per cycle.&lt;/p&gt;
&lt;h2 id=&#34;prediction-result-redirection&#34;&gt;Prediction Result Redirection&lt;/h2&gt;
&lt;p&gt;However, except for &lt;code&gt;uFTB&lt;/code&gt;, other predictors require 2-3 cycles to generate prediction results. How to utilize their prediction results? And how to generate the prediction result redirection signal?&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;3.png&#34; width=&#34;500px&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;As shown in the figure, a &lt;code&gt;Predirector 2&lt;/code&gt; that takes two cycles to generate a prediction result can output its prediction result to the s2 prediction result channel in the s2 stage. After the top level of BPU receives the prediction result, it analyzes the jump target address &lt;code&gt;target&lt;/code&gt; of the prediction block and connects it to &lt;code&gt;npc_Gen&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At this point, the signal connected to &lt;code&gt;npc_Gen&lt;/code&gt; contains both the old PC prediction result generated by s2 and the new PC prediction result generated by s1. How to choose which one to use for the new PC?&lt;/p&gt;
&lt;p&gt;As mentioned earlier, BPU compares the prediction result of s2 with the prediction result of s1 from the previous cycle. If the prediction results are different, it indicates that s1 has made a wrong prediction, and naturally, the prediction result of the current cycle generated based on the wrong prediction result of the previous cycle is also wrong. Therefore, if the prediction result is incorrect in the current cycle, &lt;code&gt;npc_Gen&lt;/code&gt; will use the &lt;code&gt;target&lt;/code&gt; provided by s2 as the new &lt;code&gt;s0_pc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This process is shown in the pipeline structure diagram as follows:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;4.png&#34; width=&#34;500px&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;The Diff comparator compares the prediction results of the s1 stage with those of the previous cycle to generate a diff signal, guiding &lt;code&gt;npc_Gen&lt;/code&gt; to generate the next PC. At the same time, the diff signal indicates that the prediction result of the s1 stage is incorrect and can be used directly by BPU to redirect the prediction result channel of the s2 stage in the FTQ, instructing the FTQ to overwrite the previous prediction result.&lt;/p&gt;
&lt;p&gt;The diff signal is also sent to each predictor through the s2_redirect interface to guide the predictors to update their states.&lt;/p&gt;
&lt;p&gt;Furthermore, when the prediction result redirection of the s2 stage occurs, indicating that the prediction result of the s1 channel is incorrect, the s2 stage cannot continue to predict and needs to invalidate the &lt;code&gt;s2_fire&lt;/code&gt; signal of the predictor pipeline and wait for the corrected prediction result to flow in.&lt;/p&gt;
&lt;p&gt;The prediction result redirection of the s3 stage is similar to this. Its pipeline structure diagram is as follows. The specific processing process is left for you to analyze.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;5.png&#34; width=&#34;500px&#34;/&gt; 
&lt;/figure&gt;

&lt;h2 id=&#34;redirection-requests-and-other-information-generation&#34;&gt;Redirection Requests and Other Information Generation&lt;/h2&gt;

&lt;figure&gt;
    &lt;img src=&#34;6.png&#34; width=&#34;500px&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Only when the prediction information of all three stages is incorrect will an external redirection request occur. At this time, &lt;code&gt;npc_Gen&lt;/code&gt; will receive the PC address from the redirection request. Since when a redirection request occurs, we assume that all three stages have predicted incorrectly, so all three stages&amp;rsquo; &lt;code&gt;fire&lt;/code&gt; signals need to be invalidated. Then, &lt;code&gt;npc_Gen&lt;/code&gt; uses the PC that needs to be restored from the redirection request to restart the prediction.&lt;/p&gt;
&lt;p&gt;Other information, such as the generation of the global history and the PC, follows the same principle and is maintained based on the prediction information of each stage. The global history generates a new branch history based on the prediction results of each stage.&lt;/p&gt;
&lt;h2 id=&#34;pipeline-control-signals&#34;&gt;Pipeline Control Signals&lt;/h2&gt;
&lt;p&gt;After learning about the specific process of the pipeline, you should understand the pipeline control signals in the predictor interface, as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;s0_fire, s1_fire, s2_fire, s3_fire&lt;/strong&gt; Indicate whether each stage of the pipeline is working.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s2_redirect, s3_redirect&lt;/strong&gt;           Indicate whether a prediction result redirection has occurred.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s1_ready, s2_ready, s3_ready&lt;/strong&gt;    Sent from the predictor to the top level of BPU, indicating whether each stage of the pipeline is ready.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;By now, you should understand the basic design principles, external interaction logic, internal structure, timing, etc., of the Xiangshan Branch Prediction Unit, and have a rough understanding of the working principle of BPU. Xiangshan&amp;rsquo;s BPU is no longer mysterious to you.&lt;/p&gt;
&lt;p&gt;Next, you can read the &lt;code&gt;Important Structures and Interfaces Document&lt;/code&gt; and combine it with the source code of Xiangshan BPU to form a more detailed understanding of BPU. When you clearly understand the working principle and signal details of BPU, you can start your verification work!&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
