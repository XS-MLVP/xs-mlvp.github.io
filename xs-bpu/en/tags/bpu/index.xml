<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BPU on OpenVerify Courses</title>
    <link>https://open-verify.cc/xs-bpu/en/tags/bpu/</link>
    <description>Recent content in BPU on OpenVerify Courses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://open-verify.cc/xs-bpu/en/tags/bpu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic Design of Shanshan Branch Prediction Unit (BPU)</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/basic/</guid>
      <description>In processor design, a well-designed branch predictor (BPU) is a key component for improving processor performance. It is responsible for guiding the processor&amp;rsquo;s fetch, determining where the next instruction should be fetched and executed. The BPU is the starting point of an instruction&amp;rsquo;s lifecycle, so exploring a high-performance processor from the BPU is a good starting point.&#xA;This is also true for Shanshan, a high-performance processor with out-of-order six-issue execution, which naturally requires a branch prediction unit with high accuracy and efficiency.</description>
    </item>
    <item>
      <title>BPU Top Feature List</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/feature/00_bpufeature/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/feature/00_bpufeature/</guid>
      <description>Feature List upport uFTB sub-predictor Support TAGE-SC sub-predictor Support FTB sub-predictor Support ITTAGE sub-predictor Support RAS sub-predictor Support three-stage prediction result and other information output Support prediction result redirection signal generation Support pipeline control signal generation Support PC generation Support global branch history maintenance Support branch folding history maintenance Support redirection request response, state restoration Support update request response </description>
    </item>
    <item>
      <title>What is Branch Prediction</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/basic/00_bp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/basic/00_bp/</guid>
      <description>Why Do We Need Branch Prediction? There are mainly two reasons for branch prediction: one is that the program&amp;rsquo;s execution flow contains branch instructions, and the other is that high-performance processors use pipeline design.&#xA;Program&amp;rsquo;s Execution Flow Contains Branch Instructions int x = 10; int y = 20; int result = 0; if (x &amp;gt;= y) { result = x + y; } else { result = x - y; } The above is a piece of C code.</description>
    </item>
    <item>
      <title>Important Structures and Interface Documentation</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/ports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/ports/</guid>
      <description>This document will describe the important structures and external interfaces in the BPU, with a description granularity that delves into the code level. The structures described in the document will be consistent with the Chisel version of the Xiangshan branch prediction unit code, and the signal structures and names also come from the Chisel version code.&#xA;This document is intended for those who have already understood the basic design of the Xiangshan branch prediction unit and want to delve into the signal details.</description>
    </item>
    <item>
      <title>BPU Global Interface</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/ports/02_global_ports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/ports/02_global_ports/</guid>
      <description>BPU Module Overall External Interface (PredirectIO) Interface definition: src/main/scala/xiangshan/frontend/BPU.scala&#xA;PredirectIO is the overall external interface of the branch predictor (BPU). It mainly handles the interaction between the branch predictor (BPU) and the fetch target queue (FTQ), which includes the following parts:&#xA;bpu_to_ftq: Information sent from BPU to FTQ, mainly for sending branch prediction results from BPU to FTQ Interface type： BpuToFtqIO Interface type： resp: Global branch prediction information sent from BPU to FTQ Interface type：DecoupledIO(new BpuToFtqBundle()) BpuToFtqBundle inherits from BranchPredictionResp，without additional signals Interface type：See (BranchPredictionResp) ftq_to_bpu: Information sent from FTQ to BPU, mainly for handling redirect and update requests Interface type： FtqToBpuIO Interface type： redirect: Redirect request sent from FTQ to BPU Interface type： Valid(new BranchPredictionRedirect) Interface list：See （BranchPredictionRedirect） update: Update request sent from FTQ to BPU Interface type：Valid(new BranchPredictionUpdate) Interface list：See （BranchPredictionUpdate） enq_ptr: FTQ pointer sent to BPU, indicating which FTQ entry to write to next Interface type：FtqPtr ctrl: BPU control signals, mainly for enabling various predictors Interface type：BPUCtrl Interface list： ubtb_enable: UBTB predictor enable Interface type：Bool() btb_enable: BTB predictor enable Interface type：Bool() bim_enable: BIM predictor enable Interface type：Bool() tage_enable: TAGE predictor enable Interface type：Bool() sc_enable: SC predictor enable Interface type：Bool() ras_enable: RAS predictor enable Interface type：Bool() loop_enable: LOOP predictor enable Interface type：Bool() reset_vector: Reset vector, which the BPU&amp;rsquo;s PC will be reset to upon reset Interface type：UInt(PAddrBits.</description>
    </item>
    <item>
      <title>Submodule Documentation</title>
      <link>https://open-verify.cc/xs-bpu/en/docs/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://open-verify.cc/xs-bpu/en/docs/modules/</guid>
      <description>This section of the documentation will provide a detailed introduction to each module of the Xiangshan Branch Prediction Unit, including the BPU top-level and five sub-predictors.&#xA;In each module&amp;rsquo;s documentation, we will provide a detailed explanation of the module&amp;rsquo;s role in the Xiangshan Branch Prediction Unit, as well as the module&amp;rsquo;s algorithm principles, structure, and timing.&#xA;Students responsible for verifying a specific module should read the corresponding documentation thoroughly and understand it in conjunction with the code.</description>
    </item>
  </channel>
</rss>
